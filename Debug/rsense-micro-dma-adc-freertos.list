
rsense-micro-dma-adc-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c15c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013920  0800c31c  0800c31c  0001c31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fc3c  0801fc3c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  0801fc3c  0801fc3c  0002fc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fc44  0801fc44  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fc44  0801fc44  0002fc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fc48  0801fc48  0002fc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0801fc4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d98  20000078  0801fcc4  00030078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001e10  0801fcc4  00031e10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020ecc  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f36  00000000  00000000  00050f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001950  00000000  00000000  00054eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017d0  00000000  00000000  00056800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000352b4  00000000  00000000  00057fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000167d1  00000000  00000000  0008d284  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00146404  00000000  00000000  000a3a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001e9e59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e9c  00000000  00000000  001e9f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00003452  00000000  00000000  001f0de0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c304 	.word	0x0800c304

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	0800c304 	.word	0x0800c304

08000200 <arm_bitreversal_32>:
 8000200:	1c4b      	adds	r3, r1, #1
 8000202:	2b01      	cmp	r3, #1
 8000204:	bf98      	it	ls
 8000206:	4770      	bxls	lr
 8000208:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800020c:	1c91      	adds	r1, r2, #2
 800020e:	089b      	lsrs	r3, r3, #2

08000210 <arm_bitreversal_32_0>:
 8000210:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000214:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000218:	880a      	ldrh	r2, [r1, #0]
 800021a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800021e:	4480      	add	r8, r0
 8000220:	4481      	add	r9, r0
 8000222:	4402      	add	r2, r0
 8000224:	4484      	add	ip, r0
 8000226:	f8d9 7000 	ldr.w	r7, [r9]
 800022a:	f8d8 6000 	ldr.w	r6, [r8]
 800022e:	6815      	ldr	r5, [r2, #0]
 8000230:	f8dc 4000 	ldr.w	r4, [ip]
 8000234:	f8c9 6000 	str.w	r6, [r9]
 8000238:	f8c8 7000 	str.w	r7, [r8]
 800023c:	f8cc 5000 	str.w	r5, [ip]
 8000240:	6014      	str	r4, [r2, #0]
 8000242:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000246:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800024a:	6855      	ldr	r5, [r2, #4]
 800024c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000250:	f8c9 6004 	str.w	r6, [r9, #4]
 8000254:	f8c8 7004 	str.w	r7, [r8, #4]
 8000258:	f8cc 5004 	str.w	r5, [ip, #4]
 800025c:	6054      	str	r4, [r2, #4]
 800025e:	3108      	adds	r1, #8
 8000260:	3b01      	subs	r3, #1
 8000262:	d1d5      	bne.n	8000210 <arm_bitreversal_32_0>
 8000264:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000268:	4770      	bx	lr

0800026a <arm_bitreversal_16>:
 800026a:	1c4b      	adds	r3, r1, #1
 800026c:	2b01      	cmp	r3, #1
 800026e:	bf98      	it	ls
 8000270:	4770      	bxls	lr
 8000272:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000276:	1c91      	adds	r1, r2, #2
 8000278:	089b      	lsrs	r3, r3, #2

0800027a <arm_bitreversal_16_0>:
 800027a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800027e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000282:	880a      	ldrh	r2, [r1, #0]
 8000284:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000288:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800028c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000290:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000294:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000298:	f8d9 7000 	ldr.w	r7, [r9]
 800029c:	f8d8 6000 	ldr.w	r6, [r8]
 80002a0:	6815      	ldr	r5, [r2, #0]
 80002a2:	f8dc 4000 	ldr.w	r4, [ip]
 80002a6:	f8c9 6000 	str.w	r6, [r9]
 80002aa:	f8c8 7000 	str.w	r7, [r8]
 80002ae:	f8cc 5000 	str.w	r5, [ip]
 80002b2:	6014      	str	r4, [r2, #0]
 80002b4:	3108      	adds	r1, #8
 80002b6:	3b01      	subs	r3, #1
 80002b8:	d1df      	bne.n	800027a <arm_bitreversal_16_0>
 80002ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002be:	4770      	bx	lr

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <AUDIO_FFT_Init>:
* @brief  Initialize the FFT processing depending on the desired configuration
* @param  AUDIO_FFT_instance_t* AUDIO_FFT_instance
* @retval None
*/
int32_t AUDIO_FFT_Init(AUDIO_FFT_instance_t* AUDIO_FFT_instance)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Initialize FFT ARM structure */
  arm_rfft_fast_init_f32(&(AUDIO_FFT_instance->context.S), AUDIO_FFT_instance->FFT_len);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f103 0214 	add.w	r2, r3, #20
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4610      	mov	r0, r2
 8000f60:	f009 f834 	bl	8009fcc <arm_rfft_fast_init_f32>

  /*Compute indexes to be used for overlap */
  AUDIO_FFT_instance->context.new_data_len = (uint32_t)((float)(AUDIO_FFT_instance->FFT_len) *  (1.0f - (float)(AUDIO_FFT_instance->overlap)));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f86:	ee17 2a90 	vmov	r2, s15
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  AUDIO_FFT_instance->context.old_data_len = (uint32_t)((float)(AUDIO_FFT_instance->FFT_len) -  AUDIO_FFT_instance->context.new_data_len);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	ee07 3a90 	vmov	s15, r3
 8000f96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9e:	ee07 3a90 	vmov	s15, r3
 8000fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fae:	ee17 2a90 	vmov	r2, s15
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize scratch buffer index */
  AUDIO_FFT_instance->context.scratch_idx = 0;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Memory allocation */
  if(AUDIO_FFT_instance->win_type != AUDIO_FTT_RECT_WIN)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d009      	beq.n	8000fd8 <AUDIO_FFT_Init+0x90>
  {
    AUDIO_FFT_instance->context.win = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2104      	movs	r1, #4
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f00a f900 	bl	800b1d0 <calloc>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  AUDIO_FFT_instance->context.scratch = (float * )calloc(AUDIO_FFT_instance->context.new_data_len, sizeof(float));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00a f8f6 	bl	800b1d0 <calloc>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c
  AUDIO_FFT_instance->context.dataIn = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f00a f8ec 	bl	800b1d0 <calloc>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	641a      	str	r2, [r3, #64]	; 0x40
  AUDIO_FFT_instance->context.fftIn = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2104      	movs	r1, #4
 8001006:	4618      	mov	r0, r3
 8001008:	f00a f8e2 	bl	800b1d0 <calloc>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	645a      	str	r2, [r3, #68]	; 0x44
  if(AUDIO_FFT_instance->output == MAGNITUDE || AUDIO_FFT_instance->output == PHASE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d003      	beq.n	8001024 <AUDIO_FFT_Init+0xdc>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d109      	bne.n	8001038 <AUDIO_FFT_Init+0xf0>
  {
  AUDIO_FFT_instance->context.fftOut = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2104      	movs	r1, #4
 800102a:	4618      	mov	r0, r3
 800102c:	f00a f8d0 	bl	800b1d0 <calloc>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Create window depending on the user choice */
  switch(AUDIO_FFT_instance->win_type)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	2b05      	cmp	r3, #5
 800103e:	d847      	bhi.n	80010d0 <AUDIO_FFT_Init+0x188>
 8001040:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <AUDIO_FFT_Init+0x100>)
 8001042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001046:	bf00      	nop
 8001048:	080010d1 	.word	0x080010d1
 800104c:	08001061 	.word	0x08001061
 8001050:	08001075 	.word	0x08001075
 8001054:	0800108d 	.word	0x0800108d
 8001058:	080010a1 	.word	0x080010a1
 800105c:	080010b9 	.word	0x080010b9
  {
  case AUDIO_FTT_RECT_WIN:
    break;
  case AUDIO_FTT_HAMMING_WIN:
    HammingWin(AUDIO_FFT_instance->FFT_len, AUDIO_FFT_instance->context.win);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	b29a      	uxth	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106a:	4619      	mov	r1, r3
 800106c:	4610      	mov	r0, r2
 800106e:	f000 f9eb 	bl	8001448 <HammingWin>
    break;
 8001072:	e02d      	b.n	80010d0 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_HANNING_WIN:
    TukeyWin(AUDIO_FFT_instance->FFT_len, 1.0f, AUDIO_FFT_instance->context.win);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	b29a      	uxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107e:	4619      	mov	r1, r3
 8001080:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001084:	4610      	mov	r0, r2
 8001086:	f000 f8df 	bl	8001248 <TukeyWin>
    break;
 800108a:	e021      	b.n	80010d0 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_BLACKMAN_HARRIS_WIN:
    BlackmanHarrisWin(AUDIO_FFT_instance->FFT_len, AUDIO_FFT_instance->context.win);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	b29a      	uxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001096:	4619      	mov	r1, r3
 8001098:	4610      	mov	r0, r2
 800109a:	f000 fa39 	bl	8001510 <BlackmanHarrisWin>
    break;
 800109e:	e017      	b.n	80010d0 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_TUKEY_0_25_WIN:
    TukeyWin(AUDIO_FFT_instance->FFT_len, 0.25f, AUDIO_FFT_instance->context.win);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010aa:	4619      	mov	r1, r3
 80010ac:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80010b0:	4610      	mov	r0, r2
 80010b2:	f000 f8c9 	bl	8001248 <TukeyWin>
    break;
 80010b6:	e00b      	b.n	80010d0 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_TUKEY_0_75_WIN:
    TukeyWin(AUDIO_FFT_instance->FFT_len, 0.75f, AUDIO_FFT_instance->context.win);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c2:	4619      	mov	r1, r3
 80010c4:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80010c8:	4610      	mov	r0, r2
 80010ca:	f000 f8bd 	bl	8001248 <TukeyWin>
    break;
 80010ce:	bf00      	nop
  }

  return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop

080010dc <AUDIO_FFT_Data_Input>:
* @param  data: input data buffer
* @param  len: length of input data buffer
* @retval None
*/
int32_t AUDIO_FFT_Data_Input(int16_t * data, uint32_t len, AUDIO_FFT_instance_t* AUDIO_FFT_instance)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  int32_t ret = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t index = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s_idx = AUDIO_FFT_instance->context.scratch_idx;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t new_data_len = AUDIO_FFT_instance->context.new_data_len;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	61fb      	str	r3, [r7, #28]

  float * scratch_ptr = &AUDIO_FFT_instance->context.scratch[s_idx];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	623b      	str	r3, [r7, #32]

  for (index = 0; index < len; index ++)
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
 800110c:	e041      	b.n	8001192 <AUDIO_FFT_Data_Input+0xb6>
  {
    *scratch_ptr++ = (float)data[index]/32768.0f;
 800110e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4413      	add	r3, r2
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	1d1a      	adds	r2, r3, #4
 8001126:	623a      	str	r2, [r7, #32]
 8001128:	eddf 6a20 	vldr	s13, [pc, #128]	; 80011ac <AUDIO_FFT_Data_Input+0xd0>
 800112c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001130:	edc3 7a00 	vstr	s15, [r3]
    s_idx++;
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	3301      	adds	r3, #1
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    if (s_idx == new_data_len)
 800113a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	429a      	cmp	r2, r3
 8001140:	d124      	bne.n	800118c <AUDIO_FFT_Data_Input+0xb0>
    {
      float * data_in = AUDIO_FFT_instance->context.dataIn;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	61bb      	str	r3, [r7, #24]
      uint32_t old_data_len = AUDIO_FFT_instance->context.old_data_len;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	617b      	str	r3, [r7, #20]

      memcpy(data_in, &data_in[AUDIO_FFT_instance->FFT_len - old_data_len], old_data_len * sizeof(float));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	18d1      	adds	r1, r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	461a      	mov	r2, r3
 8001162:	69b8      	ldr	r0, [r7, #24]
 8001164:	f00a f866 	bl	800b234 <memcpy>
      memcpy(&data_in[old_data_len], AUDIO_FFT_instance->context.scratch, new_data_len * sizeof(float));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	18d0      	adds	r0, r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	461a      	mov	r2, r3
 800117a:	f00a f85b 	bl	800b234 <memcpy>

      ret = 1;
 800117e:	2301      	movs	r3, #1
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
      s_idx = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
      scratch_ptr = &AUDIO_FFT_instance->context.scratch[0];
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118a:	623b      	str	r3, [r7, #32]
  for (index = 0; index < len; index ++)
 800118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118e:	3301      	adds	r3, #1
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	429a      	cmp	r2, r3
 8001198:	d8b9      	bhi.n	800110e <AUDIO_FFT_Data_Input+0x32>
//      AUDIO_FFT_Process(AUDIO_FFT_instance, FFT_Out);
    }

  }

  AUDIO_FFT_instance->context.scratch_idx = s_idx;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800119e:	635a      	str	r2, [r3, #52]	; 0x34

  return ret;
 80011a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3730      	adds	r7, #48	; 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	47000000 	.word	0x47000000

080011b0 <AUDIO_FFT_Process>:
* @param  AUDIO_FFT_instance_t* AUDIO_FFT_instance
* @param  output: FFT amplitude buffer
* @retval None
*/
int32_t AUDIO_FFT_Process(AUDIO_FFT_instance_t* AUDIO_FFT_instance, float * output)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]

  float * win = AUDIO_FFT_instance->context.win;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011be:	617b      	str	r3, [r7, #20]
  float * dataIn = AUDIO_FFT_instance->context.dataIn;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	613b      	str	r3, [r7, #16]
  float * fftIn = AUDIO_FFT_instance->context.fftIn;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	60fb      	str	r3, [r7, #12]

  if(AUDIO_FFT_instance->win_type != AUDIO_FTT_RECT_WIN)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d007      	beq.n	80011e4 <AUDIO_FFT_Process+0x34>
  {
  arm_mult_f32(dataIn, win, fftIn, AUDIO_FFT_instance->FFT_len);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	6979      	ldr	r1, [r7, #20]
 80011dc:	6938      	ldr	r0, [r7, #16]
 80011de:	f009 fccf 	bl	800ab80 <arm_mult_f32>
 80011e2:	e007      	b.n	80011f4 <AUDIO_FFT_Process+0x44>
  }
  else
  {
    memcpy(fftIn, dataIn, sizeof(float) * AUDIO_FFT_instance->FFT_len);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	461a      	mov	r2, r3
 80011ec:	6939      	ldr	r1, [r7, #16]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f00a f820 	bl	800b234 <memcpy>
  }

  if(AUDIO_FFT_instance->output == COMPLEX)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d107      	bne.n	800120c <AUDIO_FFT_Process+0x5c>
  {
  arm_rfft_fast_f32(&AUDIO_FFT_instance->context.S, fftIn, output, 0);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f103 0014 	add.w	r0, r3, #20
 8001202:	2300      	movs	r3, #0
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	68f9      	ldr	r1, [r7, #12]
 8001208:	f008 ff64 	bl	800a0d4 <arm_rfft_fast_f32>
  }

  if(AUDIO_FFT_instance->output == MAGNITUDE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d112      	bne.n	800123a <AUDIO_FFT_Process+0x8a>
  {
    float * fftOut = AUDIO_FFT_instance->context.fftOut;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001218:	60bb      	str	r3, [r7, #8]
    arm_rfft_fast_f32(&AUDIO_FFT_instance->context.S, fftIn, fftOut, 0);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f103 0014 	add.w	r0, r3, #20
 8001220:	2300      	movs	r3, #0
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	68f9      	ldr	r1, [r7, #12]
 8001226:	f008 ff55 	bl	800a0d4 <arm_rfft_fast_f32>
    arm_cmplx_mag_f32(fftOut, output, AUDIO_FFT_instance->FFT_len/ 2);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	085b      	lsrs	r3, r3, #1
 8001230:	461a      	mov	r2, r3
 8001232:	6839      	ldr	r1, [r7, #0]
 8001234:	68b8      	ldr	r0, [r7, #8]
 8001236:	f009 fbbb 	bl	800a9b0 <arm_cmplx_mag_f32>
  if(AUDIO_FFT_instance->output == PHASE)
  {
    /*Not implemented in v1.0.0*/
  }

  return 0;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	0000      	movs	r0, r0
	...

08001248 <TukeyWin>:


static void TukeyWin(uint16_t len, float ratio, float * dest)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	ed87 0a02 	vstr	s0, [r7, #8]
 8001254:	6079      	str	r1, [r7, #4]
 8001256:	81fb      	strh	r3, [r7, #14]
  uint16_t x = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	82fb      	strh	r3, [r7, #22]
  for ( x = 0; x < len * (ratio / 2) ; x++)
 800125c:	2300      	movs	r3, #0
 800125e:	82fb      	strh	r3, [r7, #22]
 8001260:	e04f      	b.n	8001302 <TukeyWin+0xba>
  {
    dest[x] = 0.5f * (1.0f + cosf(2.0f * M_PI / ratio * ( (float)x/(len - 1.0f) - (ratio / 2))));
 8001262:	68b8      	ldr	r0, [r7, #8]
 8001264:	f7ff f998 	bl	8000598 <__aeabi_f2d>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	461a      	mov	r2, r3
 800126e:	4623      	mov	r3, r4
 8001270:	a173      	add	r1, pc, #460	; (adr r1, 8001440 <TukeyWin+0x1f8>)
 8001272:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001276:	f7ff fb11 	bl	800089c <__aeabi_ddiv>
 800127a:	4603      	mov	r3, r0
 800127c:	460c      	mov	r4, r1
 800127e:	4625      	mov	r5, r4
 8001280:	461c      	mov	r4, r3
 8001282:	8afb      	ldrh	r3, [r7, #22]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800128c:	89fb      	ldrh	r3, [r7, #14]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800129e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012a2:	edd7 6a02 	vldr	s13, [r7, #8]
 80012a6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80012aa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80012ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b2:	ee17 0a90 	vmov	r0, s15
 80012b6:	f7ff f96f 	bl	8000598 <__aeabi_f2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4620      	mov	r0, r4
 80012c0:	4629      	mov	r1, r5
 80012c2:	f7ff f9c1 	bl	8000648 <__aeabi_dmul>
 80012c6:	4603      	mov	r3, r0
 80012c8:	460c      	mov	r4, r1
 80012ca:	4618      	mov	r0, r3
 80012cc:	4621      	mov	r1, r4
 80012ce:	f7ff fc6b 	bl	8000ba8 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	ee00 3a10 	vmov	s0, r3
 80012d8:	f00a f83a 	bl	800b350 <cosf>
 80012dc:	eeb0 7a40 	vmov.f32	s14, s0
 80012e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80012e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e8:	8afb      	ldrh	r3, [r7, #22]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f8:	edc3 7a00 	vstr	s15, [r3]
  for ( x = 0; x < len * (ratio / 2) ; x++)
 80012fc:	8afb      	ldrh	r3, [r7, #22]
 80012fe:	3301      	adds	r3, #1
 8001300:	82fb      	strh	r3, [r7, #22]
 8001302:	8afb      	ldrh	r3, [r7, #22]
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130c:	89fb      	ldrh	r3, [r7, #14]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001316:	ed97 6a02 	vldr	s12, [r7, #8]
 800131a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800131e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d498      	bmi.n	8001262 <TukeyWin+0x1a>
  }
  for( ; x <  len - len * (ratio / 2); x++)
 8001330:	e009      	b.n	8001346 <TukeyWin+0xfe>
  {
    dest[x] = 1.0f;
 8001332:	8afb      	ldrh	r3, [r7, #22]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800133e:	601a      	str	r2, [r3, #0]
  for( ; x <  len - len * (ratio / 2); x++)
 8001340:	8afb      	ldrh	r3, [r7, #22]
 8001342:	3301      	adds	r3, #1
 8001344:	82fb      	strh	r3, [r7, #22]
 8001346:	8afb      	ldrh	r3, [r7, #22]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001350:	89fb      	ldrh	r3, [r7, #14]
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800135a:	89fb      	ldrh	r3, [r7, #14]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001364:	edd7 5a02 	vldr	s11, [r7, #8]
 8001368:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800136c:	eec5 7a85 	vdiv.f32	s15, s11, s10
 8001370:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001374:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	d4d7      	bmi.n	8001332 <TukeyWin+0xea>
  }
  for( ; x <  len; x++)
 8001382:	e053      	b.n	800142c <TukeyWin+0x1e4>
  {
    dest[x] = 0.5f * (1.0f + cosf(2.0f * M_PI / ratio * ( (float)x/(len - 1.0f) - 1 + (ratio / 2))));
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f7ff f907 	bl	8000598 <__aeabi_f2d>
 800138a:	4603      	mov	r3, r0
 800138c:	460c      	mov	r4, r1
 800138e:	461a      	mov	r2, r3
 8001390:	4623      	mov	r3, r4
 8001392:	a12b      	add	r1, pc, #172	; (adr r1, 8001440 <TukeyWin+0x1f8>)
 8001394:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001398:	f7ff fa80 	bl	800089c <__aeabi_ddiv>
 800139c:	4603      	mov	r3, r0
 800139e:	460c      	mov	r4, r1
 80013a0:	4625      	mov	r5, r4
 80013a2:	461c      	mov	r4, r3
 80013a4:	8afb      	ldrh	r3, [r7, #22]
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013c8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013cc:	edd7 6a02 	vldr	s13, [r7, #8]
 80013d0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80013d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013dc:	ee17 0a90 	vmov	r0, s15
 80013e0:	f7ff f8da 	bl	8000598 <__aeabi_f2d>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4620      	mov	r0, r4
 80013ea:	4629      	mov	r1, r5
 80013ec:	f7ff f92c 	bl	8000648 <__aeabi_dmul>
 80013f0:	4603      	mov	r3, r0
 80013f2:	460c      	mov	r4, r1
 80013f4:	4618      	mov	r0, r3
 80013f6:	4621      	mov	r1, r4
 80013f8:	f7ff fbd6 	bl	8000ba8 <__aeabi_d2f>
 80013fc:	4603      	mov	r3, r0
 80013fe:	ee00 3a10 	vmov	s0, r3
 8001402:	f009 ffa5 	bl	800b350 <cosf>
 8001406:	eeb0 7a40 	vmov.f32	s14, s0
 800140a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800140e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001412:	8afb      	ldrh	r3, [r7, #22]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800141e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001422:	edc3 7a00 	vstr	s15, [r3]
  for( ; x <  len; x++)
 8001426:	8afb      	ldrh	r3, [r7, #22]
 8001428:	3301      	adds	r3, #1
 800142a:	82fb      	strh	r3, [r7, #22]
 800142c:	8afa      	ldrh	r2, [r7, #22]
 800142e:	89fb      	ldrh	r3, [r7, #14]
 8001430:	429a      	cmp	r2, r3
 8001432:	d3a7      	bcc.n	8001384 <TukeyWin+0x13c>
  }
}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}
 800143c:	f3af 8000 	nop.w
 8001440:	54442d18 	.word	0x54442d18
 8001444:	401921fb 	.word	0x401921fb

08001448 <HammingWin>:

static void HammingWin(uint16_t len, float * dest)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	80fb      	strh	r3, [r7, #6]
  uint16_t x = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	82fb      	strh	r3, [r7, #22]
  float alpha0 = 0.53836f;
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HammingWin+0xc0>)
 800145a:	613b      	str	r3, [r7, #16]
  float alpha1 = 1.0f - alpha0;
 800145c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001460:	edd7 7a04 	vldr	s15, [r7, #16]
 8001464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001468:	edc7 7a03 	vstr	s15, [r7, #12]

  for ( x = 0; x < len ; x++)
 800146c:	2300      	movs	r3, #0
 800146e:	82fb      	strh	r3, [r7, #22]
 8001470:	e03e      	b.n	80014f0 <HammingWin+0xa8>
  {
    dest[x] = alpha0 - alpha1 * cosf(2.0f * M_PI * (float)x / (float)len);
 8001472:	8afb      	ldrh	r3, [r7, #22]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ee17 0a90 	vmov	r0, s15
 8001480:	f7ff f88a 	bl	8000598 <__aeabi_f2d>
 8001484:	a31e      	add	r3, pc, #120	; (adr r3, 8001500 <HammingWin+0xb8>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f8dd 	bl	8000648 <__aeabi_dmul>
 800148e:	4603      	mov	r3, r0
 8001490:	460c      	mov	r4, r1
 8001492:	4625      	mov	r5, r4
 8001494:	461c      	mov	r4, r3
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a0:	ee17 0a90 	vmov	r0, s15
 80014a4:	f7ff f878 	bl	8000598 <__aeabi_f2d>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4620      	mov	r0, r4
 80014ae:	4629      	mov	r1, r5
 80014b0:	f7ff f9f4 	bl	800089c <__aeabi_ddiv>
 80014b4:	4603      	mov	r3, r0
 80014b6:	460c      	mov	r4, r1
 80014b8:	4618      	mov	r0, r3
 80014ba:	4621      	mov	r1, r4
 80014bc:	f7ff fb74 	bl	8000ba8 <__aeabi_d2f>
 80014c0:	4603      	mov	r3, r0
 80014c2:	ee00 3a10 	vmov	s0, r3
 80014c6:	f009 ff43 	bl	800b350 <cosf>
 80014ca:	eeb0 7a40 	vmov.f32	s14, s0
 80014ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	8afb      	ldrh	r3, [r7, #22]
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	ed97 7a04 	vldr	s14, [r7, #16]
 80014e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e6:	edc3 7a00 	vstr	s15, [r3]
  for ( x = 0; x < len ; x++)
 80014ea:	8afb      	ldrh	r3, [r7, #22]
 80014ec:	3301      	adds	r3, #1
 80014ee:	82fb      	strh	r3, [r7, #22]
 80014f0:	8afa      	ldrh	r2, [r7, #22]
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d3bc      	bcc.n	8001472 <HammingWin+0x2a>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001500:	54442d18 	.word	0x54442d18
 8001504:	401921fb 	.word	0x401921fb
 8001508:	3f09d1f6 	.word	0x3f09d1f6
 800150c:	00000000 	.word	0x00000000

08001510 <BlackmanHarrisWin>:

static void BlackmanHarrisWin(uint16_t len, float * dest)
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	ed2d 8b02 	vpush	{d8}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	80fb      	strh	r3, [r7, #6]
  uint16_t x = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	82fb      	strh	r3, [r7, #22]
  float alpha0 = 0.42f;
 8001524:	4b48      	ldr	r3, [pc, #288]	; (8001648 <BlackmanHarrisWin+0x138>)
 8001526:	613b      	str	r3, [r7, #16]
  float alpha1 = 0.5;
 8001528:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800152c:	60fb      	str	r3, [r7, #12]
  float alpha2 = 0.08f;
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <BlackmanHarrisWin+0x13c>)
 8001530:	60bb      	str	r3, [r7, #8]

  for ( x = 0; x < len ; x++)
 8001532:	2300      	movs	r3, #0
 8001534:	82fb      	strh	r3, [r7, #22]
 8001536:	e074      	b.n	8001622 <BlackmanHarrisWin+0x112>
  {
    dest[x] = alpha0 - alpha1 * cosf(2.0f * M_PI * (float)x / (float)len) + - alpha2 * cosf(4.0f * M_PI * (float)x / (float)len);
 8001538:	8afb      	ldrh	r3, [r7, #22]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001542:	ee17 0a90 	vmov	r0, s15
 8001546:	f7ff f827 	bl	8000598 <__aeabi_f2d>
 800154a:	a33b      	add	r3, pc, #236	; (adr r3, 8001638 <BlackmanHarrisWin+0x128>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f87a 	bl	8000648 <__aeabi_dmul>
 8001554:	4603      	mov	r3, r0
 8001556:	460c      	mov	r4, r1
 8001558:	4625      	mov	r5, r4
 800155a:	461c      	mov	r4, r3
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001566:	ee17 0a90 	vmov	r0, s15
 800156a:	f7ff f815 	bl	8000598 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4620      	mov	r0, r4
 8001574:	4629      	mov	r1, r5
 8001576:	f7ff f991 	bl	800089c <__aeabi_ddiv>
 800157a:	4603      	mov	r3, r0
 800157c:	460c      	mov	r4, r1
 800157e:	4618      	mov	r0, r3
 8001580:	4621      	mov	r1, r4
 8001582:	f7ff fb11 	bl	8000ba8 <__aeabi_d2f>
 8001586:	4603      	mov	r3, r0
 8001588:	ee00 3a10 	vmov	s0, r3
 800158c:	f009 fee0 	bl	800b350 <cosf>
 8001590:	eeb0 7a40 	vmov.f32	s14, s0
 8001594:	edd7 7a03 	vldr	s15, [r7, #12]
 8001598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159c:	ed97 7a04 	vldr	s14, [r7, #16]
 80015a0:	ee37 8a67 	vsub.f32	s16, s14, s15
 80015a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a8:	eef1 8a67 	vneg.f32	s17, s15
 80015ac:	8afb      	ldrh	r3, [r7, #22]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b6:	ee17 0a90 	vmov	r0, s15
 80015ba:	f7fe ffed 	bl	8000598 <__aeabi_f2d>
 80015be:	a320      	add	r3, pc, #128	; (adr r3, 8001640 <BlackmanHarrisWin+0x130>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7ff f840 	bl	8000648 <__aeabi_dmul>
 80015c8:	4603      	mov	r3, r0
 80015ca:	460c      	mov	r4, r1
 80015cc:	4625      	mov	r5, r4
 80015ce:	461c      	mov	r4, r3
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	ee07 3a90 	vmov	s15, r3
 80015d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015da:	ee17 0a90 	vmov	r0, s15
 80015de:	f7fe ffdb 	bl	8000598 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7ff f957 	bl	800089c <__aeabi_ddiv>
 80015ee:	4603      	mov	r3, r0
 80015f0:	460c      	mov	r4, r1
 80015f2:	4618      	mov	r0, r3
 80015f4:	4621      	mov	r1, r4
 80015f6:	f7ff fad7 	bl	8000ba8 <__aeabi_d2f>
 80015fa:	4603      	mov	r3, r0
 80015fc:	ee00 3a10 	vmov	s0, r3
 8001600:	f009 fea6 	bl	800b350 <cosf>
 8001604:	eef0 7a40 	vmov.f32	s15, s0
 8001608:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800160c:	8afb      	ldrh	r3, [r7, #22]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	4413      	add	r3, r2
 8001614:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001618:	edc3 7a00 	vstr	s15, [r3]
  for ( x = 0; x < len ; x++)
 800161c:	8afb      	ldrh	r3, [r7, #22]
 800161e:	3301      	adds	r3, #1
 8001620:	82fb      	strh	r3, [r7, #22]
 8001622:	8afa      	ldrh	r2, [r7, #22]
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	429a      	cmp	r2, r3
 8001628:	d386      	bcc.n	8001538 <BlackmanHarrisWin+0x28>
  }
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	ecbd 8b02 	vpop	{d8}
 8001634:	bdb0      	pop	{r4, r5, r7, pc}
 8001636:	bf00      	nop
 8001638:	54442d18 	.word	0x54442d18
 800163c:	401921fb 	.word	0x401921fb
 8001640:	54442d18 	.word	0x54442d18
 8001644:	402921fb 	.word	0x402921fb
 8001648:	3ed70a3d 	.word	0x3ed70a3d
 800164c:	3da3d70a 	.word	0x3da3d70a

08001650 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <vApplicationGetIdleTaskMemory+0x2c>)
 8001660:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <vApplicationGetIdleTaskMemory+0x30>)
 8001666:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000094 	.word	0x20000094
 8001680:	200000e8 	.word	0x200000e8

08001684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168a:	f001 f81e 	bl	80026ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168e:	f000 f87d 	bl	800178c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001692:	f000 f9e1 	bl	8001a58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001696:	f000 f9b5 	bl	8001a04 <MX_DMA_Init>
  MX_ADC1_Init();
 800169a:	f000 f901 	bl	80018a0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800169e:	f000 f965 	bl	800196c <MX_USART2_UART_Init>
  estado = SM_SENSOR_STATE_INITIALIZING;
 80016a2:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <main+0xcc>)
 80016a4:	2203      	movs	r2, #3
 80016a6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 2 */
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);


    /********************************* QUEUE RELATED *************************************/
    SimpleQueue = xQueueCreate(2, sizeof(FFT_Out));
 80016a8:	2200      	movs	r2, #0
 80016aa:	2104      	movs	r1, #4
 80016ac:	2002      	movs	r0, #2
 80016ae:	f006 fabc 	bl	8007c2a <xQueueGenericCreate>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <main+0xd0>)
 80016b6:	601a      	str	r2, [r3, #0]
    if (SimpleQueue == 0) //Queue not created
 80016b8:	4b26      	ldr	r3, [pc, #152]	; (8001754 <main+0xd0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10d      	bne.n	80016dc <main+0x58>
    {
  	  char *str ="Unable to create FFT_Out Queue\n\n";
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <main+0xd4>)
 80016c2:	603b      	str	r3, [r7, #0]
  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f7fe fdfb 	bl	80002c0 <strlen>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	4821      	ldr	r0, [pc, #132]	; (800175c <main+0xd8>)
 80016d6:	f004 fea5 	bl	8006424 <HAL_UART_Transmit>
 80016da:	e00c      	b.n	80016f6 <main+0x72>
    }
    else
    {
  	  char *str ="FFT_Out Queue created successfully\n\n";
 80016dc:	4b20      	ldr	r3, [pc, #128]	; (8001760 <main+0xdc>)
 80016de:	607b      	str	r3, [r7, #4]
  	  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7fe fded 	bl	80002c0 <strlen>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	481a      	ldr	r0, [pc, #104]	; (800175c <main+0xd8>)
 80016f2:	f004 fe97 	bl	8006424 <HAL_UART_Transmit>
    }

    /******************************* SEMAPHORE RELATED ***********************************/
    /* Data read complete semaphore initialization */
      fft_data_input_sem_id = osSemaphoreCreate(osSemaphore(fft_data_input_sem), 1);
 80016f6:	2101      	movs	r1, #1
 80016f8:	481a      	ldr	r0, [pc, #104]	; (8001764 <main+0xe0>)
 80016fa:	f005 fe9b 	bl	8007434 <osSemaphoreCreate>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <main+0xe4>)
 8001702:	601a      	str	r2, [r3, #0]
      osSemaphoreWait(fft_data_input_sem_id,osWaitForever);
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <main+0xe4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	4618      	mov	r0, r3
 800170e:	f005 fec5 	bl	800749c <osSemaphoreWait>


    /********************************* TASK RELATED *************************************/
      xTaskCreate(Receiver_Task, "Receive", 256, NULL, 3, &Receiver_Handler);
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <main+0xe8>)
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	2303      	movs	r3, #3
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2300      	movs	r3, #0
 800171c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001720:	4913      	ldr	r1, [pc, #76]	; (8001770 <main+0xec>)
 8001722:	4814      	ldr	r0, [pc, #80]	; (8001774 <main+0xf0>)
 8001724:	f007 f8db 	bl	80088de <xTaskCreate>
      xTaskCreate(Sender_HPT_Task, "HPT_SEND", 256, NULL, 2, &Sender_HPT_Handler);
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <main+0xf4>)
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	2302      	movs	r3, #2
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2300      	movs	r3, #0
 8001732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001736:	4911      	ldr	r1, [pc, #68]	; (800177c <main+0xf8>)
 8001738:	4811      	ldr	r0, [pc, #68]	; (8001780 <main+0xfc>)
 800173a:	f007 f8d0 	bl	80088de <xTaskCreate>
      //  xTaskCreate(Sender_LPT_Task, "LPT_SEND", 128, (void *)111, 2, &Sender_LPT_Handler);



    amicPool_id = osPoolCreate(osPool(amicPool));
 800173e:	4811      	ldr	r0, [pc, #68]	; (8001784 <main+0x100>)
 8001740:	f005 ff30 	bl	80075a4 <osPoolCreate>
 8001744:	4602      	mov	r2, r0
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <main+0x104>)
 8001748:	601a      	str	r2, [r3, #0]



    vTaskStartScheduler();
 800174a:	f007 f9fd 	bl	8008b48 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800174e:	e7fe      	b.n	800174e <main+0xca>
 8001750:	2000100c 	.word	0x2000100c
 8001754:	20001010 	.word	0x20001010
 8001758:	0800c31c 	.word	0x0800c31c
 800175c:	20001d30 	.word	0x20001d30
 8001760:	0800c340 	.word	0x0800c340
 8001764:	0800c3a0 	.word	0x0800c3a0
 8001768:	200002ec 	.word	0x200002ec
 800176c:	20001008 	.word	0x20001008
 8001770:	0800c368 	.word	0x0800c368
 8001774:	080021ed 	.word	0x080021ed
 8001778:	20001000 	.word	0x20001000
 800177c:	0800c370 	.word	0x0800c370
 8001780:	0800209d 	.word	0x0800209d
 8001784:	0800c394 	.word	0x0800c394
 8001788:	20001014 	.word	0x20001014

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0be      	sub	sp, #248	; 0xf8
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001796:	2244      	movs	r2, #68	; 0x44
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f009 fd55 	bl	800b24a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	229c      	movs	r2, #156	; 0x9c
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f009 fd47 	bl	800b24a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80017bc:	2000      	movs	r0, #0
 80017be:	f002 fdef 	bl	80043a0 <HAL_PWREx_ControlVoltageScaling>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <SystemClock_Config+0x40>
  {
    Error_Handler();
 80017c8:	f000 fd6e 	bl	80022a8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80017cc:	2310      	movs	r3, #16
 80017ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017d2:	2301      	movs	r3, #1
 80017d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017de:	2360      	movs	r3, #96	; 0x60
 80017e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e4:	2302      	movs	r3, #2
 80017e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 80017f6:	233c      	movs	r3, #60	; 0x3c
 80017f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001802:	2302      	movs	r3, #2
 8001804:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001808:	2302      	movs	r3, #2
 800180a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fe78 	bl	8004508 <HAL_RCC_OscConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800181e:	f000 fd43 	bl	80022a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001822:	230f      	movs	r3, #15
 8001824:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001828:	2303      	movs	r3, #3
 800182a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001840:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001844:	2105      	movs	r1, #5
 8001846:	4618      	mov	r0, r3
 8001848:	f003 fa84 	bl	8004d54 <HAL_RCC_ClockConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001852:	f000 fd29 	bl	80022a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8001856:	f244 0302 	movw	r3, #16386	; 0x4002
 800185a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800185c:	2300      	movs	r3, #0
 800185e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001860:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001868:	2301      	movs	r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800186c:	2301      	movs	r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001870:	2310      	movs	r3, #16
 8001872:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8001874:	2319      	movs	r3, #25
 8001876:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001878:	2304      	movs	r3, #4
 800187a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 800187c:	2304      	movs	r3, #4
 800187e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001884:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fd41 	bl	8005310 <HAL_RCCEx_PeriphCLKConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001894:	f000 fd08 	bl	80022a8 <Error_Handler>
  }
}
 8001898:	bf00      	nop
 800189a:	37f8      	adds	r7, #248	; 0xf8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018a6:	463b      	mov	r3, r7
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
 80018b4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <MX_ADC1_Init+0xbc>)
 80018b8:	4a29      	ldr	r2, [pc, #164]	; (8001960 <MX_ADC1_Init+0xc0>)
 80018ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <MX_ADC1_Init+0xbc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <MX_ADC1_Init+0xbc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <MX_ADC1_Init+0xbc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018ce:	4b23      	ldr	r3, [pc, #140]	; (800195c <MX_ADC1_Init+0xbc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <MX_ADC1_Init+0xbc>)
 80018d6:	2204      	movs	r2, #4
 80018d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <MX_ADC1_Init+0xbc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <MX_ADC1_Init+0xbc>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_ADC1_Init+0xbc>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <MX_ADC1_Init+0xbc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <MX_ADC1_Init+0xbc>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <MX_ADC1_Init+0xbc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <MX_ADC1_Init+0xbc>)
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <MX_ADC1_Init+0xbc>)
 800190a:	2200      	movs	r2, #0
 800190c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <MX_ADC1_Init+0xbc>)
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001916:	4811      	ldr	r0, [pc, #68]	; (800195c <MX_ADC1_Init+0xbc>)
 8001918:	f001 f8ea 	bl	8002af0 <HAL_ADC_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001922:	f000 fcc1 	bl	80022a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <MX_ADC1_Init+0xc4>)
 8001928:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800192a:	2306      	movs	r3, #6
 800192c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <MX_ADC1_Init+0xc8>)
 8001934:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001936:	2304      	movs	r3, #4
 8001938:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	4619      	mov	r1, r3
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <MX_ADC1_Init+0xbc>)
 8001944:	f001 faac 	bl	8002ea0 <HAL_ADC_ConfigChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800194e:	f000 fcab 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20001018 	.word	0x20001018
 8001960:	50040000 	.word	0x50040000
 8001964:	04300002 	.word	0x04300002
 8001968:	407f0000 	.word	0x407f0000

0800196c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <MX_USART2_UART_Init+0x90>)
 8001972:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <MX_USART2_UART_Init+0x94>)
 8001974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <MX_USART2_UART_Init+0x90>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <MX_USART2_UART_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <MX_USART2_UART_Init+0x90>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <MX_USART2_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_USART2_UART_Init+0x90>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <MX_USART2_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_USART2_UART_Init+0x90>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b4:	4811      	ldr	r0, [pc, #68]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019b6:	f004 fce5 	bl	8006384 <HAL_UART_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80019c0:	f000 fc72 	bl	80022a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c4:	2100      	movs	r1, #0
 80019c6:	480d      	ldr	r0, [pc, #52]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019c8:	f005 fc3e 	bl	8007248 <HAL_UARTEx_SetTxFifoThreshold>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80019d2:	f000 fc69 	bl	80022a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d6:	2100      	movs	r1, #0
 80019d8:	4808      	ldr	r0, [pc, #32]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019da:	f005 fc73 	bl	80072c4 <HAL_UARTEx_SetRxFifoThreshold>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80019e4:	f000 fc60 	bl	80022a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019ea:	f005 fbf4 	bl	80071d6 <HAL_UARTEx_DisableFifoMode>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80019f4:	f000 fc58 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20001d30 	.word	0x20001d30
 8001a00:	40004400 	.word	0x40004400

08001a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <MX_DMA_Init+0x50>)
 8001a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0e:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <MX_DMA_Init+0x50>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6493      	str	r3, [r2, #72]	; 0x48
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_DMA_Init+0x50>)
 8001a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_DMA_Init+0x50>)
 8001a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <MX_DMA_Init+0x50>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6493      	str	r3, [r2, #72]	; 0x48
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_DMA_Init+0x50>)
 8001a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	200b      	movs	r0, #11
 8001a40:	f001 ffce 	bl	80039e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a44:	200b      	movs	r0, #11
 8001a46:	f001 ffe7 	bl	8003a18 <HAL_NVIC_EnableIRQ>

}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000

08001a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08e      	sub	sp, #56	; 0x38
 8001a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6e:	4bb5      	ldr	r3, [pc, #724]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4ab4      	ldr	r2, [pc, #720]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001a74:	f043 0310 	orr.w	r3, r3, #16
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4bb2      	ldr	r3, [pc, #712]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	623b      	str	r3, [r7, #32]
 8001a84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	4baf      	ldr	r3, [pc, #700]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4aae      	ldr	r2, [pc, #696]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4bac      	ldr	r3, [pc, #688]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9e:	4ba9      	ldr	r3, [pc, #676]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4aa8      	ldr	r2, [pc, #672]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4ba6      	ldr	r3, [pc, #664]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	4ba3      	ldr	r3, [pc, #652]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4aa2      	ldr	r2, [pc, #648]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4ba0      	ldr	r3, [pc, #640]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b9d      	ldr	r3, [pc, #628]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	4a9c      	ldr	r2, [pc, #624]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ada:	4b9a      	ldr	r3, [pc, #616]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae6:	4b97      	ldr	r3, [pc, #604]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	4a96      	ldr	r2, [pc, #600]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001aec:	f043 0308 	orr.w	r3, r3, #8
 8001af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af2:	4b94      	ldr	r3, [pc, #592]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001afe:	4b91      	ldr	r3, [pc, #580]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	4a90      	ldr	r2, [pc, #576]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0a:	4b8e      	ldr	r3, [pc, #568]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8001b16:	f002 fce7 	bl	80044e8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b1a:	4b8a      	ldr	r3, [pc, #552]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a89      	ldr	r2, [pc, #548]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001b20:	f043 0320 	orr.w	r3, r3, #32
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b87      	ldr	r3, [pc, #540]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f242 0102 	movw	r1, #8194	; 0x2002
 8001b38:	4883      	ldr	r0, [pc, #524]	; (8001d48 <MX_GPIO_Init+0x2f0>)
 8001b3a:	f002 fbdf 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f648 0181 	movw	r1, #34945	; 0x8881
 8001b44:	4881      	ldr	r0, [pc, #516]	; (8001d4c <MX_GPIO_Init+0x2f4>)
 8001b46:	f002 fbd9 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b54:	f002 fbd2 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2140      	movs	r1, #64	; 0x40
 8001b5c:	487c      	ldr	r0, [pc, #496]	; (8001d50 <MX_GPIO_Init+0x2f8>)
 8001b5e:	f002 fbcd 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8001b62:	2200      	movs	r2, #0
 8001b64:	f247 5128 	movw	r1, #29992	; 0x7528
 8001b68:	487a      	ldr	r0, [pc, #488]	; (8001d54 <MX_GPIO_Init+0x2fc>)
 8001b6a:	f002 fbc7 	bl	80042fc <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2121      	movs	r1, #33	; 0x21
 8001b72:	4879      	ldr	r0, [pc, #484]	; (8001d58 <MX_GPIO_Init+0x300>)
 8001b74:	f002 fbc2 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001b7e:	4877      	ldr	r0, [pc, #476]	; (8001d5c <MX_GPIO_Init+0x304>)
 8001b80:	f002 fbbc 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8001b84:	f240 4301 	movw	r3, #1025	; 0x401
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b96:	4619      	mov	r1, r3
 8001b98:	486b      	ldr	r0, [pc, #428]	; (8001d48 <MX_GPIO_Init+0x2f0>)
 8001b9a:	f002 fa1d 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 8001b9e:	f244 3301 	movw	r3, #17153	; 0x4301
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	486a      	ldr	r0, [pc, #424]	; (8001d5c <MX_GPIO_Init+0x304>)
 8001bb4:	f002 fa10 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 8001bb8:	2308      	movs	r3, #8
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4865      	ldr	r0, [pc, #404]	; (8001d60 <MX_GPIO_Init+0x308>)
 8001bcc:	f002 fa04 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_MISO_Pin SPI3_MOSI_Pin SPI3_CLK_Pin */
  GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8001bd0:	2338      	movs	r3, #56	; 0x38
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001be0:	2306      	movs	r3, #6
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be8:	4619      	mov	r1, r3
 8001bea:	485c      	ldr	r0, [pc, #368]	; (8001d5c <MX_GPIO_Init+0x304>)
 8001bec:	f002 f9f4 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 8001bf0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c02:	230c      	movs	r3, #12
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4850      	ldr	r0, [pc, #320]	; (8001d50 <MX_GPIO_Init+0x2f8>)
 8001c0e:	f002 f9e3 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8001c12:	f64c 1308 	movw	r3, #51464	; 0xc908
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c18:	4b52      	ldr	r3, [pc, #328]	; (8001d64 <MX_GPIO_Init+0x30c>)
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	4619      	mov	r1, r3
 8001c26:	4848      	ldr	r0, [pc, #288]	; (8001d48 <MX_GPIO_Init+0x2f0>)
 8001c28:	f002 f9d6 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_CLK_Pin;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c3c:	2305      	movs	r3, #5
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c44:	4619      	mov	r1, r3
 8001c46:	4841      	ldr	r0, [pc, #260]	; (8001d4c <MX_GPIO_Init+0x2f4>)
 8001c48:	f002 f9c6 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_PWM_Pin */
  GPIO_InitStruct.Pin = EX_PWM_Pin;
 8001c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6c:	f002 f9b4 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DP_Pin OTG_FS_DM_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 8001c70:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c82:	230a      	movs	r3, #10
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f002 f9a2 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 8001c94:	23f4      	movs	r3, #244	; 0xf4
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001ca4:	230d      	movs	r3, #13
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	4619      	mov	r1, r3
 8001cae:	4826      	ldr	r0, [pc, #152]	; (8001d48 <MX_GPIO_Init+0x2f0>)
 8001cb0:	f002 f992 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 8001cb4:	f242 0302 	movw	r3, #8194	; 0x2002
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	481e      	ldr	r0, [pc, #120]	; (8001d48 <MX_GPIO_Init+0x2f0>)
 8001cce:	f002 f983 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 8001cd2:	f648 0381 	movw	r3, #34945	; 0x8881
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4818      	ldr	r0, [pc, #96]	; (8001d4c <MX_GPIO_Init+0x2f4>)
 8001cec:	f002 f974 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 8001cf0:	f240 6313 	movw	r3, #1555	; 0x613
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d02:	4619      	mov	r1, r3
 8001d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d08:	f002 f966 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 8001d0c:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d16:	2302      	movs	r3, #2
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d1e:	2306      	movs	r3, #6
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d26:	4619      	mov	r1, r3
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <MX_GPIO_Init+0x304>)
 8001d2a:	f002 f955 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8001d2e:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d34:	2303      	movs	r3, #3
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d40:	4619      	mov	r1, r3
 8001d42:	e011      	b.n	8001d68 <MX_GPIO_Init+0x310>
 8001d44:	40021000 	.word	0x40021000
 8001d48:	48001000 	.word	0x48001000
 8001d4c:	48000c00 	.word	0x48000c00
 8001d50:	48000800 	.word	0x48000800
 8001d54:	48001400 	.word	0x48001400
 8001d58:	48001800 	.word	0x48001800
 8001d5c:	48000400 	.word	0x48000400
 8001d60:	48001c00 	.word	0x48001c00
 8001d64:	10110000 	.word	0x10110000
 8001d68:	48a7      	ldr	r0, [pc, #668]	; (8002008 <MX_GPIO_Init+0x5b0>)
 8001d6a:	f002 f935 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001d6e:	2304      	movs	r3, #4
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d7e:	230c      	movs	r3, #12
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d86:	4619      	mov	r1, r3
 8001d88:	48a0      	ldr	r0, [pc, #640]	; (800200c <MX_GPIO_Init+0x5b4>)
 8001d8a:	f002 f925 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 8001d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 8001da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da4:	4619      	mov	r1, r3
 8001da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001daa:	f002 f915 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8001dae:	2340      	movs	r3, #64	; 0x40
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db2:	2301      	movs	r3, #1
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4892      	ldr	r0, [pc, #584]	; (8002010 <MX_GPIO_Init+0x5b8>)
 8001dc6:	f002 f907 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SMBA_Pin I2C2_SDA_Pin I2C2_SDAF0_Pin */
  GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 8001dca:	2307      	movs	r3, #7
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dce:	2312      	movs	r3, #18
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de2:	4619      	mov	r1, r3
 8001de4:	488b      	ldr	r0, [pc, #556]	; (8002014 <MX_GPIO_Init+0x5bc>)
 8001de6:	f002 f8f7 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8001dea:	f247 5328 	movw	r3, #29992	; 0x7528
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	4884      	ldr	r0, [pc, #528]	; (8002014 <MX_GPIO_Init+0x5bc>)
 8001e04:	f002 f8e8 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8001e08:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e0e:	2312      	movs	r3, #18
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	4619      	mov	r1, r3
 8001e24:	4878      	ldr	r0, [pc, #480]	; (8002008 <MX_GPIO_Init+0x5b0>)
 8001e26:	f002 f8d7 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 8001e2a:	2340      	movs	r3, #64	; 0x40
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e36:	2302      	movs	r3, #2
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e42:	4619      	mov	r1, r3
 8001e44:	4873      	ldr	r0, [pc, #460]	; (8002014 <MX_GPIO_Init+0x5bc>)
 8001e46:	f002 f8c7 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8001e4a:	f44f 7324 	mov.w	r3, #656	; 0x290
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e50:	4b71      	ldr	r3, [pc, #452]	; (8002018 <MX_GPIO_Init+0x5c0>)
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	486d      	ldr	r0, [pc, #436]	; (8002014 <MX_GPIO_Init+0x5bc>)
 8001e60:	f002 f8ba 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8001e64:	231c      	movs	r3, #28
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e74:	2305      	movs	r3, #5
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4862      	ldr	r0, [pc, #392]	; (8002008 <MX_GPIO_Init+0x5b0>)
 8001e80:	f002 f8aa 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 8001e84:	2321      	movs	r3, #33	; 0x21
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	4619      	mov	r1, r3
 8001e9a:	485b      	ldr	r0, [pc, #364]	; (8002008 <MX_GPIO_Init+0x5b0>)
 8001e9c:	f002 f89c 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 8001ea0:	2342      	movs	r3, #66	; 0x42
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ea4:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <MX_GPIO_Init+0x5c0>)
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4855      	ldr	r0, [pc, #340]	; (8002008 <MX_GPIO_Init+0x5b0>)
 8001eb4:	f002 f890 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8001eb8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ebe:	2312      	movs	r3, #18
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	484d      	ldr	r0, [pc, #308]	; (800200c <MX_GPIO_Init+0x5b4>)
 8001ed6:	f002 f87f 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001eda:	230c      	movs	r3, #12
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eea:	2305      	movs	r3, #5
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4846      	ldr	r0, [pc, #280]	; (8002010 <MX_GPIO_Init+0x5b8>)
 8001ef6:	f002 f86f 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 8001efa:	f241 0304 	movw	r3, #4100	; 0x1004
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4843      	ldr	r0, [pc, #268]	; (800201c <MX_GPIO_Init+0x5c4>)
 8001f10:	f002 f862 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 8001f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	483a      	ldr	r0, [pc, #232]	; (8002014 <MX_GPIO_Init+0x5bc>)
 8001f2a:	f002 f855 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8001f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f34:	4b38      	ldr	r3, [pc, #224]	; (8002018 <MX_GPIO_Init+0x5c0>)
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f40:	4619      	mov	r1, r3
 8001f42:	4832      	ldr	r0, [pc, #200]	; (800200c <MX_GPIO_Init+0x5b4>)
 8001f44:	f002 f848 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001f48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f62:	4619      	mov	r1, r3
 8001f64:	4829      	ldr	r0, [pc, #164]	; (800200c <MX_GPIO_Init+0x5b4>)
 8001f66:	f002 f837 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8001f6a:	f242 0302 	movw	r3, #8194	; 0x2002
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f84:	4619      	mov	r1, r3
 8001f86:	4825      	ldr	r0, [pc, #148]	; (800201c <MX_GPIO_Init+0x5c4>)
 8001f88:	f002 f826 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f96:	2302      	movs	r3, #2
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001f9e:	2306      	movs	r3, #6
 8001fa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	481d      	ldr	r0, [pc, #116]	; (8002020 <MX_GPIO_Init+0x5c8>)
 8001faa:	f002 f815 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8001fae:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4815      	ldr	r0, [pc, #84]	; (800201c <MX_GPIO_Init+0x5c4>)
 8001fc8:	f002 f806 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_GPIO_Init+0x5c0>)
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe2:	f001 fff9 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 8001fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fec:	2303      	movs	r3, #3
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4809      	ldr	r0, [pc, #36]	; (8002020 <MX_GPIO_Init+0x5c8>)
 8001ffc:	f001 ffec 	bl	8003fd8 <HAL_GPIO_Init>

}
 8002000:	bf00      	nop
 8002002:	3738      	adds	r7, #56	; 0x38
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	48001800 	.word	0x48001800
 800200c:	48000c00 	.word	0x48000c00
 8002010:	48000800 	.word	0x48000800
 8002014:	48001400 	.word	0x48001400
 8002018:	10110000 	.word	0x10110000
 800201c:	48000400 	.word	0x48000400
 8002020:	48001000 	.word	0x48001000

08002024 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	  void * data_ptr = osPoolAlloc(amicPool_id);
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f005 fb14 	bl	800765e <osPoolAlloc>
 8002036:	60f8      	str	r0, [r7, #12]
	  data_ptr = (void *)adc_buf;
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800203a:	60fb      	str	r3, [r7, #12]
	  osMessagePut(SimpleQueue, (uint32_t)(data_ptr), osWaitForever);
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68f9      	ldr	r1, [r7, #12]
 8002042:	f04f 32ff 	mov.w	r2, #4294967295
 8002046:	4618      	mov	r0, r3
 8002048:	f005 fbac 	bl	80077a4 <osMessagePut>

}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20001014 	.word	0x20001014
 8002058:	20001930 	.word	0x20001930
 800205c:	20001010 	.word	0x20001010

08002060 <HAL_ADC_ConvCpltCallback>:

//Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

	void * data_ptr = osPoolAlloc(amicPool_id);
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_ADC_ConvCpltCallback+0x30>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f005 faf6 	bl	800765e <osPoolAlloc>
 8002072:	60f8      	str	r0, [r7, #12]
	data_ptr = (void *)adc_buf;
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <HAL_ADC_ConvCpltCallback+0x34>)
 8002076:	60fb      	str	r3, [r7, #12]
	osMessagePut(SimpleQueue, (uint32_t)(data_ptr), osWaitForever);
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_ADC_ConvCpltCallback+0x38>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68f9      	ldr	r1, [r7, #12]
 800207e:	f04f 32ff 	mov.w	r2, #4294967295
 8002082:	4618      	mov	r0, r3
 8002084:	f005 fb8e 	bl	80077a4 <osMessagePut>

}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20001014 	.word	0x20001014
 8002094:	20001930 	.word	0x20001930
 8002098:	20001010 	.word	0x20001010

0800209c <Sender_HPT_Task>:



void Sender_HPT_Task (void *argument)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	uint32_t TickDelay = pdMS_TO_TICKS(1);
 80020a4:	2301      	movs	r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
	osEvent evt;
	while (1)
	{
		if (estado == SM_SENSOR_STATE_INITIALIZING)
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <Sender_HPT_Task+0x68>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d109      	bne.n	80020c4 <Sender_HPT_Task+0x28>
		{
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80020b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b4:	4914      	ldr	r1, [pc, #80]	; (8002108 <Sender_HPT_Task+0x6c>)
 80020b6:	4815      	ldr	r0, [pc, #84]	; (800210c <Sender_HPT_Task+0x70>)
 80020b8:	f000 fe64 	bl	8002d84 <HAL_ADC_Start_DMA>
			estado = SM_SENSOR_STATE_RUNNING;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <Sender_HPT_Task+0x68>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e7f1      	b.n	80020a8 <Sender_HPT_Task+0xc>
		}
		else if (estado == SM_SENSOR_STATE_RUNNING)
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <Sender_HPT_Task+0x68>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1ed      	bne.n	80020a8 <Sender_HPT_Task+0xc>
		{
			evt = osMessageGet(SimpleQueue, osWaitForever);
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <Sender_HPT_Task+0x74>)
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295
 80020d8:	4618      	mov	r0, r3
 80020da:	f005 fba3 	bl	8007824 <osMessageGet>

//			char *str2 = "1\n\n\n";
//			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);

			if(estado == SM_SENSOR_STATE_RUNNING) /* Change of state can happen while task blocked */
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <Sender_HPT_Task+0x68>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1e0      	bne.n	80020a8 <Sender_HPT_Task+0xc>
			{
				void * data_ptr = evt.value.p; /* void since it is independent from data format*/
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	61bb      	str	r3, [r7, #24]

//				char *str2 = "2\n\n\n";
//				HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);

				MP23ABS1_Data_Ready((uint8_t *)data_ptr, 512);
 80020ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ee:	69b8      	ldr	r0, [r7, #24]
 80020f0:	f000 f812 	bl	8002118 <MP23ABS1_Data_Ready>
				osPoolFree(amicPool_id, data_ptr);
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <Sender_HPT_Task+0x78>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69b9      	ldr	r1, [r7, #24]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f005 fb11 	bl	8007722 <osPoolFree>
		if (estado == SM_SENSOR_STATE_INITIALIZING)
 8002100:	e7d2      	b.n	80020a8 <Sender_HPT_Task+0xc>
 8002102:	bf00      	nop
 8002104:	2000100c 	.word	0x2000100c
 8002108:	20001930 	.word	0x20001930
 800210c:	20001018 	.word	0x20001018
 8002110:	20001010 	.word	0x20001010
 8002114:	20001014 	.word	0x20001014

08002118 <MP23ABS1_Data_Ready>:
//		vTaskDelay(TickDelay);
//	}
//}

void MP23ABS1_Data_Ready(uint8_t * buf, uint16_t size)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
	if(AUDIO_FFT_Data_Input((int16_t *)buf, size/2, &audio_fft_M1))
 8002124:	887b      	ldrh	r3, [r7, #2]
 8002126:	085b      	lsrs	r3, r3, #1
 8002128:	b29b      	uxth	r3, r3
 800212a:	4a0c      	ldr	r2, [pc, #48]	; (800215c <MP23ABS1_Data_Ready+0x44>)
 800212c:	4619      	mov	r1, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe ffd4 	bl	80010dc <AUDIO_FFT_Data_Input>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <MP23ABS1_Data_Ready+0x3a>
	{
//		char *str2 = "3\n\n\n";
//		HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800213a:	2101      	movs	r1, #1
 800213c:	4808      	ldr	r0, [pc, #32]	; (8002160 <MP23ABS1_Data_Ready+0x48>)
 800213e:	f002 f8f5 	bl	800432c <HAL_GPIO_TogglePin>
		osSemaphoreRelease(fft_data_input_sem_id);
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <MP23ABS1_Data_Ready+0x4c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f005 f9f6 	bl	8007538 <osSemaphoreRelease>
		Mitad1 = 1;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MP23ABS1_Data_Ready+0x50>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
	}
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200010e0 	.word	0x200010e0
 8002160:	48000c00 	.word	0x48000c00
 8002164:	200002ec 	.word	0x200002ec
 8002168:	200002e8 	.word	0x200002e8

0800216c <Cambio_Escala_FFT>:

void Cambio_Escala_FFT(float *FFT, uint16_t size, double *salida)
{
 800216c:	b5b0      	push	{r4, r5, r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	460b      	mov	r3, r1
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	817b      	strh	r3, [r7, #10]
	for(int i=0; i<size; i++)
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e026      	b.n	80021ce <Cambio_Escala_FFT+0x62>
	{
		salida[i] = 20 * log(FFT_Out[i]/256);
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <Cambio_Escala_FFT+0x74>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80021e4 <Cambio_Escala_FFT+0x78>
 8002192:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002196:	ee16 0a90 	vmov	r0, s13
 800219a:	f7fe f9fd 	bl	8000598 <__aeabi_f2d>
 800219e:	4603      	mov	r3, r0
 80021a0:	460c      	mov	r4, r1
 80021a2:	ec44 3b10 	vmov	d0, r3, r4
 80021a6:	f009 f913 	bl	800b3d0 <log>
 80021aa:	ec51 0b10 	vmov	r0, r1, d0
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	18d5      	adds	r5, r2, r3
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <Cambio_Escala_FFT+0x7c>)
 80021bc:	f7fe fa44 	bl	8000648 <__aeabi_dmul>
 80021c0:	4603      	mov	r3, r0
 80021c2:	460c      	mov	r4, r1
 80021c4:	e9c5 3400 	strd	r3, r4, [r5]
	for(int i=0; i<size; i++)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3301      	adds	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	897b      	ldrh	r3, [r7, #10]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	dbd4      	blt.n	8002180 <Cambio_Escala_FFT+0x14>
	}
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bdb0      	pop	{r4, r5, r7, pc}
 80021de:	bf00      	nop
 80021e0:	2000112c 	.word	0x2000112c
 80021e4:	43800000 	.word	0x43800000
 80021e8:	40340000 	.word	0x40340000

080021ec <Receiver_Task>:

void Receiver_Task (void *argument)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	audio_fft_M1.sampling_frequency = AUDIO_IN_SAMPLING_FREQUENCY;
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <Receiver_Task+0x80>)
 80021f6:	4a1e      	ldr	r2, [pc, #120]	; (8002270 <Receiver_Task+0x84>)
 80021f8:	601a      	str	r2, [r3, #0]
	audio_fft_M1.FFT_len = 512;
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <Receiver_Task+0x80>)
 80021fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002200:	605a      	str	r2, [r3, #4]
	audio_fft_M1.overlap = 0.5f;
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <Receiver_Task+0x80>)
 8002204:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002208:	609a      	str	r2, [r3, #8]
	audio_fft_M1.win_type = AUDIO_FTT_HANNING_WIN;
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <Receiver_Task+0x80>)
 800220c:	2202      	movs	r2, #2
 800220e:	60da      	str	r2, [r3, #12]
	audio_fft_M1.output = MAGNITUDE;
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <Receiver_Task+0x80>)
 8002212:	2201      	movs	r2, #1
 8002214:	611a      	str	r2, [r3, #16]
	AUDIO_FFT_Init(&audio_fft_M1);
 8002216:	4815      	ldr	r0, [pc, #84]	; (800226c <Receiver_Task+0x80>)
 8002218:	f7fe fe96 	bl	8000f48 <AUDIO_FFT_Init>

	/* Allocate output buffer */
	FFT_Out = calloc(audio_fft_M1.FFT_len/2 , sizeof(float));
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <Receiver_Task+0x80>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	2104      	movs	r1, #4
 8002224:	4618      	mov	r0, r3
 8002226:	f008 ffd3 	bl	800b1d0 <calloc>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <Receiver_Task+0x88>)
 8002230:	601a      	str	r2, [r3, #0]

//	uint16_t received[ADC_BUF_LEN/2];
	uint32_t TickDelay = pdMS_TO_TICKS(1);
 8002232:	2301      	movs	r3, #1
 8002234:	60fb      	str	r3, [r7, #12]

	while (1)
	{
		osSemaphoreWait(fft_data_input_sem_id,  osWaitForever);
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <Receiver_Task+0x8c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f04f 31ff 	mov.w	r1, #4294967295
 800223e:	4618      	mov	r0, r3
 8002240:	f005 f92c 	bl	800749c <osSemaphoreWait>
//			Mitad1 = 0;
//			osSemaphoreWait(fft_data_input_sem_id,  osWaitForever);
//			char *str2 = "4\n\n\n";
//			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);

			AUDIO_FFT_Process(&audio_fft_M1, FFT_Out);
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <Receiver_Task+0x88>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	4808      	ldr	r0, [pc, #32]	; (800226c <Receiver_Task+0x80>)
 800224c:	f7fe ffb0 	bl	80011b0 <AUDIO_FFT_Process>
			Cambio_Escala_FFT(&FFT_Out, audio_fft_M1.FFT_len/2, &FFT_log);
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <Receiver_Task+0x80>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	b29b      	uxth	r3, r3
 8002258:	4a08      	ldr	r2, [pc, #32]	; (800227c <Receiver_Task+0x90>)
 800225a:	4619      	mov	r1, r3
 800225c:	4805      	ldr	r0, [pc, #20]	; (8002274 <Receiver_Task+0x88>)
 800225e:	f7ff ff85 	bl	800216c <Cambio_Escala_FFT>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002262:	2102      	movs	r1, #2
 8002264:	4806      	ldr	r0, [pc, #24]	; (8002280 <Receiver_Task+0x94>)
 8002266:	f002 f861 	bl	800432c <HAL_GPIO_TogglePin>
		osSemaphoreWait(fft_data_input_sem_id,  osWaitForever);
 800226a:	e7e4      	b.n	8002236 <Receiver_Task+0x4a>
 800226c:	200010e0 	.word	0x200010e0
 8002270:	0001046b 	.word	0x0001046b
 8002274:	2000112c 	.word	0x2000112c
 8002278:	200002ec 	.word	0x200002ec
 800227c:	20001130 	.word	0x20001130
 8002280:	48001000 	.word	0x48001000

08002284 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002296:	f000 fa31 	bl	80026fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40001000 	.word	0x40001000

080022a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ae:	e7fe      	b.n	80022ae <Error_Handler+0x6>

080022b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_MspInit+0x4c>)
 80022b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_MspInit+0x4c>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6613      	str	r3, [r2, #96]	; 0x60
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_MspInit+0x4c>)
 80022c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_MspInit+0x4c>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_MspInit+0x4c>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6593      	str	r3, [r2, #88]	; 0x58
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_MspInit+0x4c>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	210f      	movs	r1, #15
 80022ea:	f06f 0001 	mvn.w	r0, #1
 80022ee:	f001 fb77 	bl	80039e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a30      	ldr	r2, [pc, #192]	; (80023e0 <HAL_ADC_MspInit+0xe0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d15a      	bne.n	80023d8 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002322:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <HAL_ADC_MspInit+0xe4>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	4a2f      	ldr	r2, [pc, #188]	; (80023e4 <HAL_ADC_MspInit+0xe4>)
 8002328:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800232c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_ADC_MspInit+0xe4>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_ADC_MspInit+0xe4>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <HAL_ADC_MspInit+0xe4>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_ADC_MspInit+0xe4>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_ADC_MspInit+0xe4>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <HAL_ADC_MspInit+0xe4>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235e:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <HAL_ADC_MspInit+0xe4>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PA5     ------> ADC1_IN10
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin;//|uC_ADC_BATT_Pin;
 800236a:	2303      	movs	r3, #3
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800236e:	230b      	movs	r3, #11
 8002370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	481a      	ldr	r0, [pc, #104]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 800237e:	f001 fe2b 	bl	8003fd8 <HAL_GPIO_Init>
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    HAL_GPIO_Init(EX_ADC_GPIO_Port, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_ADC_MspInit+0xec>)
 8002384:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <HAL_ADC_MspInit+0xf0>)
 8002386:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002388:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_ADC_MspInit+0xec>)
 800238a:	2205      	movs	r2, #5
 800238c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_ADC_MspInit+0xec>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002394:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_ADC_MspInit+0xec>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_ADC_MspInit+0xec>)
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_ADC_MspInit+0xec>)
 80023a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_ADC_MspInit+0xec>)
 80023aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;//DMA_NORMAL;
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_ADC_MspInit+0xec>)
 80023b2:	2220      	movs	r2, #32
 80023b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_ADC_MspInit+0xec>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023bc:	480b      	ldr	r0, [pc, #44]	; (80023ec <HAL_ADC_MspInit+0xec>)
 80023be:	f001 fb39 	bl	8003a34 <HAL_DMA_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 80023c8:	f7ff ff6e 	bl	80022a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a07      	ldr	r2, [pc, #28]	; (80023ec <HAL_ADC_MspInit+0xec>)
 80023d0:	651a      	str	r2, [r3, #80]	; 0x50
 80023d2:	4a06      	ldr	r2, [pc, #24]	; (80023ec <HAL_ADC_MspInit+0xec>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023d8:	bf00      	nop
 80023da:	3728      	adds	r7, #40	; 0x28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	50040000 	.word	0x50040000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	48000800 	.word	0x48000800
 80023ec:	20001080 	.word	0x20001080
 80023f0:	40020008 	.word	0x40020008

080023f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <HAL_UART_MspInit+0x8c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12f      	bne.n	8002476 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_UART_MspInit+0x90>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	4a1a      	ldr	r2, [pc, #104]	; (8002484 <HAL_UART_MspInit+0x90>)
 800241c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002420:	6593      	str	r3, [r2, #88]	; 0x58
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <HAL_UART_MspInit+0x90>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_UART_MspInit+0x90>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_UART_MspInit+0x90>)
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_UART_MspInit+0x90>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8002446:	2370      	movs	r3, #112	; 0x70
 8002448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002452:	2303      	movs	r3, #3
 8002454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002456:	2307      	movs	r3, #7
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	4809      	ldr	r0, [pc, #36]	; (8002488 <HAL_UART_MspInit+0x94>)
 8002462:	f001 fdb9 	bl	8003fd8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2105      	movs	r1, #5
 800246a:	2026      	movs	r0, #38	; 0x26
 800246c:	f001 fab8 	bl	80039e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002470:	2026      	movs	r0, #38	; 0x26
 8002472:	f001 fad1 	bl	8003a18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002476:	bf00      	nop
 8002478:	3728      	adds	r7, #40	; 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40004400 	.word	0x40004400
 8002484:	40021000 	.word	0x40021000
 8002488:	48000c00 	.word	0x48000c00

0800248c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08c      	sub	sp, #48	; 0x30
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800249c:	2200      	movs	r2, #0
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	2036      	movs	r0, #54	; 0x36
 80024a2:	f001 fa9d 	bl	80039e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024a6:	2036      	movs	r0, #54	; 0x36
 80024a8:	f001 fab6 	bl	8003a18 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_InitTick+0x9c>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <HAL_InitTick+0x9c>)
 80024b2:	f043 0310 	orr.w	r3, r3, #16
 80024b6:	6593      	str	r3, [r2, #88]	; 0x58
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_InitTick+0x9c>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024c4:	f107 0210 	add.w	r2, r7, #16
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 fe2c 	bl	800512c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024d4:	f002 fdfe 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 80024d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	4a13      	ldr	r2, [pc, #76]	; (800252c <HAL_InitTick+0xa0>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	0c9b      	lsrs	r3, r3, #18
 80024e4:	3b01      	subs	r3, #1
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_InitTick+0xa4>)
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <HAL_InitTick+0xa8>)
 80024ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_InitTick+0xa4>)
 80024f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <HAL_InitTick+0xa4>)
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <HAL_InitTick+0xa4>)
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_InitTick+0xa4>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002508:	4809      	ldr	r0, [pc, #36]	; (8002530 <HAL_InitTick+0xa4>)
 800250a:	f003 fc69 	bl	8005de0 <HAL_TIM_Base_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d104      	bne.n	800251e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002514:	4806      	ldr	r0, [pc, #24]	; (8002530 <HAL_InitTick+0xa4>)
 8002516:	f003 fcc5 	bl	8005ea4 <HAL_TIM_Base_Start_IT>
 800251a:	4603      	mov	r3, r0
 800251c:	e000      	b.n	8002520 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	3730      	adds	r7, #48	; 0x30
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	431bde83 	.word	0x431bde83
 8002530:	20001dbc 	.word	0x20001dbc
 8002534:	40001000 	.word	0x40001000

08002538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800253c:	e7fe      	b.n	800253c <NMI_Handler+0x4>

0800253e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002542:	e7fe      	b.n	8002542 <HardFault_Handler+0x4>

08002544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <MemManage_Handler+0x4>

0800254a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <BusFault_Handler+0x4>

08002550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <UsageFault_Handler+0x4>

08002556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <DMA1_Channel1_IRQHandler+0x10>)
 800256a:	f001 fbe5 	bl	8003d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20001080 	.word	0x20001080

08002578 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <USART2_IRQHandler+0x10>)
 800257e:	f003 ffe9 	bl	8006554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20001d30 	.word	0x20001d30

0800258c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <TIM6_DAC_IRQHandler+0x10>)
 8002592:	f003 fcf7 	bl	8005f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20001dbc 	.word	0x20001dbc

080025a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a8:	4a14      	ldr	r2, [pc, #80]	; (80025fc <_sbrk+0x5c>)
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <_sbrk+0x60>)
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <_sbrk+0x64>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <_sbrk+0x64>)
 80025be:	4a12      	ldr	r2, [pc, #72]	; (8002608 <_sbrk+0x68>)
 80025c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <_sbrk+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d207      	bcs.n	80025e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d0:	f008 fe06 	bl	800b1e0 <__errno>
 80025d4:	4602      	mov	r2, r0
 80025d6:	230c      	movs	r3, #12
 80025d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	e009      	b.n	80025f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <_sbrk+0x64>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <_sbrk+0x64>)
 80025f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025f2:	68fb      	ldr	r3, [r7, #12]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200a0000 	.word	0x200a0000
 8002600:	00000400 	.word	0x00000400
 8002604:	200002f0 	.word	0x200002f0
 8002608:	20001e10 	.word	0x20001e10

0800260c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002610:	4b17      	ldr	r3, [pc, #92]	; (8002670 <SystemInit+0x64>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	4a16      	ldr	r2, [pc, #88]	; (8002670 <SystemInit+0x64>)
 8002618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800261c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <SystemInit+0x68>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a13      	ldr	r2, [pc, #76]	; (8002674 <SystemInit+0x68>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <SystemInit+0x68>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <SystemInit+0x68>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <SystemInit+0x68>)
 8002638:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800263c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002640:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <SystemInit+0x68>)
 8002644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002648:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <SystemInit+0x68>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <SystemInit+0x68>)
 8002650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <SystemInit+0x68>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SystemInit+0x64>)
 800265e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002662:	609a      	str	r2, [r3, #8]
#endif
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000ed00 	.word	0xe000ed00
 8002674:	40021000 	.word	0x40021000

08002678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800267c:	f7ff ffc6 	bl	800260c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002680:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002682:	e003      	b.n	800268c <LoopCopyDataInit>

08002684 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002686:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002688:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800268a:	3104      	adds	r1, #4

0800268c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800268c:	480a      	ldr	r0, [pc, #40]	; (80026b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8002690:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002692:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002694:	d3f6      	bcc.n	8002684 <CopyDataInit>
	ldr	r2, =_sbss
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002698:	e002      	b.n	80026a0 <LoopFillZerobss>

0800269a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800269a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800269c:	f842 3b04 	str.w	r3, [r2], #4

080026a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <LoopForever+0x16>)
	cmp	r2, r3
 80026a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80026a4:	d3f9      	bcc.n	800269a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026a6:	f008 fda1 	bl	800b1ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026aa:	f7fe ffeb 	bl	8001684 <main>

080026ae <LoopForever>:

LoopForever:
    b LoopForever
 80026ae:	e7fe      	b.n	80026ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026b0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80026b4:	0801fc4c 	.word	0x0801fc4c
	ldr	r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026bc:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80026c0:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80026c4:	20001e10 	.word	0x20001e10

080026c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC1_IRQHandler>

080026ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d4:	2003      	movs	r0, #3
 80026d6:	f001 f978 	bl	80039ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026da:	2000      	movs	r0, #0
 80026dc:	f7ff fed6 	bl	800248c <HAL_InitTick>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	71fb      	strb	r3, [r7, #7]
 80026ea:	e001      	b.n	80026f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026ec:	f7ff fde0 	bl	80022b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026f0:	79fb      	ldrb	r3, [r7, #7]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x20>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_IncTick+0x24>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4413      	add	r3, r2
 800270c:	4a04      	ldr	r2, [pc, #16]	; (8002720 <HAL_IncTick+0x24>)
 800270e:	6013      	str	r3, [r2, #0]
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000008 	.word	0x20000008
 8002720:	20001e08 	.word	0x20001e08

08002724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return uwTick;
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_GetTick+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20001e08 	.word	0x20001e08

0800273c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	609a      	str	r2, [r3, #8]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	609a      	str	r2, [r3, #8]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3360      	adds	r3, #96	; 0x60
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <LL_ADC_SetOffset+0x44>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	03fff000 	.word	0x03fff000

080027ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3360      	adds	r3, #96	; 0x60
 80027fa:	461a      	mov	r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3360      	adds	r3, #96	; 0x60
 8002828:	461a      	mov	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	431a      	orrs	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	615a      	str	r2, [r3, #20]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800289a:	b480      	push	{r7}
 800289c:	b087      	sub	sp, #28
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3330      	adds	r3, #48	; 0x30
 80028aa:	461a      	mov	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	4413      	add	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	211f      	movs	r1, #31
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	401a      	ands	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0e9b      	lsrs	r3, r3, #26
 80028d2:	f003 011f 	and.w	r1, r3, #31
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	431a      	orrs	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028e6:	bf00      	nop
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b087      	sub	sp, #28
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3314      	adds	r3, #20
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	0e5b      	lsrs	r3, r3, #25
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0d1b      	lsrs	r3, r3, #20
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2107      	movs	r1, #7
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	401a      	ands	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	0d1b      	lsrs	r3, r3, #20
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	431a      	orrs	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	43db      	mvns	r3, r3
 8002962:	401a      	ands	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0318 	and.w	r3, r3, #24
 800296a:	4908      	ldr	r1, [pc, #32]	; (800298c <LL_ADC_SetChannelSingleDiff+0x44>)
 800296c:	40d9      	lsrs	r1, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	400b      	ands	r3, r1
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	431a      	orrs	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	0007ffff 	.word	0x0007ffff

08002990 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6093      	str	r3, [r2, #8]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c8:	d101      	bne.n	80029ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a18:	d101      	bne.n	8002a1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <LL_ADC_IsEnabled+0x18>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <LL_ADC_IsEnabled+0x1a>
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d101      	bne.n	8002aba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d101      	bne.n	8002ae0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e12d      	b.n	8002d66 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff fbf1 	bl	8002300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff3f 	bl	80029b4 <LL_ADC_IsDeepPowerDownEnabled>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff25 	bl	8002990 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff5a 	bl	8002a04 <LL_ADC_IsInternalRegulatorEnabled>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d113      	bne.n	8002b7e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ff3e 	bl	80029dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b60:	4b83      	ldr	r3, [pc, #524]	; (8002d70 <HAL_ADC_Init+0x280>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	4a83      	ldr	r2, [pc, #524]	; (8002d74 <HAL_ADC_Init+0x284>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	099b      	lsrs	r3, r3, #6
 8002b6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b70:	e002      	b.n	8002b78 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f9      	bne.n	8002b72 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff3e 	bl	8002a04 <LL_ADC_IsInternalRegulatorEnabled>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10d      	bne.n	8002baa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	f043 0210 	orr.w	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	f043 0201 	orr.w	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff77 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002bb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 80c8 	bne.w	8002d54 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 80c4 	bne.w	8002d54 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bd4:	f043 0202 	orr.w	r2, r3, #2
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff37 	bl	8002a54 <LL_ADC_IsEnabled>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bec:	4862      	ldr	r0, [pc, #392]	; (8002d78 <HAL_ADC_Init+0x288>)
 8002bee:	f7ff ff31 	bl	8002a54 <LL_ADC_IsEnabled>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	485f      	ldr	r0, [pc, #380]	; (8002d7c <HAL_ADC_Init+0x28c>)
 8002c00:	f7ff fd9c 	bl	800273c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7e5b      	ldrb	r3, [r3, #25]
 8002c08:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c0e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c14:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c1a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c22:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d106      	bne.n	8002c40 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	3b01      	subs	r3, #1
 8002c38:	045b      	lsls	r3, r3, #17
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d009      	beq.n	8002c5c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <HAL_ADC_Init+0x290>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	69b9      	ldr	r1, [r7, #24]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff14 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002c7a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff21 	bl	8002ac8 <LL_ADC_INJ_IsConversionOngoing>
 8002c86:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d140      	bne.n	8002d10 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d13d      	bne.n	8002d10 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7e1b      	ldrb	r3, [r3, #24]
 8002c9c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c9e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ca6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb6:	f023 0306 	bic.w	r3, r3, #6
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	69b9      	ldr	r1, [r7, #24]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d118      	bne.n	8002d00 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cd8:	f023 0304 	bic.w	r3, r3, #4
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ce4:	4311      	orrs	r1, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002cea:	4311      	orrs	r1, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	611a      	str	r2, [r3, #16]
 8002cfe:	e007      	b.n	8002d10 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d10c      	bne.n	8002d32 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f023 010f 	bic.w	r1, r3, #15
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	1e5a      	subs	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d30:	e007      	b.n	8002d42 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 020f 	bic.w	r2, r2, #15
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	f023 0303 	bic.w	r3, r3, #3
 8002d4a:	f043 0201 	orr.w	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	659a      	str	r2, [r3, #88]	; 0x58
 8002d52:	e007      	b.n	8002d64 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	f043 0210 	orr.w	r2, r3, #16
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000000 	.word	0x20000000
 8002d74:	053e2d63 	.word	0x053e2d63
 8002d78:	50040000 	.word	0x50040000
 8002d7c:	50040300 	.word	0x50040300
 8002d80:	fff0c007 	.word	0xfff0c007

08002d84 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fe84 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d167      	bne.n	8002e70 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_Start_DMA+0x2a>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e063      	b.n	8002e76 <HAL_ADC_Start_DMA+0xf2>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fc6c 	bl	8003694 <ADC_Enable>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002dc0:	7dfb      	ldrb	r3, [r7, #23]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d14f      	bne.n	8002e66 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	f023 0206 	bic.w	r2, r3, #6
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002df2:	e002      	b.n	8002dfa <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfe:	4a20      	ldr	r2, [pc, #128]	; (8002e80 <HAL_ADC_Start_DMA+0xfc>)
 8002e00:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e06:	4a1f      	ldr	r2, [pc, #124]	; (8002e84 <HAL_ADC_Start_DMA+0x100>)
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0e:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <HAL_ADC_Start_DMA+0x104>)
 8002e10:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	221c      	movs	r2, #28
 8002e18:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0210 	orr.w	r2, r2, #16
 8002e30:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3340      	adds	r3, #64	; 0x40
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f000 fe97 	bl	8003b84 <HAL_DMA_Start_IT>
 8002e56:	4603      	mov	r3, r0
 8002e58:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fe0b 	bl	8002a7a <LL_ADC_REG_StartConversion>
 8002e64:	e006      	b.n	8002e74 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002e6e:	e001      	b.n	8002e74 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
 8002e72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	08003749 	.word	0x08003749
 8002e84:	08003821 	.word	0x08003821
 8002e88:	0800383d 	.word	0x0800383d

08002e8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b0b6      	sub	sp, #216	; 0xd8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x22>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e3d4      	b.n	800366c <HAL_ADC_ConfigChannel+0x7cc>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fde7 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f040 83b9 	bne.w	800364e <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d824      	bhi.n	8002f2e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	3b02      	subs	r3, #2
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d81b      	bhi.n	8002f26 <HAL_ADC_ConfigChannel+0x86>
 8002eee:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <HAL_ADC_ConfigChannel+0x54>)
 8002ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f0d 	.word	0x08002f0d
 8002efc:	08002f15 	.word	0x08002f15
 8002f00:	08002f1d 	.word	0x08002f1d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	220c      	movs	r2, #12
 8002f08:	605a      	str	r2, [r3, #4]
          break;
 8002f0a:	e011      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2212      	movs	r2, #18
 8002f10:	605a      	str	r2, [r3, #4]
          break;
 8002f12:	e00d      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2218      	movs	r2, #24
 8002f18:	605a      	str	r2, [r3, #4]
          break;
 8002f1a:	e009      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f22:	605a      	str	r2, [r3, #4]
          break;
 8002f24:	e004      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2206      	movs	r2, #6
 8002f2a:	605a      	str	r2, [r3, #4]
          break;
 8002f2c:	e000      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002f2e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f7ff fcac 	bl	800289a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fdab 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002f4c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fdb7 	bl	8002ac8 <LL_ADC_INJ_IsConversionOngoing>
 8002f5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 81c1 	bne.w	80032ea <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 81bc 	bne.w	80032ea <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f7a:	d10f      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2200      	movs	r2, #0
 8002f86:	4619      	mov	r1, r3
 8002f88:	f7ff fcb3 	bl	80028f2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fc5a 	bl	800284e <LL_ADC_SetSamplingTimeCommonConfig>
 8002f9a:	e00e      	b.n	8002fba <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f7ff fca2 	bl	80028f2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fc4a 	bl	800284e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	08db      	lsrs	r3, r3, #3
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d00a      	beq.n	8002ff2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6919      	ldr	r1, [r3, #16]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fec:	f7ff fbda 	bl	80027a4 <LL_ADC_SetOffset>
 8002ff0:	e17b      	b.n	80032ea <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fbf7 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10a      	bne.n	800301e <HAL_ADC_ConfigChannel+0x17e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2100      	movs	r1, #0
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fbec 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003014:	4603      	mov	r3, r0
 8003016:	0e9b      	lsrs	r3, r3, #26
 8003018:	f003 021f 	and.w	r2, r3, #31
 800301c:	e01e      	b.n	800305c <HAL_ADC_ConfigChannel+0x1bc>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fbe1 	bl	80027ec <LL_ADC_GetOffsetChannel>
 800302a:	4603      	mov	r3, r0
 800302c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800303c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003044:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800304c:	2320      	movs	r3, #32
 800304e:	e004      	b.n	800305a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x1d4>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0e9b      	lsrs	r3, r3, #26
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	e018      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x206>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800308c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003090:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003098:	2320      	movs	r3, #32
 800309a:	e004      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800309c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d106      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fbb0 	bl	8002818 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2101      	movs	r1, #1
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fb94 	bl	80027ec <LL_ADC_GetOffsetChannel>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x244>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2101      	movs	r1, #1
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fb89 	bl	80027ec <LL_ADC_GetOffsetChannel>
 80030da:	4603      	mov	r3, r0
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	f003 021f 	and.w	r2, r3, #31
 80030e2:	e01e      	b.n	8003122 <HAL_ADC_ConfigChannel+0x282>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2101      	movs	r1, #1
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fb7e 	bl	80027ec <LL_ADC_GetOffsetChannel>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800310a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003112:	2320      	movs	r3, #32
 8003114:	e004      	b.n	8003120 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312a:	2b00      	cmp	r3, #0
 800312c:	d105      	bne.n	800313a <HAL_ADC_ConfigChannel+0x29a>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	0e9b      	lsrs	r3, r3, #26
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	e018      	b.n	800316c <HAL_ADC_ConfigChannel+0x2cc>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800314e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800315e:	2320      	movs	r3, #32
 8003160:	e004      	b.n	800316c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800316c:	429a      	cmp	r2, r3
 800316e:	d106      	bne.n	800317e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2200      	movs	r2, #0
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fb4d 	bl	8002818 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2102      	movs	r1, #2
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fb31 	bl	80027ec <LL_ADC_GetOffsetChannel>
 800318a:	4603      	mov	r3, r0
 800318c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10a      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x30a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2102      	movs	r1, #2
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fb26 	bl	80027ec <LL_ADC_GetOffsetChannel>
 80031a0:	4603      	mov	r3, r0
 80031a2:	0e9b      	lsrs	r3, r3, #26
 80031a4:	f003 021f 	and.w	r2, r3, #31
 80031a8:	e01e      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x348>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2102      	movs	r1, #2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fb1b 	bl	80027ec <LL_ADC_GetOffsetChannel>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c0:	fa93 f3a3 	rbit	r3, r3
 80031c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80031c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80031d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	e004      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80031dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x360>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0e9b      	lsrs	r3, r3, #26
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	e016      	b.n	800322e <HAL_ADC_ConfigChannel+0x38e>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003212:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003220:	2320      	movs	r3, #32
 8003222:	e004      	b.n	800322e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800322e:	429a      	cmp	r2, r3
 8003230:	d106      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	2102      	movs	r1, #2
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff faec 	bl	8002818 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2103      	movs	r1, #3
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fad0 	bl	80027ec <LL_ADC_GetOffsetChannel>
 800324c:	4603      	mov	r3, r0
 800324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_ADC_ConfigChannel+0x3cc>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2103      	movs	r1, #3
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fac5 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003262:	4603      	mov	r3, r0
 8003264:	0e9b      	lsrs	r3, r3, #26
 8003266:	f003 021f 	and.w	r2, r3, #31
 800326a:	e017      	b.n	800329c <HAL_ADC_ConfigChannel+0x3fc>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2103      	movs	r1, #3
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff faba 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003278:	4603      	mov	r3, r0
 800327a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003286:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800328e:	2320      	movs	r3, #32
 8003290:	e003      	b.n	800329a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x414>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	0e9b      	lsrs	r3, r3, #26
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	e011      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x438>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80032c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80032cc:	2320      	movs	r3, #32
 80032ce:	e003      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80032d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032d8:	429a      	cmp	r2, r3
 80032da:	d106      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2200      	movs	r2, #0
 80032e2:	2103      	movs	r1, #3
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fa97 	bl	8002818 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fbb0 	bl	8002a54 <LL_ADC_IsEnabled>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f040 8140 	bne.w	800357c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6819      	ldr	r1, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	461a      	mov	r2, r3
 800330a:	f7ff fb1d 	bl	8002948 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4a8f      	ldr	r2, [pc, #572]	; (8003550 <HAL_ADC_ConfigChannel+0x6b0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	f040 8131 	bne.w	800357c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10b      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x4a2>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	0e9b      	lsrs	r3, r3, #26
 8003330:	3301      	adds	r3, #1
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2b09      	cmp	r3, #9
 8003338:	bf94      	ite	ls
 800333a:	2301      	movls	r3, #1
 800333c:	2300      	movhi	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	e019      	b.n	8003376 <HAL_ADC_ConfigChannel+0x4d6>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003352:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800335a:	2320      	movs	r3, #32
 800335c:	e003      	b.n	8003366 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800335e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	3301      	adds	r3, #1
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2b09      	cmp	r3, #9
 800336e:	bf94      	ite	ls
 8003370:	2301      	movls	r3, #1
 8003372:	2300      	movhi	r3, #0
 8003374:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003376:	2b00      	cmp	r3, #0
 8003378:	d079      	beq.n	800346e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x4f6>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0e9b      	lsrs	r3, r3, #26
 800338c:	3301      	adds	r3, #1
 800338e:	069b      	lsls	r3, r3, #26
 8003390:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003394:	e015      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x522>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80033a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80033ae:	2320      	movs	r3, #32
 80033b0:	e003      	b.n	80033ba <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80033b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	069b      	lsls	r3, r3, #26
 80033be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x542>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	0e9b      	lsrs	r3, r3, #26
 80033d4:	3301      	adds	r3, #1
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	e017      	b.n	8003412 <HAL_ADC_ConfigChannel+0x572>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80033fa:	2320      	movs	r3, #32
 80033fc:	e003      	b.n	8003406 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80033fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	b2db      	uxtb	r3, r3
 8003406:	3301      	adds	r3, #1
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2101      	movs	r1, #1
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	ea42 0103 	orr.w	r1, r2, r3
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x598>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	0e9b      	lsrs	r3, r3, #26
 8003428:	3301      	adds	r3, #1
 800342a:	f003 021f 	and.w	r2, r3, #31
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	051b      	lsls	r3, r3, #20
 8003436:	e018      	b.n	800346a <HAL_ADC_ConfigChannel+0x5ca>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003448:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800344a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003450:	2320      	movs	r3, #32
 8003452:	e003      	b.n	800345c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	3301      	adds	r3, #1
 800345e:	f003 021f 	and.w	r2, r3, #31
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800346a:	430b      	orrs	r3, r1
 800346c:	e081      	b.n	8003572 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003476:	2b00      	cmp	r3, #0
 8003478:	d107      	bne.n	800348a <HAL_ADC_ConfigChannel+0x5ea>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	0e9b      	lsrs	r3, r3, #26
 8003480:	3301      	adds	r3, #1
 8003482:	069b      	lsls	r3, r3, #26
 8003484:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003488:	e015      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x616>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80034a2:	2320      	movs	r3, #32
 80034a4:	e003      	b.n	80034ae <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	3301      	adds	r3, #1
 80034b0:	069b      	lsls	r3, r3, #26
 80034b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x636>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	0e9b      	lsrs	r3, r3, #26
 80034c8:	3301      	adds	r3, #1
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2101      	movs	r1, #1
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	e017      	b.n	8003506 <HAL_ADC_ConfigChannel+0x666>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	61fb      	str	r3, [r7, #28]
  return result;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80034ee:	2320      	movs	r3, #32
 80034f0:	e003      	b.n	80034fa <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	fab3 f383 	clz	r3, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2101      	movs	r1, #1
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	ea42 0103 	orr.w	r1, r2, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10d      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x692>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	0e9b      	lsrs	r3, r3, #26
 800351c:	3301      	adds	r3, #1
 800351e:	f003 021f 	and.w	r2, r3, #31
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	3b1e      	subs	r3, #30
 800352a:	051b      	lsls	r3, r3, #20
 800352c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003530:	e01e      	b.n	8003570 <HAL_ADC_ConfigChannel+0x6d0>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	613b      	str	r3, [r7, #16]
  return result;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800354a:	2320      	movs	r3, #32
 800354c:	e006      	b.n	800355c <HAL_ADC_ConfigChannel+0x6bc>
 800354e:	bf00      	nop
 8003550:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	3301      	adds	r3, #1
 800355e:	f003 021f 	and.w	r2, r3, #31
 8003562:	4613      	mov	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	3b1e      	subs	r3, #30
 800356a:	051b      	lsls	r3, r3, #20
 800356c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003570:	430b      	orrs	r3, r1
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	6892      	ldr	r2, [r2, #8]
 8003576:	4619      	mov	r1, r3
 8003578:	f7ff f9bb 	bl	80028f2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b3c      	ldr	r3, [pc, #240]	; (8003674 <HAL_ADC_ConfigChannel+0x7d4>)
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d06b      	beq.n	8003660 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003588:	483b      	ldr	r0, [pc, #236]	; (8003678 <HAL_ADC_ConfigChannel+0x7d8>)
 800358a:	f7ff f8fd 	bl	8002788 <LL_ADC_GetCommonPathInternalCh>
 800358e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a39      	ldr	r2, [pc, #228]	; (800367c <HAL_ADC_ConfigChannel+0x7dc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d126      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800359c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d120      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a34      	ldr	r2, [pc, #208]	; (8003680 <HAL_ADC_ConfigChannel+0x7e0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d156      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035ba:	4619      	mov	r1, r3
 80035bc:	482e      	ldr	r0, [pc, #184]	; (8003678 <HAL_ADC_ConfigChannel+0x7d8>)
 80035be:	f7ff f8d0 	bl	8002762 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80035c2:	4b30      	ldr	r3, [pc, #192]	; (8003684 <HAL_ADC_ConfigChannel+0x7e4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	099b      	lsrs	r3, r3, #6
 80035c8:	4a2f      	ldr	r2, [pc, #188]	; (8003688 <HAL_ADC_ConfigChannel+0x7e8>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	099a      	lsrs	r2, r3, #6
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035da:	e002      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3b01      	subs	r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f9      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035e8:	e03a      	b.n	8003660 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a27      	ldr	r2, [pc, #156]	; (800368c <HAL_ADC_ConfigChannel+0x7ec>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d113      	bne.n	800361c <HAL_ADC_ConfigChannel+0x77c>
 80035f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <HAL_ADC_ConfigChannel+0x7e0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d12a      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800360a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800360e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003612:	4619      	mov	r1, r3
 8003614:	4818      	ldr	r0, [pc, #96]	; (8003678 <HAL_ADC_ConfigChannel+0x7d8>)
 8003616:	f7ff f8a4 	bl	8002762 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800361a:	e021      	b.n	8003660 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <HAL_ADC_ConfigChannel+0x7f0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d11c      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800362a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d116      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a12      	ldr	r2, [pc, #72]	; (8003680 <HAL_ADC_ConfigChannel+0x7e0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d111      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800363c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003640:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003644:	4619      	mov	r1, r3
 8003646:	480c      	ldr	r0, [pc, #48]	; (8003678 <HAL_ADC_ConfigChannel+0x7d8>)
 8003648:	f7ff f88b 	bl	8002762 <LL_ADC_SetCommonPathInternalCh>
 800364c:	e008      	b.n	8003660 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	f043 0220 	orr.w	r2, r3, #32
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003668:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800366c:	4618      	mov	r0, r3
 800366e:	37d8      	adds	r7, #216	; 0xd8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	80080000 	.word	0x80080000
 8003678:	50040300 	.word	0x50040300
 800367c:	c7520000 	.word	0xc7520000
 8003680:	50040000 	.word	0x50040000
 8003684:	20000000 	.word	0x20000000
 8003688:	053e2d63 	.word	0x053e2d63
 800368c:	cb840000 	.word	0xcb840000
 8003690:	80000001 	.word	0x80000001

08003694 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff f9d7 	bl	8002a54 <LL_ADC_IsEnabled>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d146      	bne.n	800373a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <ADC_Enable+0xb0>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00d      	beq.n	80036d6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	f043 0210 	orr.w	r2, r3, #16
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	f043 0201 	orr.w	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e032      	b.n	800373c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f9a6 	bl	8002a2c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036e0:	f7ff f820 	bl	8002724 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036e6:	e021      	b.n	800372c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f9b1 	bl	8002a54 <LL_ADC_IsEnabled>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff f995 	bl	8002a2c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003702:	f7ff f80f 	bl	8002724 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d90d      	bls.n	800372c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	f043 0210 	orr.w	r2, r3, #16
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	f043 0201 	orr.w	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e007      	b.n	800373c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b01      	cmp	r3, #1
 8003738:	d1d6      	bne.n	80036e8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	8000003f 	.word	0x8000003f

08003748 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800375e:	2b00      	cmp	r3, #0
 8003760:	d14b      	bne.n	80037fa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d021      	beq.n	80037c0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff f877 	bl	8002874 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d032      	beq.n	80037f2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d12b      	bne.n	80037f2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d11f      	bne.n	80037f2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	f043 0201 	orr.w	r2, r3, #1
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	659a      	str	r2, [r3, #88]	; 0x58
 80037be:	e018      	b.n	80037f2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d111      	bne.n	80037f2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d105      	bne.n	80037f2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	f043 0201 	orr.w	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7fe fc34 	bl	8002060 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037f8:	e00e      	b.n	8003818 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff fb40 	bl	8002e8c <HAL_ADC_ErrorCallback>
}
 800380c:	e004      	b.n	8003818 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	4798      	blx	r3
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7fe fbf8 	bl	8002024 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff fb12 	bl	8002e8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800388c:	4013      	ands	r3, r2
 800388e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800389c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038a2:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <__NVIC_SetPriorityGrouping+0x44>)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	60d3      	str	r3, [r2, #12]
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <__NVIC_GetPriorityGrouping+0x18>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	f003 0307 	and.w	r3, r3, #7
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	db0b      	blt.n	80038fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	f003 021f 	and.w	r2, r3, #31
 80038ec:	4907      	ldr	r1, [pc, #28]	; (800390c <__NVIC_EnableIRQ+0x38>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2001      	movs	r0, #1
 80038f6:	fa00 f202 	lsl.w	r2, r0, r2
 80038fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	e000e100 	.word	0xe000e100

08003910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	6039      	str	r1, [r7, #0]
 800391a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003920:	2b00      	cmp	r3, #0
 8003922:	db0a      	blt.n	800393a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	490c      	ldr	r1, [pc, #48]	; (800395c <__NVIC_SetPriority+0x4c>)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	0112      	lsls	r2, r2, #4
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	440b      	add	r3, r1
 8003934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003938:	e00a      	b.n	8003950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4908      	ldr	r1, [pc, #32]	; (8003960 <__NVIC_SetPriority+0x50>)
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	3b04      	subs	r3, #4
 8003948:	0112      	lsls	r2, r2, #4
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	440b      	add	r3, r1
 800394e:	761a      	strb	r2, [r3, #24]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000e100 	.word	0xe000e100
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003964:	b480      	push	{r7}
 8003966:	b089      	sub	sp, #36	; 0x24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f1c3 0307 	rsb	r3, r3, #7
 800397e:	2b04      	cmp	r3, #4
 8003980:	bf28      	it	cs
 8003982:	2304      	movcs	r3, #4
 8003984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3304      	adds	r3, #4
 800398a:	2b06      	cmp	r3, #6
 800398c:	d902      	bls.n	8003994 <NVIC_EncodePriority+0x30>
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3b03      	subs	r3, #3
 8003992:	e000      	b.n	8003996 <NVIC_EncodePriority+0x32>
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	f04f 32ff 	mov.w	r2, #4294967295
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	401a      	ands	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ac:	f04f 31ff 	mov.w	r1, #4294967295
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	43d9      	mvns	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039bc:	4313      	orrs	r3, r2
         );
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3724      	adds	r7, #36	; 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ff4c 	bl	8003870 <__NVIC_SetPriorityGrouping>
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039f2:	f7ff ff61 	bl	80038b8 <__NVIC_GetPriorityGrouping>
 80039f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	6978      	ldr	r0, [r7, #20]
 80039fe:	f7ff ffb1 	bl	8003964 <NVIC_EncodePriority>
 8003a02:	4602      	mov	r2, r0
 8003a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ff80 	bl	8003910 <__NVIC_SetPriority>
}
 8003a10:	bf00      	nop
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ff54 	bl	80038d4 <__NVIC_EnableIRQ>
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e08d      	b.n	8003b62 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <HAL_DMA_Init+0x138>)
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d80f      	bhi.n	8003a72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	4b45      	ldr	r3, [pc, #276]	; (8003b70 <HAL_DMA_Init+0x13c>)
 8003a5a:	4413      	add	r3, r2
 8003a5c:	4a45      	ldr	r2, [pc, #276]	; (8003b74 <HAL_DMA_Init+0x140>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	009a      	lsls	r2, r3, #2
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a42      	ldr	r2, [pc, #264]	; (8003b78 <HAL_DMA_Init+0x144>)
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a70:	e00e      	b.n	8003a90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	4b40      	ldr	r3, [pc, #256]	; (8003b7c <HAL_DMA_Init+0x148>)
 8003a7a:	4413      	add	r3, r2
 8003a7c:	4a3d      	ldr	r2, [pc, #244]	; (8003b74 <HAL_DMA_Init+0x140>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	009a      	lsls	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a3c      	ldr	r2, [pc, #240]	; (8003b80 <HAL_DMA_Init+0x14c>)
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003acc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fa16 	bl	8003f14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003af0:	d102      	bne.n	8003af8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b0c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d010      	beq.n	8003b38 <HAL_DMA_Init+0x104>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d80c      	bhi.n	8003b38 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa36 	bl	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	e008      	b.n	8003b4a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40020407 	.word	0x40020407
 8003b70:	bffdfff8 	.word	0xbffdfff8
 8003b74:	cccccccd 	.word	0xcccccccd
 8003b78:	40020000 	.word	0x40020000
 8003b7c:	bffdfbf8 	.word	0xbffdfbf8
 8003b80:	40020400 	.word	0x40020400

08003b84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_DMA_Start_IT+0x20>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e066      	b.n	8003c72 <HAL_DMA_Start_IT+0xee>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d155      	bne.n	8003c64 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f95a 	bl	8003e96 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 020e 	orr.w	r2, r2, #14
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e00f      	b.n	8003c1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0204 	bic.w	r2, r2, #4
 8003c0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 020a 	orr.w	r2, r2, #10
 8003c1a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c38:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c50:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e005      	b.n	8003c70 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d005      	beq.n	8003c9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2204      	movs	r2, #4
 8003c96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
 8003c9c:	e047      	b.n	8003d2e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 020e 	bic.w	r2, r2, #14
 8003cac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f003 021c 	and.w	r2, r3, #28
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2101      	movs	r1, #1
 8003cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cea:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00c      	beq.n	8003d0e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d0c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
    }
  }
  return status;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f003 031c 	and.w	r3, r3, #28
 8003d58:	2204      	movs	r2, #4
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d026      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x7a>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d021      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d107      	bne.n	8003d8c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0204 	bic.w	r2, r2, #4
 8003d8a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	f003 021c 	and.w	r2, r3, #28
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	2104      	movs	r1, #4
 8003d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d071      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003db0:	e06c      	b.n	8003e8c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f003 031c 	and.w	r3, r3, #28
 8003dba:	2202      	movs	r2, #2
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d02e      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xec>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d029      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10b      	bne.n	8003df6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 020a 	bic.w	r2, r2, #10
 8003dec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	f003 021c 	and.w	r2, r3, #28
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2102      	movs	r1, #2
 8003e04:	fa01 f202 	lsl.w	r2, r1, r2
 8003e08:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d038      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e22:	e033      	b.n	8003e8c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	f003 031c 	and.w	r3, r3, #28
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d02a      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x156>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d025      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 020e 	bic.w	r2, r2, #14
 8003e50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	f003 021c 	and.w	r2, r3, #28
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	2101      	movs	r1, #1
 8003e60:	fa01 f202 	lsl.w	r2, r1, r2
 8003e64:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
}
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003eac:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d004      	beq.n	8003ec0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ebe:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec4:	f003 021c 	and.w	r2, r3, #28
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d108      	bne.n	8003ef6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ef4:	e007      	b.n	8003f06 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	60da      	str	r2, [r3, #12]
}
 8003f06:	bf00      	nop
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d80a      	bhi.n	8003f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f34:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6493      	str	r3, [r2, #72]	; 0x48
 8003f3c:	e007      	b.n	8003f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	009a      	lsls	r2, r3, #2
 8003f46:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f48:	4413      	add	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	3b08      	subs	r3, #8
 8003f56:	4a0c      	ldr	r2, [pc, #48]	; (8003f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f64:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	40020407 	.word	0x40020407
 8003f84:	4002081c 	.word	0x4002081c
 8003f88:	cccccccd 	.word	0xcccccccd
 8003f8c:	40020880 	.word	0x40020880

08003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	461a      	mov	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a08      	ldr	r2, [pc, #32]	; (8003fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fb2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	1000823f 	.word	0x1000823f
 8003fd4:	40020940 	.word	0x40020940

08003fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fe6:	e166      	b.n	80042b6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2101      	movs	r1, #1
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8158 	beq.w	80042b0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d00b      	beq.n	8004020 <HAL_GPIO_Init+0x48>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d007      	beq.n	8004020 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004014:	2b11      	cmp	r3, #17
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b12      	cmp	r3, #18
 800401e:	d130      	bne.n	8004082 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	2203      	movs	r2, #3
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004056:	2201      	movs	r2, #1
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4013      	ands	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	f003 0201 	and.w	r2, r3, #1
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	2203      	movs	r2, #3
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0xea>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b12      	cmp	r3, #18
 80040c0:	d123      	bne.n	800410a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	08da      	lsrs	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3208      	adds	r2, #8
 80040ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	220f      	movs	r2, #15
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	08da      	lsrs	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3208      	adds	r2, #8
 8004104:	6939      	ldr	r1, [r7, #16]
 8004106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	2203      	movs	r2, #3
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0203 	and.w	r2, r3, #3
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80b2 	beq.w	80042b0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414c:	4b61      	ldr	r3, [pc, #388]	; (80042d4 <HAL_GPIO_Init+0x2fc>)
 800414e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004150:	4a60      	ldr	r2, [pc, #384]	; (80042d4 <HAL_GPIO_Init+0x2fc>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6613      	str	r3, [r2, #96]	; 0x60
 8004158:	4b5e      	ldr	r3, [pc, #376]	; (80042d4 <HAL_GPIO_Init+0x2fc>)
 800415a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004164:	4a5c      	ldr	r2, [pc, #368]	; (80042d8 <HAL_GPIO_Init+0x300>)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	3302      	adds	r3, #2
 800416c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004170:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	220f      	movs	r2, #15
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800418e:	d02b      	beq.n	80041e8 <HAL_GPIO_Init+0x210>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a52      	ldr	r2, [pc, #328]	; (80042dc <HAL_GPIO_Init+0x304>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d025      	beq.n	80041e4 <HAL_GPIO_Init+0x20c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a51      	ldr	r2, [pc, #324]	; (80042e0 <HAL_GPIO_Init+0x308>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d01f      	beq.n	80041e0 <HAL_GPIO_Init+0x208>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a50      	ldr	r2, [pc, #320]	; (80042e4 <HAL_GPIO_Init+0x30c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d019      	beq.n	80041dc <HAL_GPIO_Init+0x204>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a4f      	ldr	r2, [pc, #316]	; (80042e8 <HAL_GPIO_Init+0x310>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d013      	beq.n	80041d8 <HAL_GPIO_Init+0x200>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a4e      	ldr	r2, [pc, #312]	; (80042ec <HAL_GPIO_Init+0x314>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00d      	beq.n	80041d4 <HAL_GPIO_Init+0x1fc>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a4d      	ldr	r2, [pc, #308]	; (80042f0 <HAL_GPIO_Init+0x318>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <HAL_GPIO_Init+0x1f8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a4c      	ldr	r2, [pc, #304]	; (80042f4 <HAL_GPIO_Init+0x31c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d101      	bne.n	80041cc <HAL_GPIO_Init+0x1f4>
 80041c8:	2307      	movs	r3, #7
 80041ca:	e00e      	b.n	80041ea <HAL_GPIO_Init+0x212>
 80041cc:	2308      	movs	r3, #8
 80041ce:	e00c      	b.n	80041ea <HAL_GPIO_Init+0x212>
 80041d0:	2306      	movs	r3, #6
 80041d2:	e00a      	b.n	80041ea <HAL_GPIO_Init+0x212>
 80041d4:	2305      	movs	r3, #5
 80041d6:	e008      	b.n	80041ea <HAL_GPIO_Init+0x212>
 80041d8:	2304      	movs	r3, #4
 80041da:	e006      	b.n	80041ea <HAL_GPIO_Init+0x212>
 80041dc:	2303      	movs	r3, #3
 80041de:	e004      	b.n	80041ea <HAL_GPIO_Init+0x212>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e002      	b.n	80041ea <HAL_GPIO_Init+0x212>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_GPIO_Init+0x212>
 80041e8:	2300      	movs	r3, #0
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	f002 0203 	and.w	r2, r2, #3
 80041f0:	0092      	lsls	r2, r2, #2
 80041f2:	4093      	lsls	r3, r2
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041fa:	4937      	ldr	r1, [pc, #220]	; (80042d8 <HAL_GPIO_Init+0x300>)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	089b      	lsrs	r3, r3, #2
 8004200:	3302      	adds	r3, #2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004208:	4b3b      	ldr	r3, [pc, #236]	; (80042f8 <HAL_GPIO_Init+0x320>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	43db      	mvns	r3, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800422c:	4a32      	ldr	r2, [pc, #200]	; (80042f8 <HAL_GPIO_Init+0x320>)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004232:	4b31      	ldr	r3, [pc, #196]	; (80042f8 <HAL_GPIO_Init+0x320>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004256:	4a28      	ldr	r2, [pc, #160]	; (80042f8 <HAL_GPIO_Init+0x320>)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800425c:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <HAL_GPIO_Init+0x320>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	43db      	mvns	r3, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004280:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <HAL_GPIO_Init+0x320>)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004286:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <HAL_GPIO_Init+0x320>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	43db      	mvns	r3, r3
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4013      	ands	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042aa:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <HAL_GPIO_Init+0x320>)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3301      	adds	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f47f ae91 	bne.w	8003fe8 <HAL_GPIO_Init+0x10>
  }
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40010000 	.word	0x40010000
 80042dc:	48000400 	.word	0x48000400
 80042e0:	48000800 	.word	0x48000800
 80042e4:	48000c00 	.word	0x48000c00
 80042e8:	48001000 	.word	0x48001000
 80042ec:	48001400 	.word	0x48001400
 80042f0:	48001800 	.word	0x48001800
 80042f4:	48001c00 	.word	0x48001c00
 80042f8:	40010400 	.word	0x40010400

080042fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	807b      	strh	r3, [r7, #2]
 8004308:	4613      	mov	r3, r2
 800430a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800430c:	787b      	ldrb	r3, [r7, #1]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004312:	887a      	ldrh	r2, [r7, #2]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004318:	e002      	b.n	8004320 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800431a:	887a      	ldrh	r2, [r7, #2]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4013      	ands	r3, r2
 8004344:	041a      	lsls	r2, r3, #16
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	43d9      	mvns	r1, r3
 800434a:	887b      	ldrh	r3, [r7, #2]
 800434c:	400b      	ands	r3, r1
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	619a      	str	r2, [r3, #24]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004364:	4b0d      	ldr	r3, [pc, #52]	; (800439c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004370:	d102      	bne.n	8004378 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004376:	e00b      	b.n	8004390 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_PWREx_GetVoltageRange+0x3c>)
 800437a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800437e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004386:	d102      	bne.n	800438e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800438c:	e000      	b.n	8004390 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800438e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40007000 	.word	0x40007000

080043a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d141      	bne.n	8004432 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ae:	4b4b      	ldr	r3, [pc, #300]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d131      	bne.n	8004420 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043bc:	4b47      	ldr	r3, [pc, #284]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c2:	4a46      	ldr	r2, [pc, #280]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043cc:	4b43      	ldr	r3, [pc, #268]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043d4:	4a41      	ldr	r2, [pc, #260]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80043dc:	4b40      	ldr	r3, [pc, #256]	; (80044e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2232      	movs	r2, #50	; 0x32
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	4a3f      	ldr	r2, [pc, #252]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	0c9b      	lsrs	r3, r3, #18
 80043ee:	3301      	adds	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f2:	e002      	b.n	80043fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fa:	4b38      	ldr	r3, [pc, #224]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d102      	bne.n	800440e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f2      	bne.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800440e:	4b33      	ldr	r3, [pc, #204]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441a:	d158      	bne.n	80044ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e057      	b.n	80044d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004420:	4b2e      	ldr	r3, [pc, #184]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004426:	4a2d      	ldr	r2, [pc, #180]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800442c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004430:	e04d      	b.n	80044ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004438:	d141      	bne.n	80044be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800443a:	4b28      	ldr	r3, [pc, #160]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004446:	d131      	bne.n	80044ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004448:	4b24      	ldr	r3, [pc, #144]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800444a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800444e:	4a23      	ldr	r2, [pc, #140]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004454:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004458:	4b20      	ldr	r3, [pc, #128]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004460:	4a1e      	ldr	r2, [pc, #120]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004466:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004468:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2232      	movs	r2, #50	; 0x32
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	0c9b      	lsrs	r3, r3, #18
 800447a:	3301      	adds	r3, #1
 800447c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800447e:	e002      	b.n	8004486 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3b01      	subs	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004492:	d102      	bne.n	800449a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f2      	bne.n	8004480 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a6:	d112      	bne.n	80044ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e011      	b.n	80044d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b2:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044bc:	e007      	b.n	80044ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044be:	4b07      	ldr	r3, [pc, #28]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044c6:	4a05      	ldr	r2, [pc, #20]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044cc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40007000 	.word	0x40007000
 80044e0:	20000000 	.word	0x20000000
 80044e4:	431bde83 	.word	0x431bde83

080044e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_PWREx_EnableVddIO2+0x1c>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4a04      	ldr	r2, [pc, #16]	; (8004504 <HAL_PWREx_EnableVddIO2+0x1c>)
 80044f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044f6:	6053      	str	r3, [r2, #4]
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40007000 	.word	0x40007000

08004508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f000 bc16 	b.w	8004d48 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451c:	4ba0      	ldr	r3, [pc, #640]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004526:	4b9e      	ldr	r3, [pc, #632]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80e4 	beq.w	8004706 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <HAL_RCC_OscConfig+0x4c>
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b0c      	cmp	r3, #12
 8004548:	f040 808b 	bne.w	8004662 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b01      	cmp	r3, #1
 8004550:	f040 8087 	bne.w	8004662 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004554:	4b92      	ldr	r3, [pc, #584]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_OscConfig+0x64>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e3ed      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1a      	ldr	r2, [r3, #32]
 8004570:	4b8b      	ldr	r3, [pc, #556]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d004      	beq.n	8004586 <HAL_RCC_OscConfig+0x7e>
 800457c:	4b88      	ldr	r3, [pc, #544]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004584:	e005      	b.n	8004592 <HAL_RCC_OscConfig+0x8a>
 8004586:	4b86      	ldr	r3, [pc, #536]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004592:	4293      	cmp	r3, r2
 8004594:	d223      	bcs.n	80045de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fdf8 	bl	8005190 <RCC_SetFlashLatencyFromMSIRange>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e3ce      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045aa:	4b7d      	ldr	r3, [pc, #500]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a7c      	ldr	r2, [pc, #496]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80045b0:	f043 0308 	orr.w	r3, r3, #8
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	4b7a      	ldr	r3, [pc, #488]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4977      	ldr	r1, [pc, #476]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045c8:	4b75      	ldr	r3, [pc, #468]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	4972      	ldr	r1, [pc, #456]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
 80045dc:	e025      	b.n	800462a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045de:	4b70      	ldr	r3, [pc, #448]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6f      	ldr	r2, [pc, #444]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80045e4:	f043 0308 	orr.w	r3, r3, #8
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4b6d      	ldr	r3, [pc, #436]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	496a      	ldr	r1, [pc, #424]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045fc:	4b68      	ldr	r3, [pc, #416]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	021b      	lsls	r3, r3, #8
 800460a:	4965      	ldr	r1, [pc, #404]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fdb8 	bl	8005190 <RCC_SetFlashLatencyFromMSIRange>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e38e      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800462a:	f000 fcbf 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 800462e:	4601      	mov	r1, r0
 8004630:	4b5b      	ldr	r3, [pc, #364]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	4a5a      	ldr	r2, [pc, #360]	; (80047a4 <HAL_RCC_OscConfig+0x29c>)
 800463c:	5cd3      	ldrb	r3, [r2, r3]
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	fa21 f303 	lsr.w	r3, r1, r3
 8004646:	4a58      	ldr	r2, [pc, #352]	; (80047a8 <HAL_RCC_OscConfig+0x2a0>)
 8004648:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800464a:	4b58      	ldr	r3, [pc, #352]	; (80047ac <HAL_RCC_OscConfig+0x2a4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd ff1c 	bl	800248c <HAL_InitTick>
 8004654:	4603      	mov	r3, r0
 8004656:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d052      	beq.n	8004704 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	e372      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d032      	beq.n	80046d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800466a:	4b4d      	ldr	r3, [pc, #308]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a4c      	ldr	r2, [pc, #304]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004676:	f7fe f855 	bl	8002724 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800467e:	f7fe f851 	bl	8002724 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e35b      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004690:	4b43      	ldr	r3, [pc, #268]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800469c:	4b40      	ldr	r3, [pc, #256]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a3f      	ldr	r2, [pc, #252]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80046a2:	f043 0308 	orr.w	r3, r3, #8
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	493a      	ldr	r1, [pc, #232]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ba:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	4935      	ldr	r1, [pc, #212]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
 80046ce:	e01a      	b.n	8004706 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046d0:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a32      	ldr	r2, [pc, #200]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046dc:	f7fe f822 	bl	8002724 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046e4:	f7fe f81e 	bl	8002724 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e328      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046f6:	4b2a      	ldr	r3, [pc, #168]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x1dc>
 8004702:	e000      	b.n	8004706 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004704:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d073      	beq.n	80047fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d005      	beq.n	8004724 <HAL_RCC_OscConfig+0x21c>
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d10e      	bne.n	800473c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d10b      	bne.n	800473c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004724:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d063      	beq.n	80047f8 <HAL_RCC_OscConfig+0x2f0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d15f      	bne.n	80047f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e305      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004744:	d106      	bne.n	8004754 <HAL_RCC_OscConfig+0x24c>
 8004746:	4b16      	ldr	r3, [pc, #88]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 800474c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e01d      	b.n	8004790 <HAL_RCC_OscConfig+0x288>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800475c:	d10c      	bne.n	8004778 <HAL_RCC_OscConfig+0x270>
 800475e:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a0f      	ldr	r2, [pc, #60]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a0c      	ldr	r2, [pc, #48]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e00b      	b.n	8004790 <HAL_RCC_OscConfig+0x288>
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 800477e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a05      	ldr	r2, [pc, #20]	; (80047a0 <HAL_RCC_OscConfig+0x298>)
 800478a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fd ffc4 	bl	8002724 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800479e:	e010      	b.n	80047c2 <HAL_RCC_OscConfig+0x2ba>
 80047a0:	40021000 	.word	0x40021000
 80047a4:	0800c3a8 	.word	0x0800c3a8
 80047a8:	20000000 	.word	0x20000000
 80047ac:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b0:	f7fd ffb8 	bl	8002724 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	; 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e2c2      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c2:	4baf      	ldr	r3, [pc, #700]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x2a8>
 80047ce:	e014      	b.n	80047fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d0:	f7fd ffa8 	bl	8002724 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fd ffa4 	bl	8002724 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e2ae      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ea:	4ba5      	ldr	r3, [pc, #660]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x2d0>
 80047f6:	e000      	b.n	80047fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d060      	beq.n	80048c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b04      	cmp	r3, #4
 800480a:	d005      	beq.n	8004818 <HAL_RCC_OscConfig+0x310>
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b0c      	cmp	r3, #12
 8004810:	d119      	bne.n	8004846 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d116      	bne.n	8004846 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004818:	4b99      	ldr	r3, [pc, #612]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_RCC_OscConfig+0x328>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e28b      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004830:	4b93      	ldr	r3, [pc, #588]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	061b      	lsls	r3, r3, #24
 800483e:	4990      	ldr	r1, [pc, #576]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004844:	e040      	b.n	80048c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d023      	beq.n	8004896 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484e:	4b8c      	ldr	r3, [pc, #560]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a8b      	ldr	r2, [pc, #556]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485a:	f7fd ff63 	bl	8002724 <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004862:	f7fd ff5f 	bl	8002724 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e269      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004874:	4b82      	ldr	r3, [pc, #520]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0f0      	beq.n	8004862 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004880:	4b7f      	ldr	r3, [pc, #508]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	061b      	lsls	r3, r3, #24
 800488e:	497c      	ldr	r1, [pc, #496]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004890:	4313      	orrs	r3, r2
 8004892:	604b      	str	r3, [r1, #4]
 8004894:	e018      	b.n	80048c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004896:	4b7a      	ldr	r3, [pc, #488]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a79      	ldr	r2, [pc, #484]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 800489c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fd ff3f 	bl	8002724 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048aa:	f7fd ff3b 	bl	8002724 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e245      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048bc:	4b70      	ldr	r3, [pc, #448]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f0      	bne.n	80048aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d03c      	beq.n	800494e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01c      	beq.n	8004916 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048dc:	4b68      	ldr	r3, [pc, #416]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 80048de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e2:	4a67      	ldr	r2, [pc, #412]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ec:	f7fd ff1a 	bl	8002724 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f4:	f7fd ff16 	bl	8002724 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e220      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004906:	4b5e      	ldr	r3, [pc, #376]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0ef      	beq.n	80048f4 <HAL_RCC_OscConfig+0x3ec>
 8004914:	e01b      	b.n	800494e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004916:	4b5a      	ldr	r3, [pc, #360]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491c:	4a58      	ldr	r2, [pc, #352]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 800491e:	f023 0301 	bic.w	r3, r3, #1
 8004922:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004926:	f7fd fefd 	bl	8002724 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492e:	f7fd fef9 	bl	8002724 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e203      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004940:	4b4f      	ldr	r3, [pc, #316]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1ef      	bne.n	800492e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80a6 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495c:	2300      	movs	r3, #0
 800495e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004960:	4b47      	ldr	r3, [pc, #284]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10d      	bne.n	8004988 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496c:	4b44      	ldr	r3, [pc, #272]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	4a43      	ldr	r2, [pc, #268]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004976:	6593      	str	r3, [r2, #88]	; 0x58
 8004978:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004984:	2301      	movs	r3, #1
 8004986:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004988:	4b3e      	ldr	r3, [pc, #248]	; (8004a84 <HAL_RCC_OscConfig+0x57c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d118      	bne.n	80049c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004994:	4b3b      	ldr	r3, [pc, #236]	; (8004a84 <HAL_RCC_OscConfig+0x57c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a3a      	ldr	r2, [pc, #232]	; (8004a84 <HAL_RCC_OscConfig+0x57c>)
 800499a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a0:	f7fd fec0 	bl	8002724 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a8:	f7fd febc 	bl	8002724 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e1c6      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ba:	4b32      	ldr	r3, [pc, #200]	; (8004a84 <HAL_RCC_OscConfig+0x57c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d108      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4d8>
 80049ce:	4b2c      	ldr	r3, [pc, #176]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	4a2a      	ldr	r2, [pc, #168]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049de:	e024      	b.n	8004a2a <HAL_RCC_OscConfig+0x522>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b05      	cmp	r3, #5
 80049e6:	d110      	bne.n	8004a0a <HAL_RCC_OscConfig+0x502>
 80049e8:	4b25      	ldr	r3, [pc, #148]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	4a24      	ldr	r2, [pc, #144]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 80049f0:	f043 0304 	orr.w	r3, r3, #4
 80049f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049f8:	4b21      	ldr	r3, [pc, #132]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	4a20      	ldr	r2, [pc, #128]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a08:	e00f      	b.n	8004a2a <HAL_RCC_OscConfig+0x522>
 8004a0a:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a1a:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004a22:	f023 0304 	bic.w	r3, r3, #4
 8004a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d016      	beq.n	8004a60 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a32:	f7fd fe77 	bl	8002724 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a38:	e00a      	b.n	8004a50 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fd fe73 	bl	8002724 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e17b      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_RCC_OscConfig+0x578>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0ed      	beq.n	8004a3a <HAL_RCC_OscConfig+0x532>
 8004a5e:	e01a      	b.n	8004a96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a60:	f7fd fe60 	bl	8002724 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a66:	e00f      	b.n	8004a88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a68:	f7fd fe5c 	bl	8002724 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d906      	bls.n	8004a88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e164      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
 8004a7e:	bf00      	nop
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a88:	4ba8      	ldr	r3, [pc, #672]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e8      	bne.n	8004a68 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a96:	7ffb      	ldrb	r3, [r7, #31]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9c:	4ba3      	ldr	r3, [pc, #652]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	4aa2      	ldr	r2, [pc, #648]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d03c      	beq.n	8004b2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01c      	beq.n	8004af6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004abc:	4b9b      	ldr	r3, [pc, #620]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ac2:	4a9a      	ldr	r2, [pc, #616]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fd fe2a 	bl	8002724 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ad4:	f7fd fe26 	bl	8002724 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e130      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ae6:	4b91      	ldr	r3, [pc, #580]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0ef      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x5cc>
 8004af4:	e01b      	b.n	8004b2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004af6:	4b8d      	ldr	r3, [pc, #564]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004afc:	4a8b      	ldr	r2, [pc, #556]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b06:	f7fd fe0d 	bl	8002724 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b0e:	f7fd fe09 	bl	8002724 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e113      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b20:	4b82      	ldr	r3, [pc, #520]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1ef      	bne.n	8004b0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 8107 	beq.w	8004d46 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	f040 80cb 	bne.w	8004cd8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b42:	4b7a      	ldr	r3, [pc, #488]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f003 0203 	and.w	r2, r3, #3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d12c      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	3b01      	subs	r3, #1
 8004b62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d123      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d11b      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d113      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b92:	085b      	lsrs	r3, r3, #1
 8004b94:	3b01      	subs	r3, #1
 8004b96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d109      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	085b      	lsrs	r3, r3, #1
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d06d      	beq.n	8004c8c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d068      	beq.n	8004c88 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bb6:	4b5d      	ldr	r3, [pc, #372]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d105      	bne.n	8004bce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004bc2:	4b5a      	ldr	r3, [pc, #360]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e0ba      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bd2:	4b56      	ldr	r3, [pc, #344]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a55      	ldr	r2, [pc, #340]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bdc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bde:	f7fd fda1 	bl	8002724 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be6:	f7fd fd9d 	bl	8002724 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e0a7      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf8:	4b4c      	ldr	r3, [pc, #304]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f0      	bne.n	8004be6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c04:	4b49      	ldr	r3, [pc, #292]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	4b49      	ldr	r3, [pc, #292]	; (8004d30 <HAL_RCC_OscConfig+0x828>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c14:	3a01      	subs	r2, #1
 8004c16:	0112      	lsls	r2, r2, #4
 8004c18:	4311      	orrs	r1, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c1e:	0212      	lsls	r2, r2, #8
 8004c20:	4311      	orrs	r1, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c26:	0852      	lsrs	r2, r2, #1
 8004c28:	3a01      	subs	r2, #1
 8004c2a:	0552      	lsls	r2, r2, #21
 8004c2c:	4311      	orrs	r1, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c32:	0852      	lsrs	r2, r2, #1
 8004c34:	3a01      	subs	r2, #1
 8004c36:	0652      	lsls	r2, r2, #25
 8004c38:	4311      	orrs	r1, r2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c3e:	06d2      	lsls	r2, r2, #27
 8004c40:	430a      	orrs	r2, r1
 8004c42:	493a      	ldr	r1, [pc, #232]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c48:	4b38      	ldr	r3, [pc, #224]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a37      	ldr	r2, [pc, #220]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c54:	4b35      	ldr	r3, [pc, #212]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4a34      	ldr	r2, [pc, #208]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c60:	f7fd fd60 	bl	8002724 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fd fd5c 	bl	8002724 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e066      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c7a:	4b2c      	ldr	r3, [pc, #176]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c86:	e05e      	b.n	8004d46 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e05d      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c8c:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d156      	bne.n	8004d46 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c98:	4b24      	ldr	r3, [pc, #144]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a23      	ldr	r2, [pc, #140]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ca4:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a20      	ldr	r2, [pc, #128]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cb0:	f7fd fd38 	bl	8002724 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb8:	f7fd fd34 	bl	8002724 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e03e      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cca:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x7b0>
 8004cd6:	e036      	b.n	8004d46 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d031      	beq.n	8004d42 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cde:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a12      	ldr	r2, [pc, #72]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004ce4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004cea:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004cfc:	f023 0303 	bic.w	r3, r3, #3
 8004d00:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d02:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <HAL_RCC_OscConfig+0x824>)
 8004d08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d10:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7fd fd07 	bl	8002724 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d18:	e00c      	b.n	8004d34 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d1a:	f7fd fd03 	bl	8002724 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d905      	bls.n	8004d34 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e00d      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d34:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <HAL_RCC_OscConfig+0x848>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1ec      	bne.n	8004d1a <HAL_RCC_OscConfig+0x812>
 8004d40:	e001      	b.n	8004d46 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40021000 	.word	0x40021000

08004d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e10f      	b.n	8004f8c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d6c:	4b89      	ldr	r3, [pc, #548]	; (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d910      	bls.n	8004d9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7a:	4b86      	ldr	r3, [pc, #536]	; (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f023 020f 	bic.w	r2, r3, #15
 8004d82:	4984      	ldr	r1, [pc, #528]	; (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8a:	4b82      	ldr	r3, [pc, #520]	; (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d001      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0f7      	b.n	8004f8c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8089 	beq.w	8004ebc <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d133      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db2:	4b79      	ldr	r3, [pc, #484]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e0e4      	b.n	8004f8c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004dc2:	f000 fa3f 	bl	8005244 <RCC_GetSysClockFreqFromPLLSource>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	4b74      	ldr	r3, [pc, #464]	; (8004f9c <HAL_RCC_ClockConfig+0x248>)
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d955      	bls.n	8004e7a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004dce:	4b72      	ldr	r3, [pc, #456]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dda:	4b6f      	ldr	r3, [pc, #444]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004de2:	4a6d      	ldr	r2, [pc, #436]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	e044      	b.n	8004e7a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d03e      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x126>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d13a      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e04:	4b64      	ldr	r3, [pc, #400]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e0c:	4a62      	ldr	r2, [pc, #392]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e02f      	b.n	8004e7a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d107      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e22:	4b5d      	ldr	r3, [pc, #372]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d115      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e0ac      	b.n	8004f8c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d107      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e3a:	4b57      	ldr	r3, [pc, #348]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e0a0      	b.n	8004f8c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e4a:	4b53      	ldr	r3, [pc, #332]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e098      	b.n	8004f8c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004e5a:	f000 f8a7 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	4b4e      	ldr	r3, [pc, #312]	; (8004f9c <HAL_RCC_ClockConfig+0x248>)
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d909      	bls.n	8004e7a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e66:	4b4c      	ldr	r3, [pc, #304]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6e:	4a4a      	ldr	r2, [pc, #296]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e7a:	4b47      	ldr	r3, [pc, #284]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 0203 	bic.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4944      	ldr	r1, [pc, #272]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8c:	f7fd fc4a 	bl	8002724 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e94:	f7fd fc46 	bl	8002724 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e070      	b.n	8004f8c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eaa:	4b3b      	ldr	r3, [pc, #236]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 020c 	and.w	r2, r3, #12
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d1eb      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec8:	4b33      	ldr	r3, [pc, #204]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4930      	ldr	r1, [pc, #192]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]
 8004eda:	e008      	b.n	8004eee <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b80      	cmp	r3, #128	; 0x80
 8004ee0:	d105      	bne.n	8004eee <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ee2:	4b2d      	ldr	r3, [pc, #180]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	4a2c      	ldr	r2, [pc, #176]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004ee8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eec:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eee:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d210      	bcs.n	8004f1e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efc:	4b25      	ldr	r3, [pc, #148]	; (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f023 020f 	bic.w	r2, r3, #15
 8004f04:	4923      	ldr	r1, [pc, #140]	; (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0c:	4b21      	ldr	r3, [pc, #132]	; (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d001      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e036      	b.n	8004f8c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f2a:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	4918      	ldr	r1, [pc, #96]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f48:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4910      	ldr	r1, [pc, #64]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f5c:	f000 f826 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 8004f60:	4601      	mov	r1, r0
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	4a0c      	ldr	r2, [pc, #48]	; (8004fa0 <HAL_RCC_ClockConfig+0x24c>)
 8004f6e:	5cd3      	ldrb	r3, [r2, r3]
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	fa21 f303 	lsr.w	r3, r1, r3
 8004f78:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <HAL_RCC_ClockConfig+0x250>)
 8004f7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <HAL_RCC_ClockConfig+0x254>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fd fa83 	bl	800248c <HAL_InitTick>
 8004f86:	4603      	mov	r3, r0
 8004f88:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40022000 	.word	0x40022000
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	04c4b400 	.word	0x04c4b400
 8004fa0:	0800c3a8 	.word	0x0800c3a8
 8004fa4:	20000000 	.word	0x20000000
 8004fa8:	20000004 	.word	0x20000004

08004fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fba:	4b3d      	ldr	r3, [pc, #244]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fc4:	4b3a      	ldr	r3, [pc, #232]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b0c      	cmp	r3, #12
 8004fd8:	d121      	bne.n	800501e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d11e      	bne.n	800501e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fe0:	4b33      	ldr	r3, [pc, #204]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d107      	bne.n	8004ffc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fec:	4b30      	ldr	r3, [pc, #192]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	e005      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ffc:	4b2c      	ldr	r3, [pc, #176]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005008:	4a2a      	ldr	r2, [pc, #168]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005010:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10d      	bne.n	8005034 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800501c:	e00a      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d102      	bne.n	800502a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005024:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005026:	61bb      	str	r3, [r7, #24]
 8005028:	e004      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b08      	cmp	r3, #8
 800502e:	d101      	bne.n	8005034 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005030:	4b21      	ldr	r3, [pc, #132]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005032:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b0c      	cmp	r3, #12
 8005038:	d133      	bne.n	80050a2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800503a:	4b1d      	ldr	r3, [pc, #116]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d002      	beq.n	8005050 <HAL_RCC_GetSysClockFreq+0xa4>
 800504a:	2b03      	cmp	r3, #3
 800504c:	d003      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0xaa>
 800504e:	e005      	b.n	800505c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005050:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005052:	617b      	str	r3, [r7, #20]
      break;
 8005054:	e005      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005056:	4b18      	ldr	r3, [pc, #96]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005058:	617b      	str	r3, [r7, #20]
      break;
 800505a:	e002      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	617b      	str	r3, [r7, #20]
      break;
 8005060:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005062:	4b13      	ldr	r3, [pc, #76]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	3301      	adds	r3, #1
 800506e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005070:	4b0f      	ldr	r3, [pc, #60]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	fb02 f203 	mul.w	r2, r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	fbb2 f3f3 	udiv	r3, r2, r3
 8005086:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	0e5b      	lsrs	r3, r3, #25
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	3301      	adds	r3, #1
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050a2:	69bb      	ldr	r3, [r7, #24]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3724      	adds	r7, #36	; 0x24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	40021000 	.word	0x40021000
 80050b4:	0800c3c0 	.word	0x0800c3c0
 80050b8:	00f42400 	.word	0x00f42400

080050bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c0:	4b03      	ldr	r3, [pc, #12]	; (80050d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000000 	.word	0x20000000

080050d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050d8:	f7ff fff0 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 80050dc:	4601      	mov	r1, r0
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	0a1b      	lsrs	r3, r3, #8
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	4a04      	ldr	r2, [pc, #16]	; (80050fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ea:	5cd3      	ldrb	r3, [r2, r3]
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40021000 	.word	0x40021000
 80050fc:	0800c3b8 	.word	0x0800c3b8

08005100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005104:	f7ff ffda 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 8005108:	4601      	mov	r1, r0
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0adb      	lsrs	r3, r3, #11
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4a04      	ldr	r2, [pc, #16]	; (8005128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005116:	5cd3      	ldrb	r3, [r2, r3]
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40021000 	.word	0x40021000
 8005128:	0800c3b8 	.word	0x0800c3b8

0800512c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	220f      	movs	r2, #15
 800513a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0203 	and.w	r2, r3, #3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005148:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005154:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	08db      	lsrs	r3, r3, #3
 8005166:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <HAL_RCC_GetClockConfig+0x60>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 020f 	and.w	r2, r3, #15
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000
 800518c:	40022000 	.word	0x40022000

08005190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005198:	2300      	movs	r3, #0
 800519a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800519c:	4b27      	ldr	r3, [pc, #156]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051a8:	f7ff f8da 	bl	8004360 <HAL_PWREx_GetVoltageRange>
 80051ac:	6178      	str	r0, [r7, #20]
 80051ae:	e014      	b.n	80051da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b0:	4b22      	ldr	r3, [pc, #136]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	4a21      	ldr	r2, [pc, #132]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ba:	6593      	str	r3, [r2, #88]	; 0x58
 80051bc:	4b1f      	ldr	r3, [pc, #124]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051c8:	f7ff f8ca 	bl	8004360 <HAL_PWREx_GetVoltageRange>
 80051cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051ce:	4b1b      	ldr	r3, [pc, #108]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d2:	4a1a      	ldr	r2, [pc, #104]	; (800523c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e0:	d10b      	bne.n	80051fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b80      	cmp	r3, #128	; 0x80
 80051e6:	d913      	bls.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2ba0      	cmp	r3, #160	; 0xa0
 80051ec:	d902      	bls.n	80051f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051ee:	2302      	movs	r3, #2
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	e00d      	b.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051f4:	2301      	movs	r3, #1
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	e00a      	b.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b7f      	cmp	r3, #127	; 0x7f
 80051fe:	d902      	bls.n	8005206 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005200:	2302      	movs	r3, #2
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	e004      	b.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b70      	cmp	r3, #112	; 0x70
 800520a:	d101      	bne.n	8005210 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800520c:	2301      	movs	r3, #1
 800520e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 020f 	bic.w	r2, r3, #15
 8005218:	4909      	ldr	r1, [pc, #36]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	429a      	cmp	r2, r3
 800522c:	d001      	beq.n	8005232 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000
 8005240:	40022000 	.word	0x40022000

08005244 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800524e:	4b2d      	ldr	r3, [pc, #180]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b01      	cmp	r3, #1
 8005258:	d118      	bne.n	800528c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800525a:	4b2a      	ldr	r3, [pc, #168]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d107      	bne.n	8005276 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005266:	4b27      	ldr	r3, [pc, #156]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e005      	b.n	8005282 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005276:	4b23      	ldr	r3, [pc, #140]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	091b      	lsrs	r3, r3, #4
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005282:	4a21      	ldr	r2, [pc, #132]	; (8005308 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d002      	beq.n	80052a2 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800529c:	2b03      	cmp	r3, #3
 800529e:	d003      	beq.n	80052a8 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80052a0:	e005      	b.n	80052ae <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80052a2:	4b1a      	ldr	r3, [pc, #104]	; (800530c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80052a4:	613b      	str	r3, [r7, #16]
    break;
 80052a6:	e005      	b.n	80052b4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80052a8:	4b18      	ldr	r3, [pc, #96]	; (800530c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80052aa:	613b      	str	r3, [r7, #16]
    break;
 80052ac:	e002      	b.n	80052b4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	613b      	str	r3, [r7, #16]
    break;
 80052b2:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052b4:	4b13      	ldr	r3, [pc, #76]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	091b      	lsrs	r3, r3, #4
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	3301      	adds	r3, #1
 80052c0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	fb02 f203 	mul.w	r2, r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052da:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	0e5b      	lsrs	r3, r3, #25
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	3301      	adds	r3, #1
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80052f4:	683b      	ldr	r3, [r7, #0]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40021000 	.word	0x40021000
 8005308:	0800c3c0 	.word	0x0800c3c0
 800530c:	00f42400 	.word	0x00f42400

08005310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005318:	2300      	movs	r3, #0
 800531a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800531c:	2300      	movs	r3, #0
 800531e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005328:	2b00      	cmp	r3, #0
 800532a:	d03d      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d00b      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005334:	2b40      	cmp	r3, #64	; 0x40
 8005336:	d804      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00e      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800533c:	2b20      	cmp	r3, #32
 800533e:	d015      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005340:	e01d      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005342:	2b60      	cmp	r3, #96	; 0x60
 8005344:	d01e      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005346:	2b80      	cmp	r3, #128	; 0x80
 8005348:	d01c      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800534a:	e018      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800534c:	4b86      	ldr	r3, [pc, #536]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a85      	ldr	r2, [pc, #532]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005356:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005358:	e015      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3304      	adds	r3, #4
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fb5d 	bl	8005a20 <RCCEx_PLLSAI1_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800536a:	e00c      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3320      	adds	r3, #32
 8005370:	2100      	movs	r1, #0
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fc44 	bl	8005c00 <RCCEx_PLLSAI2_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800537c:	e003      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	74fb      	strb	r3, [r7, #19]
      break;
 8005382:	e000      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8005384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005386:	7cfb      	ldrb	r3, [r7, #19]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10b      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800538c:	4b76      	ldr	r3, [pc, #472]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800538e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005392:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539a:	4973      	ldr	r1, [pc, #460]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80053a2:	e001      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d042      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053bc:	d00f      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xce>
 80053be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c2:	d805      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d011      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80053c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053cc:	d017      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xee>
 80053ce:	e01f      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80053d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053d4:	d01f      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053da:	d01c      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053dc:	e018      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053de:	4b62      	ldr	r3, [pc, #392]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	4a61      	ldr	r2, [pc, #388]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053ea:	e015      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fb14 	bl	8005a20 <RCCEx_PLLSAI1_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053fc:	e00c      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3320      	adds	r3, #32
 8005402:	2100      	movs	r1, #0
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fbfb 	bl	8005c00 <RCCEx_PLLSAI2_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800540e:	e003      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	74fb      	strb	r3, [r7, #19]
      break;
 8005414:	e000      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8005416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005418:	7cfb      	ldrb	r3, [r7, #19]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800541e:	4b52      	ldr	r3, [pc, #328]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542c:	494e      	ldr	r1, [pc, #312]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005434:	e001      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005436:	7cfb      	ldrb	r3, [r7, #19]
 8005438:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 809f 	beq.w	8005586 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005448:	2300      	movs	r3, #0
 800544a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800544c:	4b46      	ldr	r3, [pc, #280]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800544e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800545c:	2300      	movs	r3, #0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00d      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005462:	4b41      	ldr	r3, [pc, #260]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005466:	4a40      	ldr	r2, [pc, #256]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800546c:	6593      	str	r3, [r2, #88]	; 0x58
 800546e:	4b3e      	ldr	r3, [pc, #248]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005476:	60bb      	str	r3, [r7, #8]
 8005478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800547a:	2301      	movs	r3, #1
 800547c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800547e:	4b3b      	ldr	r3, [pc, #236]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a3a      	ldr	r2, [pc, #232]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005488:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800548a:	f7fd f94b 	bl	8002724 <HAL_GetTick>
 800548e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005490:	e009      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005492:	f7fd f947 	bl	8002724 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d902      	bls.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	74fb      	strb	r3, [r7, #19]
        break;
 80054a4:	e005      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054a6:	4b31      	ldr	r3, [pc, #196]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0ef      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80054b2:	7cfb      	ldrb	r3, [r7, #19]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d15b      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054b8:	4b2b      	ldr	r3, [pc, #172]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01f      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d019      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054d6:	4b24      	ldr	r3, [pc, #144]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054e2:	4b21      	ldr	r3, [pc, #132]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e8:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054f2:	4b1d      	ldr	r3, [pc, #116]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f8:	4a1b      	ldr	r2, [pc, #108]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005502:	4a19      	ldr	r2, [pc, #100]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d016      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fd f906 	bl	8002724 <HAL_GetTick>
 8005518:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800551a:	e00b      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551c:	f7fd f902 	bl	8002724 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d902      	bls.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	74fb      	strb	r3, [r7, #19]
            break;
 8005532:	e006      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0ec      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8005542:	7cfb      	ldrb	r3, [r7, #19]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10c      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005548:	4b07      	ldr	r3, [pc, #28]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005558:	4903      	ldr	r1, [pc, #12]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005560:	e008      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005562:	7cfb      	ldrb	r3, [r7, #19]
 8005564:	74bb      	strb	r3, [r7, #18]
 8005566:	e005      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005568:	40021000 	.word	0x40021000
 800556c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005574:	7c7b      	ldrb	r3, [r7, #17]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d105      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800557a:	4ba0      	ldr	r3, [pc, #640]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557e:	4a9f      	ldr	r2, [pc, #636]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005584:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005592:	4b9a      	ldr	r3, [pc, #616]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005598:	f023 0203 	bic.w	r2, r3, #3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a0:	4996      	ldr	r1, [pc, #600]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055b4:	4b91      	ldr	r3, [pc, #580]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ba:	f023 020c 	bic.w	r2, r3, #12
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	498e      	ldr	r1, [pc, #568]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055d6:	4b89      	ldr	r3, [pc, #548]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e4:	4985      	ldr	r1, [pc, #532]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055f8:	4b80      	ldr	r3, [pc, #512]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005606:	497d      	ldr	r1, [pc, #500]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800561a:	4b78      	ldr	r3, [pc, #480]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005628:	4974      	ldr	r1, [pc, #464]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800563c:	4b6f      	ldr	r3, [pc, #444]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005642:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564a:	496c      	ldr	r1, [pc, #432]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800565e:	4b67      	ldr	r3, [pc, #412]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005664:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800566c:	4963      	ldr	r1, [pc, #396]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005680:	4b5e      	ldr	r3, [pc, #376]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005686:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800568e:	495b      	ldr	r1, [pc, #364]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056a2:	4b56      	ldr	r3, [pc, #344]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b0:	4952      	ldr	r1, [pc, #328]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056c4:	4b4d      	ldr	r3, [pc, #308]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d2:	494a      	ldr	r1, [pc, #296]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056e6:	4b45      	ldr	r3, [pc, #276]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f4:	4941      	ldr	r1, [pc, #260]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005708:	4b3c      	ldr	r3, [pc, #240]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800570a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800570e:	f023 0203 	bic.w	r2, r3, #3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005716:	4939      	ldr	r1, [pc, #228]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d028      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800572a:	4b34      	ldr	r3, [pc, #208]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005730:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005738:	4930      	ldr	r1, [pc, #192]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005748:	d106      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800574a:	4b2c      	ldr	r3, [pc, #176]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	4a2b      	ldr	r2, [pc, #172]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005754:	60d3      	str	r3, [r2, #12]
 8005756:	e011      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005760:	d10c      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3304      	adds	r3, #4
 8005766:	2101      	movs	r1, #1
 8005768:	4618      	mov	r0, r3
 800576a:	f000 f959 	bl	8005a20 <RCCEx_PLLSAI1_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005772:	7cfb      	ldrb	r3, [r7, #19]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8005778:	7cfb      	ldrb	r3, [r7, #19]
 800577a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d04d      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800578c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005790:	d108      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005792:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005794:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005798:	4a18      	ldr	r2, [pc, #96]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800579e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80057a2:	e012      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80057a4:	4b15      	ldr	r3, [pc, #84]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057aa:	4a14      	ldr	r2, [pc, #80]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80057b4:	4b11      	ldr	r3, [pc, #68]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057c2:	490e      	ldr	r1, [pc, #56]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057d2:	d106      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d4:	4b09      	ldr	r3, [pc, #36]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	4a08      	ldr	r2, [pc, #32]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057de:	60d3      	str	r3, [r2, #12]
 80057e0:	e020      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ea:	d109      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057ec:	4b03      	ldr	r3, [pc, #12]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4a02      	ldr	r2, [pc, #8]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f6:	60d3      	str	r3, [r2, #12]
 80057f8:	e014      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80057fa:	bf00      	nop
 80057fc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005808:	d10c      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	3304      	adds	r3, #4
 800580e:	2101      	movs	r1, #1
 8005810:	4618      	mov	r0, r3
 8005812:	f000 f905 	bl	8005a20 <RCCEx_PLLSAI1_Config>
 8005816:	4603      	mov	r3, r0
 8005818:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800581a:	7cfb      	ldrb	r3, [r7, #19]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005820:	7cfb      	ldrb	r3, [r7, #19]
 8005822:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d028      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005830:	4b7a      	ldr	r3, [pc, #488]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583e:	4977      	ldr	r1, [pc, #476]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800584a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800584e:	d106      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005850:	4b72      	ldr	r3, [pc, #456]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4a71      	ldr	r2, [pc, #452]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800585a:	60d3      	str	r3, [r2, #12]
 800585c:	e011      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005862:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005866:	d10c      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3304      	adds	r3, #4
 800586c:	2101      	movs	r1, #1
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f8d6 	bl	8005a20 <RCCEx_PLLSAI1_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005878:	7cfb      	ldrb	r3, [r7, #19]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800587e:	7cfb      	ldrb	r3, [r7, #19]
 8005880:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d01e      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800588e:	4b63      	ldr	r3, [pc, #396]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005894:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800589e:	495f      	ldr	r1, [pc, #380]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058b0:	d10c      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3304      	adds	r3, #4
 80058b6:	2102      	movs	r1, #2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f8b1 	bl	8005a20 <RCCEx_PLLSAI1_Config>
 80058be:	4603      	mov	r3, r0
 80058c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058c2:	7cfb      	ldrb	r3, [r7, #19]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058d8:	4b50      	ldr	r3, [pc, #320]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80058da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058de:	f023 0204 	bic.w	r2, r3, #4
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e8:	494c      	ldr	r1, [pc, #304]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00b      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80058fc:	4b47      	ldr	r3, [pc, #284]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80058fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005902:	f023 0218 	bic.w	r2, r3, #24
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	4943      	ldr	r1, [pc, #268]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d035      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005920:	4b3e      	ldr	r3, [pc, #248]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a3d      	ldr	r2, [pc, #244]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800592a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800592c:	f7fc fefa 	bl	8002724 <HAL_GetTick>
 8005930:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005932:	e009      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005934:	f7fc fef6 	bl	8002724 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d902      	bls.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	74fb      	strb	r3, [r7, #19]
        break;
 8005946:	e005      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005948:	4b34      	ldr	r3, [pc, #208]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1ef      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8005954:	7cfb      	ldrb	r3, [r7, #19]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d113      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800595a:	4b30      	ldr	r3, [pc, #192]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800595c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800596a:	492c      	ldr	r1, [pc, #176]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3320      	adds	r3, #32
 8005976:	2102      	movs	r1, #2
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f941 	bl	8005c00 <RCCEx_PLLSAI2_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005982:	7cfb      	ldrb	r3, [r7, #19]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 8005988:	7cfb      	ldrb	r3, [r7, #19]
 800598a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01e      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005998:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800599a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800599e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a8:	491c      	ldr	r1, [pc, #112]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ba:	d10c      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3320      	adds	r3, #32
 80059c0:	2101      	movs	r1, #1
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f91c 	bl	8005c00 <RCCEx_PLLSAI2_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 80059d2:	7cfb      	ldrb	r3, [r7, #19]
 80059d4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d017      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80059e2:	4b0e      	ldr	r3, [pc, #56]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80059e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f2:	490a      	ldr	r1, [pc, #40]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a04:	d105      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a10:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a12:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40021000 	.word	0x40021000

08005a20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a2e:	4b70      	ldr	r3, [pc, #448]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00e      	beq.n	8005a58 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a3a:	4b6d      	ldr	r3, [pc, #436]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0203 	and.w	r2, r3, #3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d103      	bne.n	8005a52 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d13f      	bne.n	8005ad2 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	73fb      	strb	r3, [r7, #15]
 8005a56:	e03c      	b.n	8005ad2 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d00c      	beq.n	8005a7a <RCCEx_PLLSAI1_Config+0x5a>
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d013      	beq.n	8005a8c <RCCEx_PLLSAI1_Config+0x6c>
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d120      	bne.n	8005aaa <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a68:	4b61      	ldr	r3, [pc, #388]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d11d      	bne.n	8005ab0 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a78:	e01a      	b.n	8005ab0 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a7a:	4b5d      	ldr	r3, [pc, #372]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d116      	bne.n	8005ab4 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a8a:	e013      	b.n	8005ab4 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a8c:	4b58      	ldr	r3, [pc, #352]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10f      	bne.n	8005ab8 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a98:	4b55      	ldr	r3, [pc, #340]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005aa8:	e006      	b.n	8005ab8 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	73fb      	strb	r3, [r7, #15]
      break;
 8005aae:	e004      	b.n	8005aba <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005ab0:	bf00      	nop
 8005ab2:	e002      	b.n	8005aba <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005ab4:	bf00      	nop
 8005ab6:	e000      	b.n	8005aba <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005ab8:	bf00      	nop
    }

    if(status == HAL_OK)
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d108      	bne.n	8005ad2 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005ac0:	4b4b      	ldr	r3, [pc, #300]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f023 0203 	bic.w	r2, r3, #3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4948      	ldr	r1, [pc, #288]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f040 8086 	bne.w	8005be6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ada:	4b45      	ldr	r3, [pc, #276]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a44      	ldr	r2, [pc, #272]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005ae0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae6:	f7fc fe1d 	bl	8002724 <HAL_GetTick>
 8005aea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005aec:	e009      	b.n	8005b02 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aee:	f7fc fe19 	bl	8002724 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d902      	bls.n	8005b02 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	73fb      	strb	r3, [r7, #15]
        break;
 8005b00:	e005      	b.n	8005b0e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b02:	4b3b      	ldr	r3, [pc, #236]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1ef      	bne.n	8005aee <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d168      	bne.n	8005be6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d113      	bne.n	8005b42 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b1a:	4b35      	ldr	r3, [pc, #212]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	4b35      	ldr	r3, [pc, #212]	; (8005bf4 <RCCEx_PLLSAI1_Config+0x1d4>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6892      	ldr	r2, [r2, #8]
 8005b26:	0211      	lsls	r1, r2, #8
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	68d2      	ldr	r2, [r2, #12]
 8005b2c:	06d2      	lsls	r2, r2, #27
 8005b2e:	4311      	orrs	r1, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6852      	ldr	r2, [r2, #4]
 8005b34:	3a01      	subs	r2, #1
 8005b36:	0112      	lsls	r2, r2, #4
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	492d      	ldr	r1, [pc, #180]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	610b      	str	r3, [r1, #16]
 8005b40:	e02d      	b.n	8005b9e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d115      	bne.n	8005b74 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b48:	4b29      	ldr	r3, [pc, #164]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	4b2a      	ldr	r3, [pc, #168]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6892      	ldr	r2, [r2, #8]
 8005b54:	0211      	lsls	r1, r2, #8
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6912      	ldr	r2, [r2, #16]
 8005b5a:	0852      	lsrs	r2, r2, #1
 8005b5c:	3a01      	subs	r2, #1
 8005b5e:	0552      	lsls	r2, r2, #21
 8005b60:	4311      	orrs	r1, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6852      	ldr	r2, [r2, #4]
 8005b66:	3a01      	subs	r2, #1
 8005b68:	0112      	lsls	r2, r2, #4
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	4920      	ldr	r1, [pc, #128]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	610b      	str	r3, [r1, #16]
 8005b72:	e014      	b.n	8005b9e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b74:	4b1e      	ldr	r3, [pc, #120]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	4b20      	ldr	r3, [pc, #128]	; (8005bfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6892      	ldr	r2, [r2, #8]
 8005b80:	0211      	lsls	r1, r2, #8
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6952      	ldr	r2, [r2, #20]
 8005b86:	0852      	lsrs	r2, r2, #1
 8005b88:	3a01      	subs	r2, #1
 8005b8a:	0652      	lsls	r2, r2, #25
 8005b8c:	4311      	orrs	r1, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6852      	ldr	r2, [r2, #4]
 8005b92:	3a01      	subs	r2, #1
 8005b94:	0112      	lsls	r2, r2, #4
 8005b96:	430a      	orrs	r2, r1
 8005b98:	4915      	ldr	r1, [pc, #84]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b9e:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a13      	ldr	r2, [pc, #76]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005ba4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ba8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005baa:	f7fc fdbb 	bl	8002724 <HAL_GetTick>
 8005bae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bb0:	e009      	b.n	8005bc6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bb2:	f7fc fdb7 	bl	8002724 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d902      	bls.n	8005bc6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	73fb      	strb	r3, [r7, #15]
          break;
 8005bc4:	e005      	b.n	8005bd2 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0ef      	beq.n	8005bb2 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005bd8:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	4903      	ldr	r1, [pc, #12]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	07ff800f 	.word	0x07ff800f
 8005bf8:	ff9f800f 	.word	0xff9f800f
 8005bfc:	f9ff800f 	.word	0xf9ff800f

08005c00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c0e:	4b70      	ldr	r3, [pc, #448]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00e      	beq.n	8005c38 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c1a:	4b6d      	ldr	r3, [pc, #436]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0203 	and.w	r2, r3, #3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d103      	bne.n	8005c32 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
       ||
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d13f      	bne.n	8005cb2 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	73fb      	strb	r3, [r7, #15]
 8005c36:	e03c      	b.n	8005cb2 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d00c      	beq.n	8005c5a <RCCEx_PLLSAI2_Config+0x5a>
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d013      	beq.n	8005c6c <RCCEx_PLLSAI2_Config+0x6c>
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d120      	bne.n	8005c8a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c48:	4b61      	ldr	r3, [pc, #388]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11d      	bne.n	8005c90 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c58:	e01a      	b.n	8005c90 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c5a:	4b5d      	ldr	r3, [pc, #372]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d116      	bne.n	8005c94 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c6a:	e013      	b.n	8005c94 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c6c:	4b58      	ldr	r3, [pc, #352]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10f      	bne.n	8005c98 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c78:	4b55      	ldr	r3, [pc, #340]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d109      	bne.n	8005c98 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c88:	e006      	b.n	8005c98 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c8e:	e004      	b.n	8005c9a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005c90:	bf00      	nop
 8005c92:	e002      	b.n	8005c9a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005c94:	bf00      	nop
 8005c96:	e000      	b.n	8005c9a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005c98:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d108      	bne.n	8005cb2 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005ca0:	4b4b      	ldr	r3, [pc, #300]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f023 0203 	bic.w	r2, r3, #3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4948      	ldr	r1, [pc, #288]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f040 8086 	bne.w	8005dc6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005cba:	4b45      	ldr	r3, [pc, #276]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a44      	ldr	r2, [pc, #272]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc6:	f7fc fd2d 	bl	8002724 <HAL_GetTick>
 8005cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ccc:	e009      	b.n	8005ce2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cce:	f7fc fd29 	bl	8002724 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d902      	bls.n	8005ce2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	73fb      	strb	r3, [r7, #15]
        break;
 8005ce0:	e005      	b.n	8005cee <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ce2:	4b3b      	ldr	r3, [pc, #236]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1ef      	bne.n	8005cce <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d168      	bne.n	8005dc6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d113      	bne.n	8005d22 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cfa:	4b35      	ldr	r3, [pc, #212]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	4b35      	ldr	r3, [pc, #212]	; (8005dd4 <RCCEx_PLLSAI2_Config+0x1d4>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6892      	ldr	r2, [r2, #8]
 8005d06:	0211      	lsls	r1, r2, #8
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	68d2      	ldr	r2, [r2, #12]
 8005d0c:	06d2      	lsls	r2, r2, #27
 8005d0e:	4311      	orrs	r1, r2
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6852      	ldr	r2, [r2, #4]
 8005d14:	3a01      	subs	r2, #1
 8005d16:	0112      	lsls	r2, r2, #4
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	492d      	ldr	r1, [pc, #180]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	614b      	str	r3, [r1, #20]
 8005d20:	e02d      	b.n	8005d7e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d115      	bne.n	8005d54 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d28:	4b29      	ldr	r3, [pc, #164]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d2a:	695a      	ldr	r2, [r3, #20]
 8005d2c:	4b2a      	ldr	r3, [pc, #168]	; (8005dd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6892      	ldr	r2, [r2, #8]
 8005d34:	0211      	lsls	r1, r2, #8
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6912      	ldr	r2, [r2, #16]
 8005d3a:	0852      	lsrs	r2, r2, #1
 8005d3c:	3a01      	subs	r2, #1
 8005d3e:	0552      	lsls	r2, r2, #21
 8005d40:	4311      	orrs	r1, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6852      	ldr	r2, [r2, #4]
 8005d46:	3a01      	subs	r2, #1
 8005d48:	0112      	lsls	r2, r2, #4
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	4920      	ldr	r1, [pc, #128]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	614b      	str	r3, [r1, #20]
 8005d52:	e014      	b.n	8005d7e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d54:	4b1e      	ldr	r3, [pc, #120]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d56:	695a      	ldr	r2, [r3, #20]
 8005d58:	4b20      	ldr	r3, [pc, #128]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1dc>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6892      	ldr	r2, [r2, #8]
 8005d60:	0211      	lsls	r1, r2, #8
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6952      	ldr	r2, [r2, #20]
 8005d66:	0852      	lsrs	r2, r2, #1
 8005d68:	3a01      	subs	r2, #1
 8005d6a:	0652      	lsls	r2, r2, #25
 8005d6c:	4311      	orrs	r1, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6852      	ldr	r2, [r2, #4]
 8005d72:	3a01      	subs	r2, #1
 8005d74:	0112      	lsls	r2, r2, #4
 8005d76:	430a      	orrs	r2, r1
 8005d78:	4915      	ldr	r1, [pc, #84]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d7e:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a13      	ldr	r2, [pc, #76]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d8a:	f7fc fccb 	bl	8002724 <HAL_GetTick>
 8005d8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d90:	e009      	b.n	8005da6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d92:	f7fc fcc7 	bl	8002724 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d902      	bls.n	8005da6 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	73fb      	strb	r3, [r7, #15]
          break;
 8005da4:	e005      	b.n	8005db2 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005da6:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0ef      	beq.n	8005d92 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005dba:	695a      	ldr	r2, [r3, #20]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	4903      	ldr	r1, [pc, #12]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	07ff800f 	.word	0x07ff800f
 8005dd8:	ff9f800f 	.word	0xff9f800f
 8005ddc:	f9ff800f 	.word	0xf9ff800f

08005de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e049      	b.n	8005e86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f841 	bl	8005e8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	f000 f9f8 	bl	8006214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d001      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e04f      	b.n	8005f5c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a23      	ldr	r2, [pc, #140]	; (8005f68 <HAL_TIM_Base_Start_IT+0xc4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01d      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x76>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee6:	d018      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x76>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1f      	ldr	r2, [pc, #124]	; (8005f6c <HAL_TIM_Base_Start_IT+0xc8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x76>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1e      	ldr	r2, [pc, #120]	; (8005f70 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00e      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x76>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1c      	ldr	r2, [pc, #112]	; (8005f74 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x76>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1b      	ldr	r2, [pc, #108]	; (8005f78 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x76>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a19      	ldr	r2, [pc, #100]	; (8005f7c <HAL_TIM_Base_Start_IT+0xd8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d115      	bne.n	8005f46 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	4b17      	ldr	r3, [pc, #92]	; (8005f80 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f22:	4013      	ands	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b06      	cmp	r3, #6
 8005f2a:	d015      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0xb4>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f32:	d011      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f44:	e008      	b.n	8005f58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f042 0201 	orr.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	e000      	b.n	8005f5a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	40012c00 	.word	0x40012c00
 8005f6c:	40000400 	.word	0x40000400
 8005f70:	40000800 	.word	0x40000800
 8005f74:	40000c00 	.word	0x40000c00
 8005f78:	40013400 	.word	0x40013400
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	00010007 	.word	0x00010007

08005f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d122      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d11b      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0202 	mvn.w	r2, #2
 8005fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f905 	bl	80061d6 <HAL_TIM_IC_CaptureCallback>
 8005fcc:	e005      	b.n	8005fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f8f7 	bl	80061c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f908 	bl	80061ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d122      	bne.n	8006034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d11b      	bne.n	8006034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0204 	mvn.w	r2, #4
 8006004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2202      	movs	r2, #2
 800600a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8db 	bl	80061d6 <HAL_TIM_IC_CaptureCallback>
 8006020:	e005      	b.n	800602e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f8cd 	bl	80061c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f8de 	bl	80061ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b08      	cmp	r3, #8
 8006040:	d122      	bne.n	8006088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b08      	cmp	r3, #8
 800604e:	d11b      	bne.n	8006088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0208 	mvn.w	r2, #8
 8006058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2204      	movs	r2, #4
 800605e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f003 0303 	and.w	r3, r3, #3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f8b1 	bl	80061d6 <HAL_TIM_IC_CaptureCallback>
 8006074:	e005      	b.n	8006082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f8a3 	bl	80061c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f8b4 	bl	80061ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	2b10      	cmp	r3, #16
 8006094:	d122      	bne.n	80060dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d11b      	bne.n	80060dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0210 	mvn.w	r2, #16
 80060ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2208      	movs	r2, #8
 80060b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f887 	bl	80061d6 <HAL_TIM_IC_CaptureCallback>
 80060c8:	e005      	b.n	80060d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f879 	bl	80061c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f88a 	bl	80061ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d10e      	bne.n	8006108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d107      	bne.n	8006108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f06f 0201 	mvn.w	r2, #1
 8006100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fc f8be 	bl	8002284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d10e      	bne.n	8006134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006120:	2b80      	cmp	r3, #128	; 0x80
 8006122:	d107      	bne.n	8006134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800612c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f914 	bl	800635c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006142:	d10e      	bne.n	8006162 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614e:	2b80      	cmp	r3, #128	; 0x80
 8006150:	d107      	bne.n	8006162 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800615a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f907 	bl	8006370 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d10e      	bne.n	800618e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617a:	2b40      	cmp	r3, #64	; 0x40
 800617c:	d107      	bne.n	800618e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f838 	bl	80061fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b20      	cmp	r3, #32
 800619a:	d10e      	bne.n	80061ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d107      	bne.n	80061ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f06f 0220 	mvn.w	r2, #32
 80061b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f8c7 	bl	8006348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
	...

08006214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a40      	ldr	r2, [pc, #256]	; (8006328 <TIM_Base_SetConfig+0x114>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d013      	beq.n	8006254 <TIM_Base_SetConfig+0x40>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006232:	d00f      	beq.n	8006254 <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a3d      	ldr	r2, [pc, #244]	; (800632c <TIM_Base_SetConfig+0x118>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00b      	beq.n	8006254 <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a3c      	ldr	r2, [pc, #240]	; (8006330 <TIM_Base_SetConfig+0x11c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d007      	beq.n	8006254 <TIM_Base_SetConfig+0x40>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a3b      	ldr	r2, [pc, #236]	; (8006334 <TIM_Base_SetConfig+0x120>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_Base_SetConfig+0x40>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a3a      	ldr	r2, [pc, #232]	; (8006338 <TIM_Base_SetConfig+0x124>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d108      	bne.n	8006266 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a2f      	ldr	r2, [pc, #188]	; (8006328 <TIM_Base_SetConfig+0x114>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d01f      	beq.n	80062ae <TIM_Base_SetConfig+0x9a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006274:	d01b      	beq.n	80062ae <TIM_Base_SetConfig+0x9a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2c      	ldr	r2, [pc, #176]	; (800632c <TIM_Base_SetConfig+0x118>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d017      	beq.n	80062ae <TIM_Base_SetConfig+0x9a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a2b      	ldr	r2, [pc, #172]	; (8006330 <TIM_Base_SetConfig+0x11c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d013      	beq.n	80062ae <TIM_Base_SetConfig+0x9a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a2a      	ldr	r2, [pc, #168]	; (8006334 <TIM_Base_SetConfig+0x120>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00f      	beq.n	80062ae <TIM_Base_SetConfig+0x9a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a29      	ldr	r2, [pc, #164]	; (8006338 <TIM_Base_SetConfig+0x124>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00b      	beq.n	80062ae <TIM_Base_SetConfig+0x9a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a28      	ldr	r2, [pc, #160]	; (800633c <TIM_Base_SetConfig+0x128>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d007      	beq.n	80062ae <TIM_Base_SetConfig+0x9a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a27      	ldr	r2, [pc, #156]	; (8006340 <TIM_Base_SetConfig+0x12c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d003      	beq.n	80062ae <TIM_Base_SetConfig+0x9a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a26      	ldr	r2, [pc, #152]	; (8006344 <TIM_Base_SetConfig+0x130>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d108      	bne.n	80062c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a10      	ldr	r2, [pc, #64]	; (8006328 <TIM_Base_SetConfig+0x114>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00f      	beq.n	800630c <TIM_Base_SetConfig+0xf8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a12      	ldr	r2, [pc, #72]	; (8006338 <TIM_Base_SetConfig+0x124>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00b      	beq.n	800630c <TIM_Base_SetConfig+0xf8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a11      	ldr	r2, [pc, #68]	; (800633c <TIM_Base_SetConfig+0x128>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d007      	beq.n	800630c <TIM_Base_SetConfig+0xf8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a10      	ldr	r2, [pc, #64]	; (8006340 <TIM_Base_SetConfig+0x12c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_Base_SetConfig+0xf8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a0f      	ldr	r2, [pc, #60]	; (8006344 <TIM_Base_SetConfig+0x130>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d103      	bne.n	8006314 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	615a      	str	r2, [r3, #20]
}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	40012c00 	.word	0x40012c00
 800632c:	40000400 	.word	0x40000400
 8006330:	40000800 	.word	0x40000800
 8006334:	40000c00 	.word	0x40000c00
 8006338:	40013400 	.word	0x40013400
 800633c:	40014000 	.word	0x40014000
 8006340:	40014400 	.word	0x40014400
 8006344:	40014800 	.word	0x40014800

08006348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e042      	b.n	800641c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800639c:	2b00      	cmp	r3, #0
 800639e:	d106      	bne.n	80063ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7fc f823 	bl	80023f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2224      	movs	r2, #36	; 0x24
 80063b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fa58 	bl	800687c <UART_SetConfig>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e022      	b.n	800641c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fd1e 	bl	8006e20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006402:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fda5 	bl	8006f64 <UART_CheckIdleState>
 800641a:	4603      	mov	r3, r0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af02      	add	r7, sp, #8
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800643a:	2b20      	cmp	r3, #32
 800643c:	f040 8084 	bne.w	8006548 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_UART_Transmit+0x28>
 8006446:	88fb      	ldrh	r3, [r7, #6]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e07c      	b.n	800654a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_UART_Transmit+0x3a>
 800645a:	2302      	movs	r3, #2
 800645c:	e075      	b.n	800654a <HAL_UART_Transmit+0x126>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2221      	movs	r2, #33	; 0x21
 8006472:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006476:	f7fc f955 	bl	8002724 <HAL_GetTick>
 800647a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	88fa      	ldrh	r2, [r7, #6]
 8006480:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006494:	d108      	bne.n	80064a8 <HAL_UART_Transmit+0x84>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e003      	b.n	80064b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80064b8:	e02d      	b.n	8006516 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2200      	movs	r2, #0
 80064c2:	2180      	movs	r1, #128	; 0x80
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fd95 	bl	8006ff4 <UART_WaitOnFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e03a      	b.n	800654a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	881a      	ldrh	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e6:	b292      	uxth	r2, r2
 80064e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	3302      	adds	r3, #2
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	e008      	b.n	8006504 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	b292      	uxth	r2, r2
 80064fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	3301      	adds	r3, #1
 8006502:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1cb      	bne.n	80064ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2200      	movs	r2, #0
 800652a:	2140      	movs	r1, #64	; 0x40
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 fd61 	bl	8006ff4 <UART_WaitOnFlagUntilTimeout>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e006      	b.n	800654a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e000      	b.n	800654a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006548:	2302      	movs	r3, #2
  }
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	f640 030f 	movw	r3, #2063	; 0x80f
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d118      	bne.n	80065b6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	d013      	beq.n	80065b6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	d104      	bne.n	80065a2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8145 	beq.w	8006836 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
      }
      return;
 80065b4:	e13f      	b.n	8006836 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80e8 	beq.w	800678e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4ba1      	ldr	r3, [pc, #644]	; (8006848 <HAL_UART_IRQHandler+0x2f4>)
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d105      	bne.n	80065d4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	4ba0      	ldr	r3, [pc, #640]	; (800684c <HAL_UART_IRQHandler+0x2f8>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 80dd 	beq.w	800678e <HAL_UART_IRQHandler+0x23a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d010      	beq.n	8006600 <HAL_UART_IRQHandler+0xac>
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2201      	movs	r2, #1
 80065ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f6:	f043 0201 	orr.w	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d010      	beq.n	800662c <HAL_UART_IRQHandler+0xd8>
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00b      	beq.n	800662c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2202      	movs	r2, #2
 800661a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	f043 0204 	orr.w	r2, r3, #4
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	d010      	beq.n	8006658 <HAL_UART_IRQHandler+0x104>
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2204      	movs	r2, #4
 8006646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664e:	f043 0202 	orr.w	r2, r3, #2
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d015      	beq.n	800668e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4b76      	ldr	r3, [pc, #472]	; (8006848 <HAL_UART_IRQHandler+0x2f4>)
 8006670:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00b      	beq.n	800668e <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2208      	movs	r2, #8
 800667c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006684:	f043 0208 	orr.w	r2, r3, #8
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006694:	2b00      	cmp	r3, #0
 8006696:	d011      	beq.n	80066bc <HAL_UART_IRQHandler+0x168>
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00c      	beq.n	80066bc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b2:	f043 0220 	orr.w	r2, r3, #32
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80b9 	beq.w	800683a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d011      	beq.n	80066f6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d004      	beq.n	8006716 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006712:	2b00      	cmp	r3, #0
 8006714:	d031      	beq.n	800677a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fcec 	bl	80070f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b40      	cmp	r3, #64	; 0x40
 8006728:	d123      	bne.n	8006772 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006738:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800673e:	2b00      	cmp	r3, #0
 8006740:	d013      	beq.n	800676a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006746:	4a42      	ldr	r2, [pc, #264]	; (8006850 <HAL_UART_IRQHandler+0x2fc>)
 8006748:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800674e:	4618      	mov	r0, r3
 8006750:	f7fd fa93 	bl	8003c7a <HAL_DMA_Abort_IT>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d017      	beq.n	800678a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006768:	e00f      	b.n	800678a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f87c 	bl	8006868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006770:	e00b      	b.n	800678a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f878 	bl	8006868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006778:	e007      	b.n	800678a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f874 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006788:	e057      	b.n	800683a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678a:	bf00      	nop
    return;
 800678c:	e055      	b.n	800683a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00d      	beq.n	80067b4 <HAL_UART_IRQHandler+0x260>
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d008      	beq.n	80067b4 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fcf4 	bl	800719a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067b2:	e045      	b.n	8006840 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d012      	beq.n	80067e4 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d008      	beq.n	80067e4 <HAL_UART_IRQHandler+0x290>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d031      	beq.n	800683e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
    }
    return;
 80067e2:	e02c      	b.n	800683e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d008      	beq.n	8006800 <HAL_UART_IRQHandler+0x2ac>
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fcb4 	bl	8007166 <UART_EndTransmit_IT>
    return;
 80067fe:	e01f      	b.n	8006840 <HAL_UART_IRQHandler+0x2ec>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d008      	beq.n	800681c <HAL_UART_IRQHandler+0x2c8>
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fcd4 	bl	80071c2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800681a:	e011      	b.n	8006840 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00c      	beq.n	8006840 <HAL_UART_IRQHandler+0x2ec>
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	da09      	bge.n	8006840 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fcbe 	bl	80071ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006832:	bf00      	nop
 8006834:	e004      	b.n	8006840 <HAL_UART_IRQHandler+0x2ec>
      return;
 8006836:	bf00      	nop
 8006838:	e002      	b.n	8006840 <HAL_UART_IRQHandler+0x2ec>
    return;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <HAL_UART_IRQHandler+0x2ec>
    return;
 800683e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	10000001 	.word	0x10000001
 800684c:	04000120 	.word	0x04000120
 8006850:	0800713b 	.word	0x0800713b

08006854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800687c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006880:	b088      	sub	sp, #32
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	4313      	orrs	r3, r2
 80068a0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a6:	69fa      	ldr	r2, [r7, #28]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4bb1      	ldr	r3, [pc, #708]	; (8006b78 <UART_SetConfig+0x2fc>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6812      	ldr	r2, [r2, #0]
 80068ba:	69f9      	ldr	r1, [r7, #28]
 80068bc:	430b      	orrs	r3, r1
 80068be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4aa6      	ldr	r2, [pc, #664]	; (8006b7c <UART_SetConfig+0x300>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d004      	beq.n	80068f0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80068fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6812      	ldr	r2, [r2, #0]
 8006902:	69f9      	ldr	r1, [r7, #28]
 8006904:	430b      	orrs	r3, r1
 8006906:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690e:	f023 010f 	bic.w	r1, r3, #15
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a97      	ldr	r2, [pc, #604]	; (8006b80 <UART_SetConfig+0x304>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d121      	bne.n	800696c <UART_SetConfig+0xf0>
 8006928:	4b96      	ldr	r3, [pc, #600]	; (8006b84 <UART_SetConfig+0x308>)
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692e:	f003 0303 	and.w	r3, r3, #3
 8006932:	2b03      	cmp	r3, #3
 8006934:	d816      	bhi.n	8006964 <UART_SetConfig+0xe8>
 8006936:	a201      	add	r2, pc, #4	; (adr r2, 800693c <UART_SetConfig+0xc0>)
 8006938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693c:	0800694d 	.word	0x0800694d
 8006940:	08006959 	.word	0x08006959
 8006944:	08006953 	.word	0x08006953
 8006948:	0800695f 	.word	0x0800695f
 800694c:	2301      	movs	r3, #1
 800694e:	76fb      	strb	r3, [r7, #27]
 8006950:	e0e8      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006952:	2302      	movs	r3, #2
 8006954:	76fb      	strb	r3, [r7, #27]
 8006956:	e0e5      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006958:	2304      	movs	r3, #4
 800695a:	76fb      	strb	r3, [r7, #27]
 800695c:	e0e2      	b.n	8006b24 <UART_SetConfig+0x2a8>
 800695e:	2308      	movs	r3, #8
 8006960:	76fb      	strb	r3, [r7, #27]
 8006962:	e0df      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006964:	2310      	movs	r3, #16
 8006966:	76fb      	strb	r3, [r7, #27]
 8006968:	bf00      	nop
 800696a:	e0db      	b.n	8006b24 <UART_SetConfig+0x2a8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a85      	ldr	r2, [pc, #532]	; (8006b88 <UART_SetConfig+0x30c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d134      	bne.n	80069e0 <UART_SetConfig+0x164>
 8006976:	4b83      	ldr	r3, [pc, #524]	; (8006b84 <UART_SetConfig+0x308>)
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697c:	f003 030c 	and.w	r3, r3, #12
 8006980:	2b0c      	cmp	r3, #12
 8006982:	d829      	bhi.n	80069d8 <UART_SetConfig+0x15c>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x110>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069c1 	.word	0x080069c1
 8006990:	080069d9 	.word	0x080069d9
 8006994:	080069d9 	.word	0x080069d9
 8006998:	080069d9 	.word	0x080069d9
 800699c:	080069cd 	.word	0x080069cd
 80069a0:	080069d9 	.word	0x080069d9
 80069a4:	080069d9 	.word	0x080069d9
 80069a8:	080069d9 	.word	0x080069d9
 80069ac:	080069c7 	.word	0x080069c7
 80069b0:	080069d9 	.word	0x080069d9
 80069b4:	080069d9 	.word	0x080069d9
 80069b8:	080069d9 	.word	0x080069d9
 80069bc:	080069d3 	.word	0x080069d3
 80069c0:	2300      	movs	r3, #0
 80069c2:	76fb      	strb	r3, [r7, #27]
 80069c4:	e0ae      	b.n	8006b24 <UART_SetConfig+0x2a8>
 80069c6:	2302      	movs	r3, #2
 80069c8:	76fb      	strb	r3, [r7, #27]
 80069ca:	e0ab      	b.n	8006b24 <UART_SetConfig+0x2a8>
 80069cc:	2304      	movs	r3, #4
 80069ce:	76fb      	strb	r3, [r7, #27]
 80069d0:	e0a8      	b.n	8006b24 <UART_SetConfig+0x2a8>
 80069d2:	2308      	movs	r3, #8
 80069d4:	76fb      	strb	r3, [r7, #27]
 80069d6:	e0a5      	b.n	8006b24 <UART_SetConfig+0x2a8>
 80069d8:	2310      	movs	r3, #16
 80069da:	76fb      	strb	r3, [r7, #27]
 80069dc:	bf00      	nop
 80069de:	e0a1      	b.n	8006b24 <UART_SetConfig+0x2a8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a69      	ldr	r2, [pc, #420]	; (8006b8c <UART_SetConfig+0x310>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d120      	bne.n	8006a2c <UART_SetConfig+0x1b0>
 80069ea:	4b66      	ldr	r3, [pc, #408]	; (8006b84 <UART_SetConfig+0x308>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069f4:	2b10      	cmp	r3, #16
 80069f6:	d00f      	beq.n	8006a18 <UART_SetConfig+0x19c>
 80069f8:	2b10      	cmp	r3, #16
 80069fa:	d802      	bhi.n	8006a02 <UART_SetConfig+0x186>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <UART_SetConfig+0x190>
 8006a00:	e010      	b.n	8006a24 <UART_SetConfig+0x1a8>
 8006a02:	2b20      	cmp	r3, #32
 8006a04:	d005      	beq.n	8006a12 <UART_SetConfig+0x196>
 8006a06:	2b30      	cmp	r3, #48	; 0x30
 8006a08:	d009      	beq.n	8006a1e <UART_SetConfig+0x1a2>
 8006a0a:	e00b      	b.n	8006a24 <UART_SetConfig+0x1a8>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	76fb      	strb	r3, [r7, #27]
 8006a10:	e088      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006a12:	2302      	movs	r3, #2
 8006a14:	76fb      	strb	r3, [r7, #27]
 8006a16:	e085      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	76fb      	strb	r3, [r7, #27]
 8006a1c:	e082      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006a1e:	2308      	movs	r3, #8
 8006a20:	76fb      	strb	r3, [r7, #27]
 8006a22:	e07f      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006a24:	2310      	movs	r3, #16
 8006a26:	76fb      	strb	r3, [r7, #27]
 8006a28:	bf00      	nop
 8006a2a:	e07b      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a57      	ldr	r2, [pc, #348]	; (8006b90 <UART_SetConfig+0x314>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d120      	bne.n	8006a78 <UART_SetConfig+0x1fc>
 8006a36:	4b53      	ldr	r3, [pc, #332]	; (8006b84 <UART_SetConfig+0x308>)
 8006a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d00f      	beq.n	8006a64 <UART_SetConfig+0x1e8>
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d802      	bhi.n	8006a4e <UART_SetConfig+0x1d2>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <UART_SetConfig+0x1dc>
 8006a4c:	e010      	b.n	8006a70 <UART_SetConfig+0x1f4>
 8006a4e:	2b80      	cmp	r3, #128	; 0x80
 8006a50:	d005      	beq.n	8006a5e <UART_SetConfig+0x1e2>
 8006a52:	2bc0      	cmp	r3, #192	; 0xc0
 8006a54:	d009      	beq.n	8006a6a <UART_SetConfig+0x1ee>
 8006a56:	e00b      	b.n	8006a70 <UART_SetConfig+0x1f4>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	76fb      	strb	r3, [r7, #27]
 8006a5c:	e062      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	76fb      	strb	r3, [r7, #27]
 8006a62:	e05f      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006a64:	2304      	movs	r3, #4
 8006a66:	76fb      	strb	r3, [r7, #27]
 8006a68:	e05c      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006a6a:	2308      	movs	r3, #8
 8006a6c:	76fb      	strb	r3, [r7, #27]
 8006a6e:	e059      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006a70:	2310      	movs	r3, #16
 8006a72:	76fb      	strb	r3, [r7, #27]
 8006a74:	bf00      	nop
 8006a76:	e055      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a45      	ldr	r2, [pc, #276]	; (8006b94 <UART_SetConfig+0x318>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d124      	bne.n	8006acc <UART_SetConfig+0x250>
 8006a82:	4b40      	ldr	r3, [pc, #256]	; (8006b84 <UART_SetConfig+0x308>)
 8006a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a90:	d012      	beq.n	8006ab8 <UART_SetConfig+0x23c>
 8006a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a96:	d802      	bhi.n	8006a9e <UART_SetConfig+0x222>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <UART_SetConfig+0x230>
 8006a9c:	e012      	b.n	8006ac4 <UART_SetConfig+0x248>
 8006a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aa2:	d006      	beq.n	8006ab2 <UART_SetConfig+0x236>
 8006aa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aa8:	d009      	beq.n	8006abe <UART_SetConfig+0x242>
 8006aaa:	e00b      	b.n	8006ac4 <UART_SetConfig+0x248>
 8006aac:	2300      	movs	r3, #0
 8006aae:	76fb      	strb	r3, [r7, #27]
 8006ab0:	e038      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	76fb      	strb	r3, [r7, #27]
 8006ab6:	e035      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006ab8:	2304      	movs	r3, #4
 8006aba:	76fb      	strb	r3, [r7, #27]
 8006abc:	e032      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006abe:	2308      	movs	r3, #8
 8006ac0:	76fb      	strb	r3, [r7, #27]
 8006ac2:	e02f      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	76fb      	strb	r3, [r7, #27]
 8006ac8:	bf00      	nop
 8006aca:	e02b      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a2a      	ldr	r2, [pc, #168]	; (8006b7c <UART_SetConfig+0x300>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d124      	bne.n	8006b20 <UART_SetConfig+0x2a4>
 8006ad6:	4b2b      	ldr	r3, [pc, #172]	; (8006b84 <UART_SetConfig+0x308>)
 8006ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006adc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae4:	d012      	beq.n	8006b0c <UART_SetConfig+0x290>
 8006ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aea:	d802      	bhi.n	8006af2 <UART_SetConfig+0x276>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <UART_SetConfig+0x284>
 8006af0:	e012      	b.n	8006b18 <UART_SetConfig+0x29c>
 8006af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af6:	d006      	beq.n	8006b06 <UART_SetConfig+0x28a>
 8006af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006afc:	d009      	beq.n	8006b12 <UART_SetConfig+0x296>
 8006afe:	e00b      	b.n	8006b18 <UART_SetConfig+0x29c>
 8006b00:	2300      	movs	r3, #0
 8006b02:	76fb      	strb	r3, [r7, #27]
 8006b04:	e00e      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006b06:	2302      	movs	r3, #2
 8006b08:	76fb      	strb	r3, [r7, #27]
 8006b0a:	e00b      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006b0c:	2304      	movs	r3, #4
 8006b0e:	76fb      	strb	r3, [r7, #27]
 8006b10:	e008      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006b12:	2308      	movs	r3, #8
 8006b14:	76fb      	strb	r3, [r7, #27]
 8006b16:	e005      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	76fb      	strb	r3, [r7, #27]
 8006b1c:	bf00      	nop
 8006b1e:	e001      	b.n	8006b24 <UART_SetConfig+0x2a8>
 8006b20:	2310      	movs	r3, #16
 8006b22:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a14      	ldr	r2, [pc, #80]	; (8006b7c <UART_SetConfig+0x300>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	f040 80a1 	bne.w	8006c72 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b30:	7efb      	ldrb	r3, [r7, #27]
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d836      	bhi.n	8006ba4 <UART_SetConfig+0x328>
 8006b36:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <UART_SetConfig+0x2c0>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b61 	.word	0x08006b61
 8006b40:	08006ba5 	.word	0x08006ba5
 8006b44:	08006b69 	.word	0x08006b69
 8006b48:	08006ba5 	.word	0x08006ba5
 8006b4c:	08006b6f 	.word	0x08006b6f
 8006b50:	08006ba5 	.word	0x08006ba5
 8006b54:	08006ba5 	.word	0x08006ba5
 8006b58:	08006ba5 	.word	0x08006ba5
 8006b5c:	08006b9d 	.word	0x08006b9d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b60:	f7fe fab8 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8006b64:	6178      	str	r0, [r7, #20]
        break;
 8006b66:	e022      	b.n	8006bae <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b68:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <UART_SetConfig+0x31c>)
 8006b6a:	617b      	str	r3, [r7, #20]
        break;
 8006b6c:	e01f      	b.n	8006bae <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b6e:	f7fe fa1d 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 8006b72:	6178      	str	r0, [r7, #20]
        break;
 8006b74:	e01b      	b.n	8006bae <UART_SetConfig+0x332>
 8006b76:	bf00      	nop
 8006b78:	cfff69f3 	.word	0xcfff69f3
 8006b7c:	40008000 	.word	0x40008000
 8006b80:	40013800 	.word	0x40013800
 8006b84:	40021000 	.word	0x40021000
 8006b88:	40004400 	.word	0x40004400
 8006b8c:	40004800 	.word	0x40004800
 8006b90:	40004c00 	.word	0x40004c00
 8006b94:	40005000 	.word	0x40005000
 8006b98:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba0:	617b      	str	r3, [r7, #20]
        break;
 8006ba2:	e004      	b.n	8006bae <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	76bb      	strb	r3, [r7, #26]
        break;
 8006bac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 811d 	beq.w	8006df0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	4a97      	ldr	r2, [pc, #604]	; (8006e18 <UART_SetConfig+0x59c>)
 8006bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bc8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	4413      	add	r3, r2
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d305      	bcc.n	8006be6 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d902      	bls.n	8006bec <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	76bb      	strb	r3, [r7, #26]
 8006bea:	e101      	b.n	8006df0 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f04f 0100 	mov.w	r1, #0
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	4a87      	ldr	r2, [pc, #540]	; (8006e18 <UART_SetConfig+0x59c>)
 8006bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f04f 0400 	mov.w	r4, #0
 8006c04:	461a      	mov	r2, r3
 8006c06:	4623      	mov	r3, r4
 8006c08:	f7fa f81e 	bl	8000c48 <__aeabi_uldivmod>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	4619      	mov	r1, r3
 8006c12:	4622      	mov	r2, r4
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	f04f 0400 	mov.w	r4, #0
 8006c1c:	0214      	lsls	r4, r2, #8
 8006c1e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006c22:	020b      	lsls	r3, r1, #8
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6852      	ldr	r2, [r2, #4]
 8006c28:	0852      	lsrs	r2, r2, #1
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	eb13 0b01 	adds.w	fp, r3, r1
 8006c34:	eb44 0c02 	adc.w	ip, r4, r2
 8006c38:	4658      	mov	r0, fp
 8006c3a:	4661      	mov	r1, ip
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f04f 0400 	mov.w	r4, #0
 8006c44:	461a      	mov	r2, r3
 8006c46:	4623      	mov	r3, r4
 8006c48:	f7f9 fffe 	bl	8000c48 <__aeabi_uldivmod>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c58:	d308      	bcc.n	8006c6c <UART_SetConfig+0x3f0>
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c60:	d204      	bcs.n	8006c6c <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	60da      	str	r2, [r3, #12]
 8006c6a:	e0c1      	b.n	8006df0 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	76bb      	strb	r3, [r7, #26]
 8006c70:	e0be      	b.n	8006df0 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7a:	d164      	bne.n	8006d46 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8006c7c:	7efb      	ldrb	r3, [r7, #27]
 8006c7e:	2b08      	cmp	r3, #8
 8006c80:	d827      	bhi.n	8006cd2 <UART_SetConfig+0x456>
 8006c82:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <UART_SetConfig+0x40c>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	08006cd3 	.word	0x08006cd3
 8006c98:	08006cc3 	.word	0x08006cc3
 8006c9c:	08006cd3 	.word	0x08006cd3
 8006ca0:	08006cd3 	.word	0x08006cd3
 8006ca4:	08006cd3 	.word	0x08006cd3
 8006ca8:	08006ccb 	.word	0x08006ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cac:	f7fe fa12 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8006cb0:	6178      	str	r0, [r7, #20]
        break;
 8006cb2:	e013      	b.n	8006cdc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb4:	f7fe fa24 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 8006cb8:	6178      	str	r0, [r7, #20]
        break;
 8006cba:	e00f      	b.n	8006cdc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cbc:	4b57      	ldr	r3, [pc, #348]	; (8006e1c <UART_SetConfig+0x5a0>)
 8006cbe:	617b      	str	r3, [r7, #20]
        break;
 8006cc0:	e00c      	b.n	8006cdc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc2:	f7fe f973 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 8006cc6:	6178      	str	r0, [r7, #20]
        break;
 8006cc8:	e008      	b.n	8006cdc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cce:	617b      	str	r3, [r7, #20]
        break;
 8006cd0:	e004      	b.n	8006cdc <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	76bb      	strb	r3, [r7, #26]
        break;
 8006cda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 8086 	beq.w	8006df0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	4a4b      	ldr	r2, [pc, #300]	; (8006e18 <UART_SetConfig+0x59c>)
 8006cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cf6:	005a      	lsls	r2, r3, #1
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	085b      	lsrs	r3, r3, #1
 8006cfe:	441a      	add	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	2b0f      	cmp	r3, #15
 8006d10:	d916      	bls.n	8006d40 <UART_SetConfig+0x4c4>
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d18:	d212      	bcs.n	8006d40 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f023 030f 	bic.w	r3, r3, #15
 8006d22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	085b      	lsrs	r3, r3, #1
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	89fb      	ldrh	r3, [r7, #14]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	89fa      	ldrh	r2, [r7, #14]
 8006d3c:	60da      	str	r2, [r3, #12]
 8006d3e:	e057      	b.n	8006df0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	76bb      	strb	r3, [r7, #26]
 8006d44:	e054      	b.n	8006df0 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d46:	7efb      	ldrb	r3, [r7, #27]
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d828      	bhi.n	8006d9e <UART_SetConfig+0x522>
 8006d4c:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <UART_SetConfig+0x4d8>)
 8006d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d52:	bf00      	nop
 8006d54:	08006d79 	.word	0x08006d79
 8006d58:	08006d81 	.word	0x08006d81
 8006d5c:	08006d89 	.word	0x08006d89
 8006d60:	08006d9f 	.word	0x08006d9f
 8006d64:	08006d8f 	.word	0x08006d8f
 8006d68:	08006d9f 	.word	0x08006d9f
 8006d6c:	08006d9f 	.word	0x08006d9f
 8006d70:	08006d9f 	.word	0x08006d9f
 8006d74:	08006d97 	.word	0x08006d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d78:	f7fe f9ac 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8006d7c:	6178      	str	r0, [r7, #20]
        break;
 8006d7e:	e013      	b.n	8006da8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d80:	f7fe f9be 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 8006d84:	6178      	str	r0, [r7, #20]
        break;
 8006d86:	e00f      	b.n	8006da8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d88:	4b24      	ldr	r3, [pc, #144]	; (8006e1c <UART_SetConfig+0x5a0>)
 8006d8a:	617b      	str	r3, [r7, #20]
        break;
 8006d8c:	e00c      	b.n	8006da8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d8e:	f7fe f90d 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 8006d92:	6178      	str	r0, [r7, #20]
        break;
 8006d94:	e008      	b.n	8006da8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d9a:	617b      	str	r3, [r7, #20]
        break;
 8006d9c:	e004      	b.n	8006da8 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	76bb      	strb	r3, [r7, #26]
        break;
 8006da6:	bf00      	nop
    }

    if (pclk != 0U)
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d020      	beq.n	8006df0 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	4a19      	ldr	r2, [pc, #100]	; (8006e18 <UART_SetConfig+0x59c>)
 8006db4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006db8:	461a      	mov	r2, r3
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	085b      	lsrs	r3, r3, #1
 8006dc6:	441a      	add	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2b0f      	cmp	r3, #15
 8006dd8:	d908      	bls.n	8006dec <UART_SetConfig+0x570>
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de0:	d204      	bcs.n	8006dec <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	60da      	str	r2, [r3, #12]
 8006dea:	e001      	b.n	8006df0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006e0c:	7ebb      	ldrb	r3, [r7, #26]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3720      	adds	r7, #32
 8006e12:	46bd      	mov	sp, r7
 8006e14:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006e18:	0800c3f0 	.word	0x0800c3f0
 8006e1c:	00f42400 	.word	0x00f42400

08006e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	f003 0308 	and.w	r3, r3, #8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	f003 0310 	and.w	r3, r3, #16
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01a      	beq.n	8006f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1e:	d10a      	bne.n	8006f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	605a      	str	r2, [r3, #4]
  }
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af02      	add	r7, sp, #8
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006f74:	f7fb fbd6 	bl	8002724 <HAL_GetTick>
 8006f78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d10e      	bne.n	8006fa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f82c 	bl	8006ff4 <UART_WaitOnFlagUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e022      	b.n	8006fec <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d10e      	bne.n	8006fd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f816 	bl	8006ff4 <UART_WaitOnFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e00c      	b.n	8006fec <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	603b      	str	r3, [r7, #0]
 8007000:	4613      	mov	r3, r2
 8007002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007004:	e062      	b.n	80070cc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700c:	d05e      	beq.n	80070cc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800700e:	f7fb fb89 	bl	8002724 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	429a      	cmp	r2, r3
 800701c:	d302      	bcc.n	8007024 <UART_WaitOnFlagUntilTimeout+0x30>
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d11d      	bne.n	8007060 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007032:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2220      	movs	r2, #32
 8007048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e045      	b.n	80070ec <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0304 	and.w	r3, r3, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	d02e      	beq.n	80070cc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800707c:	d126      	bne.n	80070cc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007086:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007096:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0201 	bic.w	r2, r2, #1
 80070a6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e00f      	b.n	80070ec <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	69da      	ldr	r2, [r3, #28]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	4013      	ands	r3, r2
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	429a      	cmp	r2, r3
 80070da:	bf0c      	ite	eq
 80070dc:	2301      	moveq	r3, #1
 80070de:	2300      	movne	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	79fb      	ldrb	r3, [r7, #7]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d08d      	beq.n	8007006 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800710a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6812      	ldr	r2, [r2, #0]
 8007116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800711a:	f023 0301 	bic.w	r3, r3, #1
 800711e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f7ff fb85 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800715e:	bf00      	nop
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800717c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff fb61 	bl	8006854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_UARTEx_DisableFifoMode+0x16>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e027      	b.n	800723c <HAL_UARTEx_DisableFifoMode+0x66>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2224      	movs	r2, #36	; 0x24
 80071f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0201 	bic.w	r2, r2, #1
 8007212:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800721a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007258:	2b01      	cmp	r3, #1
 800725a:	d101      	bne.n	8007260 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800725c:	2302      	movs	r3, #2
 800725e:	e02d      	b.n	80072bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2224      	movs	r2, #36	; 0x24
 800726c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0201 	bic.w	r2, r2, #1
 8007286:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f84f 	bl	8007340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2220      	movs	r2, #32
 80072ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072d8:	2302      	movs	r3, #2
 80072da:	e02d      	b.n	8007338 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2224      	movs	r2, #36	; 0x24
 80072e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0201 	bic.w	r2, r2, #1
 8007302:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f811 	bl	8007340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2220      	movs	r2, #32
 800732a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007340:	b480      	push	{r7}
 8007342:	b089      	sub	sp, #36	; 0x24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007348:	4a2f      	ldr	r2, [pc, #188]	; (8007408 <UARTEx_SetNbDataToProcess+0xc8>)
 800734a:	f107 0314 	add.w	r3, r7, #20
 800734e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007352:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007356:	4a2d      	ldr	r2, [pc, #180]	; (800740c <UARTEx_SetNbDataToProcess+0xcc>)
 8007358:	f107 030c 	add.w	r3, r7, #12
 800735c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007360:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007368:	2b00      	cmp	r3, #0
 800736a:	d108      	bne.n	800737e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800737c:	e03d      	b.n	80073fa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800737e:	2308      	movs	r3, #8
 8007380:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007382:	2308      	movs	r3, #8
 8007384:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	0e5b      	lsrs	r3, r3, #25
 800738e:	b2db      	uxtb	r3, r3
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	0f5b      	lsrs	r3, r3, #29
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f003 0307 	and.w	r3, r3, #7
 80073a4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80073a6:	7fbb      	ldrb	r3, [r7, #30]
 80073a8:	7f3a      	ldrb	r2, [r7, #28]
 80073aa:	f107 0120 	add.w	r1, r7, #32
 80073ae:	440a      	add	r2, r1
 80073b0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80073b4:	fb02 f303 	mul.w	r3, r2, r3
 80073b8:	7f3a      	ldrb	r2, [r7, #28]
 80073ba:	f107 0120 	add.w	r1, r7, #32
 80073be:	440a      	add	r2, r1
 80073c0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80073c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80073d0:	7ffb      	ldrb	r3, [r7, #31]
 80073d2:	7f7a      	ldrb	r2, [r7, #29]
 80073d4:	f107 0120 	add.w	r1, r7, #32
 80073d8:	440a      	add	r2, r1
 80073da:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80073de:	fb02 f303 	mul.w	r3, r2, r3
 80073e2:	7f7a      	ldrb	r2, [r7, #29]
 80073e4:	f107 0120 	add.w	r1, r7, #32
 80073e8:	440a      	add	r2, r1
 80073ea:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80073ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073fa:	bf00      	nop
 80073fc:	3724      	adds	r7, #36	; 0x24
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	0800c37c 	.word	0x0800c37c
 800740c:	0800c384 	.word	0x0800c384

08007410 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007416:	f3ef 8305 	mrs	r3, IPSR
 800741a:	607b      	str	r3, [r7, #4]
  return(result);
 800741c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800741e:	2b00      	cmp	r3, #0
 8007420:	bf14      	ite	ne
 8007422:	2301      	movne	r3, #1
 8007424:	2300      	moveq	r3, #0
 8007426:	b2db      	uxtb	r3, r3
}
 8007428:	4618      	mov	r0, r3
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af02      	add	r7, sp, #8
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d010      	beq.n	8007468 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d10b      	bne.n	8007464 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	2303      	movs	r3, #3
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4613      	mov	r3, r2
 8007456:	2200      	movs	r2, #0
 8007458:	2100      	movs	r1, #0
 800745a:	2001      	movs	r0, #1
 800745c:	f000 fb72 	bl	8007b44 <xQueueGenericCreateStatic>
 8007460:	4603      	mov	r3, r0
 8007462:	e016      	b.n	8007492 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	e014      	b.n	8007492 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d110      	bne.n	8007490 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800746e:	2203      	movs	r2, #3
 8007470:	2100      	movs	r1, #0
 8007472:	2001      	movs	r0, #1
 8007474:	f000 fbd9 	bl	8007c2a <xQueueGenericCreate>
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <osSemaphoreCreate+0x58>
 8007480:	2300      	movs	r3, #0
 8007482:	2200      	movs	r2, #0
 8007484:	2100      	movs	r1, #0
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fc2e 	bl	8007ce8 <xQueueGenericSend>
      return sema;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	e000      	b.n	8007492 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007490:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80074a6:	2300      	movs	r3, #0
 80074a8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80074b0:	2380      	movs	r3, #128	; 0x80
 80074b2:	e03a      	b.n	800752a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074be:	d103      	bne.n	80074c8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80074c0:	f04f 33ff 	mov.w	r3, #4294967295
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	e009      	b.n	80074dc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d006      	beq.n	80074dc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <osSemaphoreWait+0x40>
      ticks = 1;
 80074d8:	2301      	movs	r3, #1
 80074da:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80074dc:	f7ff ff98 	bl	8007410 <inHandlerMode>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d017      	beq.n	8007516 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80074e6:	f107 0308 	add.w	r3, r7, #8
 80074ea:	461a      	mov	r2, r3
 80074ec:	2100      	movs	r1, #0
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fff6 	bl	80084e0 <xQueueReceiveFromISR>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d001      	beq.n	80074fe <osSemaphoreWait+0x62>
      return osErrorOS;
 80074fa:	23ff      	movs	r3, #255	; 0xff
 80074fc:	e015      	b.n	800752a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d011      	beq.n	8007528 <osSemaphoreWait+0x8c>
 8007504:	4b0b      	ldr	r3, [pc, #44]	; (8007534 <osSemaphoreWait+0x98>)
 8007506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	e008      	b.n	8007528 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007516:	68f9      	ldr	r1, [r7, #12]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fed9 	bl	80082d0 <xQueueSemaphoreTake>
 800751e:	4603      	mov	r3, r0
 8007520:	2b01      	cmp	r3, #1
 8007522:	d001      	beq.n	8007528 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007524:	23ff      	movs	r3, #255	; 0xff
 8007526:	e000      	b.n	800752a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	e000ed04 	.word	0xe000ed04

08007538 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007544:	2300      	movs	r3, #0
 8007546:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007548:	f7ff ff62 	bl	8007410 <inHandlerMode>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d016      	beq.n	8007580 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007552:	f107 0308 	add.w	r3, r7, #8
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fd53 	bl	8008004 <xQueueGiveFromISR>
 800755e:	4603      	mov	r3, r0
 8007560:	2b01      	cmp	r3, #1
 8007562:	d001      	beq.n	8007568 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007564:	23ff      	movs	r3, #255	; 0xff
 8007566:	e017      	b.n	8007598 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d013      	beq.n	8007596 <osSemaphoreRelease+0x5e>
 800756e:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <osSemaphoreRelease+0x68>)
 8007570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	e00a      	b.n	8007596 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007580:	2300      	movs	r3, #0
 8007582:	2200      	movs	r2, #0
 8007584:	2100      	movs	r1, #0
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fbae 	bl	8007ce8 <xQueueGenericSend>
 800758c:	4603      	mov	r3, r0
 800758e:	2b01      	cmp	r3, #1
 8007590:	d001      	beq.n	8007596 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007592:	23ff      	movs	r3, #255	; 0xff
 8007594:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007596:	68fb      	ldr	r3, [r7, #12]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	3303      	adds	r3, #3
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80075b8:	2014      	movs	r0, #20
 80075ba:	f002 fb31 	bl	8009c20 <pvPortMalloc>
 80075be:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d046      	beq.n	8007654 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2200      	movs	r2, #0
 80075d8:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f002 fb1e 	bl	8009c20 <pvPortMalloc>
 80075e4:	4602      	mov	r2, r0
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d02b      	beq.n	800764a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	fb02 f303 	mul.w	r3, r2, r3
 80075fc:	4618      	mov	r0, r3
 80075fe:	f002 fb0f 	bl	8009c20 <pvPortMalloc>
 8007602:	4602      	mov	r2, r0
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d011      	beq.n	8007634 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007610:	2300      	movs	r3, #0
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	e008      	b.n	8007628 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	4413      	add	r3, r2
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	3301      	adds	r3, #1
 8007626:	613b      	str	r3, [r7, #16]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	429a      	cmp	r2, r3
 8007630:	d3f1      	bcc.n	8007616 <osPoolCreate+0x72>
 8007632:	e00f      	b.n	8007654 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	4618      	mov	r0, r3
 800763a:	f002 fbb3 	bl	8009da4 <vPortFree>
        vPortFree(thePool);
 800763e:	6978      	ldr	r0, [r7, #20]
 8007640:	f002 fbb0 	bl	8009da4 <vPortFree>
        thePool = NULL;
 8007644:	2300      	movs	r3, #0
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	e004      	b.n	8007654 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800764a:	6978      	ldr	r0, [r7, #20]
 800764c:	f002 fbaa 	bl	8009da4 <vPortFree>
      thePool = NULL;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8007654:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b08a      	sub	sp, #40	; 0x28
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800766e:	f7ff fecf 	bl	8007410 <inHandlerMode>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00e      	beq.n	8007696 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007678:	f3ef 8211 	mrs	r2, BASEPRI
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	617a      	str	r2, [r7, #20]
 800768e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007690:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
 8007694:	e001      	b.n	800769a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8007696:	f002 f9a9 	bl	80099ec <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800769a:	2300      	movs	r3, #0
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	e029      	b.n	80076f4 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6892      	ldr	r2, [r2, #8]
 80076ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80076b0:	fb02 f201 	mul.w	r2, r2, r1
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	4413      	add	r3, r2
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d113      	bne.n	80076ee <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	4413      	add	r3, r2
 80076ce:	2201      	movs	r2, #1
 80076d0:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4619      	mov	r1, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	fb02 f303 	mul.w	r3, r2, r3
 80076e2:	440b      	add	r3, r1
 80076e4:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	611a      	str	r2, [r3, #16]
      break;
 80076ec:	e007      	b.n	80076fe <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	3301      	adds	r3, #1
 80076f2:	61fb      	str	r3, [r7, #28]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d3d0      	bcc.n	80076a0 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80076fe:	f7ff fe87 	bl	8007410 <inHandlerMode>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	e001      	b.n	8007718 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8007714:	f002 f998 	bl	8009a48 <vPortExitCritical>
  }
  
  return p;
 8007718:	6a3b      	ldr	r3, [r7, #32]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3728      	adds	r7, #40	; 0x28
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <osPoolFree+0x14>
    return osErrorParameter;
 8007732:	2380      	movs	r3, #128	; 0x80
 8007734:	e030      	b.n	8007798 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <osPoolFree+0x1e>
    return osErrorParameter;
 800773c:	2380      	movs	r3, #128	; 0x80
 800773e:	e02b      	b.n	8007798 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d201      	bcs.n	800774e <osPoolFree+0x2c>
    return osErrorParameter;
 800774a:	2380      	movs	r3, #128	; 0x80
 800774c:	e024      	b.n	8007798 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6812      	ldr	r2, [r2, #0]
 8007754:	1a9b      	subs	r3, r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007762:	fb02 f201 	mul.w	r2, r2, r1
 8007766:	1a9b      	subs	r3, r3, r2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <osPoolFree+0x4e>
    return osErrorParameter;
 800776c:	2380      	movs	r3, #128	; 0x80
 800776e:	e013      	b.n	8007798 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	fbb2 f3f3 	udiv	r3, r2, r3
 800777a:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	429a      	cmp	r2, r3
 8007784:	d301      	bcc.n	800778a <osPoolFree+0x68>
    return osErrorParameter;
 8007786:	2380      	movs	r3, #128	; 0x80
 8007788:	e006      	b.n	8007798 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	4413      	add	r3, r2
 8007792:	2200      	movs	r2, #0
 8007794:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80077b0:	2300      	movs	r3, #0
 80077b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <osMessagePut+0x1e>
    ticks = 1;
 80077be:	2301      	movs	r3, #1
 80077c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80077c2:	f7ff fe25 	bl	8007410 <inHandlerMode>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d018      	beq.n	80077fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80077cc:	f107 0210 	add.w	r2, r7, #16
 80077d0:	f107 0108 	add.w	r1, r7, #8
 80077d4:	2300      	movs	r3, #0
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 fb80 	bl	8007edc <xQueueGenericSendFromISR>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d001      	beq.n	80077e6 <osMessagePut+0x42>
      return osErrorOS;
 80077e2:	23ff      	movs	r3, #255	; 0xff
 80077e4:	e018      	b.n	8007818 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d014      	beq.n	8007816 <osMessagePut+0x72>
 80077ec:	4b0c      	ldr	r3, [pc, #48]	; (8007820 <osMessagePut+0x7c>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	e00b      	b.n	8007816 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80077fe:	f107 0108 	add.w	r1, r7, #8
 8007802:	2300      	movs	r3, #0
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 fa6e 	bl	8007ce8 <xQueueGenericSend>
 800780c:	4603      	mov	r3, r0
 800780e:	2b01      	cmp	r3, #1
 8007810:	d001      	beq.n	8007816 <osMessagePut+0x72>
      return osErrorOS;
 8007812:	23ff      	movs	r3, #255	; 0xff
 8007814:	e000      	b.n	8007818 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	e000ed04 	.word	0xe000ed04

08007824 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007824:	b590      	push	{r4, r7, lr}
 8007826:	b08b      	sub	sp, #44	; 0x2c
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10a      	bne.n	8007854 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800783e:	2380      	movs	r3, #128	; 0x80
 8007840:	617b      	str	r3, [r7, #20]
    return event;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	461c      	mov	r4, r3
 8007846:	f107 0314 	add.w	r3, r7, #20
 800784a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800784e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007852:	e054      	b.n	80078fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007854:	2300      	movs	r3, #0
 8007856:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d103      	bne.n	800786c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007864:	f04f 33ff 	mov.w	r3, #4294967295
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
 800786a:	e009      	b.n	8007880 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d006      	beq.n	8007880 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <osMessageGet+0x5c>
      ticks = 1;
 800787c:	2301      	movs	r3, #1
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007880:	f7ff fdc6 	bl	8007410 <inHandlerMode>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01c      	beq.n	80078c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800788a:	f107 0220 	add.w	r2, r7, #32
 800788e:	f107 0314 	add.w	r3, r7, #20
 8007892:	3304      	adds	r3, #4
 8007894:	4619      	mov	r1, r3
 8007896:	68b8      	ldr	r0, [r7, #8]
 8007898:	f000 fe22 	bl	80084e0 <xQueueReceiveFromISR>
 800789c:	4603      	mov	r3, r0
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d102      	bne.n	80078a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80078a2:	2310      	movs	r3, #16
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	e001      	b.n	80078ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d01d      	beq.n	80078ee <osMessageGet+0xca>
 80078b2:	4b15      	ldr	r3, [pc, #84]	; (8007908 <osMessageGet+0xe4>)
 80078b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	e014      	b.n	80078ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80078c4:	f107 0314 	add.w	r3, r7, #20
 80078c8:	3304      	adds	r3, #4
 80078ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078cc:	4619      	mov	r1, r3
 80078ce:	68b8      	ldr	r0, [r7, #8]
 80078d0:	f000 fc22 	bl	8008118 <xQueueReceive>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d102      	bne.n	80078e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80078da:	2310      	movs	r3, #16
 80078dc:	617b      	str	r3, [r7, #20]
 80078de:	e006      	b.n	80078ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <osMessageGet+0xc6>
 80078e6:	2300      	movs	r3, #0
 80078e8:	e000      	b.n	80078ec <osMessageGet+0xc8>
 80078ea:	2340      	movs	r3, #64	; 0x40
 80078ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	461c      	mov	r4, r3
 80078f2:	f107 0314 	add.w	r3, r7, #20
 80078f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80078fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	372c      	adds	r7, #44	; 0x2c
 8007902:	46bd      	mov	sp, r7
 8007904:	bd90      	pop	{r4, r7, pc}
 8007906:	bf00      	nop
 8007908:	e000ed04 	.word	0xe000ed04

0800790c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f103 0208 	add.w	r2, r3, #8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f04f 32ff 	mov.w	r2, #4294967295
 8007924:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f103 0208 	add.w	r2, r3, #8
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f103 0208 	add.w	r2, r3, #8
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007966:	b480      	push	{r7}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	601a      	str	r2, [r3, #0]
}
 80079a2:	bf00      	nop
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079ae:	b480      	push	{r7}
 80079b0:	b085      	sub	sp, #20
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c4:	d103      	bne.n	80079ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	e00c      	b.n	80079e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	3308      	adds	r3, #8
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	e002      	b.n	80079dc <vListInsert+0x2e>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d2f6      	bcs.n	80079d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	601a      	str	r2, [r3, #0]
}
 8007a14:	bf00      	nop
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6892      	ldr	r2, [r2, #8]
 8007a36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6852      	ldr	r2, [r2, #4]
 8007a40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d103      	bne.n	8007a54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689a      	ldr	r2, [r3, #8]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	1e5a      	subs	r2, r3, #1
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d109      	bne.n	8007a9c <xQueueGenericReset+0x28>
	__asm volatile
 8007a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8c:	f383 8811 	msr	BASEPRI, r3
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	60bb      	str	r3, [r7, #8]
 8007a9a:	e7fe      	b.n	8007a9a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007a9c:	f001 ffa6 	bl	80099ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa8:	68f9      	ldr	r1, [r7, #12]
 8007aaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007aac:	fb01 f303 	mul.w	r3, r1, r3
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007acc:	3b01      	subs	r3, #1
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	441a      	add	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	22ff      	movs	r2, #255	; 0xff
 8007ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	22ff      	movs	r2, #255	; 0xff
 8007ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d114      	bne.n	8007b1c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01a      	beq.n	8007b30 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3310      	adds	r3, #16
 8007afe:	4618      	mov	r0, r3
 8007b00:	f001 fa60 	bl	8008fc4 <xTaskRemoveFromEventList>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d012      	beq.n	8007b30 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b0a:	4b0d      	ldr	r3, [pc, #52]	; (8007b40 <xQueueGenericReset+0xcc>)
 8007b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	e009      	b.n	8007b30 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3310      	adds	r3, #16
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7ff fef3 	bl	800790c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3324      	adds	r3, #36	; 0x24
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff feee 	bl	800790c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b30:	f001 ff8a 	bl	8009a48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b34:	2301      	movs	r3, #1
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	e000ed04 	.word	0xe000ed04

08007b44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08e      	sub	sp, #56	; 0x38
 8007b48:	af02      	add	r7, sp, #8
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d109      	bne.n	8007b6c <xQueueGenericCreateStatic+0x28>
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b6a:	e7fe      	b.n	8007b6a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d109      	bne.n	8007b86 <xQueueGenericCreateStatic+0x42>
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
 8007b84:	e7fe      	b.n	8007b84 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <xQueueGenericCreateStatic+0x4e>
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <xQueueGenericCreateStatic+0x52>
 8007b92:	2301      	movs	r3, #1
 8007b94:	e000      	b.n	8007b98 <xQueueGenericCreateStatic+0x54>
 8007b96:	2300      	movs	r3, #0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d109      	bne.n	8007bb0 <xQueueGenericCreateStatic+0x6c>
 8007b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	623b      	str	r3, [r7, #32]
 8007bae:	e7fe      	b.n	8007bae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d102      	bne.n	8007bbc <xQueueGenericCreateStatic+0x78>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <xQueueGenericCreateStatic+0x7c>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e000      	b.n	8007bc2 <xQueueGenericCreateStatic+0x7e>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <xQueueGenericCreateStatic+0x96>
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	61fb      	str	r3, [r7, #28]
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bda:	2348      	movs	r3, #72	; 0x48
 8007bdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2b48      	cmp	r3, #72	; 0x48
 8007be2:	d009      	beq.n	8007bf8 <xQueueGenericCreateStatic+0xb4>
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	61bb      	str	r3, [r7, #24]
 8007bf6:	e7fe      	b.n	8007bf6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bf8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00d      	beq.n	8007c20 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c0c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	68b9      	ldr	r1, [r7, #8]
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 f844 	bl	8007ca8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3730      	adds	r7, #48	; 0x30
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b08a      	sub	sp, #40	; 0x28
 8007c2e:	af02      	add	r7, sp, #8
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	4613      	mov	r3, r2
 8007c36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d109      	bne.n	8007c52 <xQueueGenericCreate+0x28>
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	613b      	str	r3, [r7, #16]
 8007c50:	e7fe      	b.n	8007c50 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d102      	bne.n	8007c5e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	61fb      	str	r3, [r7, #28]
 8007c5c:	e004      	b.n	8007c68 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	fb02 f303 	mul.w	r3, r2, r3
 8007c66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	3348      	adds	r3, #72	; 0x48
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 ffd7 	bl	8009c20 <pvPortMalloc>
 8007c72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d011      	beq.n	8007c9e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	3348      	adds	r3, #72	; 0x48
 8007c82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c8c:	79fa      	ldrb	r2, [r7, #7]
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	4613      	mov	r3, r2
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f805 	bl	8007ca8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
	}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3720      	adds	r7, #32
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d103      	bne.n	8007cc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	e002      	b.n	8007cca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	69b8      	ldr	r0, [r7, #24]
 8007cda:	f7ff fecb 	bl	8007a74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08e      	sub	sp, #56	; 0x38
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d109      	bne.n	8007d18 <xQueueGenericSend+0x30>
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d16:	e7fe      	b.n	8007d16 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d103      	bne.n	8007d26 <xQueueGenericSend+0x3e>
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <xQueueGenericSend+0x42>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <xQueueGenericSend+0x44>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d109      	bne.n	8007d44 <xQueueGenericSend+0x5c>
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24
 8007d42:	e7fe      	b.n	8007d42 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d103      	bne.n	8007d52 <xQueueGenericSend+0x6a>
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d101      	bne.n	8007d56 <xQueueGenericSend+0x6e>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e000      	b.n	8007d58 <xQueueGenericSend+0x70>
 8007d56:	2300      	movs	r3, #0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d109      	bne.n	8007d70 <xQueueGenericSend+0x88>
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	623b      	str	r3, [r7, #32]
 8007d6e:	e7fe      	b.n	8007d6e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d70:	f001 fade 	bl	8009330 <xTaskGetSchedulerState>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d102      	bne.n	8007d80 <xQueueGenericSend+0x98>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <xQueueGenericSend+0x9c>
 8007d80:	2301      	movs	r3, #1
 8007d82:	e000      	b.n	8007d86 <xQueueGenericSend+0x9e>
 8007d84:	2300      	movs	r3, #0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <xQueueGenericSend+0xb6>
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	61fb      	str	r3, [r7, #28]
 8007d9c:	e7fe      	b.n	8007d9c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d9e:	f001 fe25 	bl	80099ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d302      	bcc.n	8007db4 <xQueueGenericSend+0xcc>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d129      	bne.n	8007e08 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	68b9      	ldr	r1, [r7, #8]
 8007db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dba:	f000 fc26 	bl	800860a <prvCopyDataToQueue>
 8007dbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d010      	beq.n	8007dea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	3324      	adds	r3, #36	; 0x24
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 f8f9 	bl	8008fc4 <xTaskRemoveFromEventList>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d013      	beq.n	8007e00 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007dd8:	4b3f      	ldr	r3, [pc, #252]	; (8007ed8 <xQueueGenericSend+0x1f0>)
 8007dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	e00a      	b.n	8007e00 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007df0:	4b39      	ldr	r3, [pc, #228]	; (8007ed8 <xQueueGenericSend+0x1f0>)
 8007df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e00:	f001 fe22 	bl	8009a48 <vPortExitCritical>
				return pdPASS;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e063      	b.n	8007ed0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d103      	bne.n	8007e16 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e0e:	f001 fe1b 	bl	8009a48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	e05c      	b.n	8007ed0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d106      	bne.n	8007e2a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e1c:	f107 0314 	add.w	r3, r7, #20
 8007e20:	4618      	mov	r0, r3
 8007e22:	f001 f931 	bl	8009088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e26:	2301      	movs	r3, #1
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e2a:	f001 fe0d 	bl	8009a48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e2e:	f000 fee9 	bl	8008c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e32:	f001 fddb 	bl	80099ec <vPortEnterCritical>
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e3c:	b25b      	sxtb	r3, r3
 8007e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e42:	d103      	bne.n	8007e4c <xQueueGenericSend+0x164>
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e52:	b25b      	sxtb	r3, r3
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e58:	d103      	bne.n	8007e62 <xQueueGenericSend+0x17a>
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e62:	f001 fdf1 	bl	8009a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e66:	1d3a      	adds	r2, r7, #4
 8007e68:	f107 0314 	add.w	r3, r7, #20
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f001 f920 	bl	80090b4 <xTaskCheckForTimeOut>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d124      	bne.n	8007ec4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e7c:	f000 fcbd 	bl	80087fa <prvIsQueueFull>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d018      	beq.n	8007eb8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	3310      	adds	r3, #16
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 f874 	bl	8008f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e96:	f000 fc48 	bl	800872a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e9a:	f000 fec1 	bl	8008c20 <xTaskResumeAll>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f47f af7c 	bne.w	8007d9e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	; (8007ed8 <xQueueGenericSend+0x1f0>)
 8007ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	e772      	b.n	8007d9e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eba:	f000 fc36 	bl	800872a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ebe:	f000 feaf 	bl	8008c20 <xTaskResumeAll>
 8007ec2:	e76c      	b.n	8007d9e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ec6:	f000 fc30 	bl	800872a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eca:	f000 fea9 	bl	8008c20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ece:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3738      	adds	r7, #56	; 0x38
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08e      	sub	sp, #56	; 0x38
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d109      	bne.n	8007f08 <xQueueGenericSendFromISR+0x2c>
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	627b      	str	r3, [r7, #36]	; 0x24
 8007f06:	e7fe      	b.n	8007f06 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d103      	bne.n	8007f16 <xQueueGenericSendFromISR+0x3a>
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <xQueueGenericSendFromISR+0x3e>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <xQueueGenericSendFromISR+0x40>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d109      	bne.n	8007f34 <xQueueGenericSendFromISR+0x58>
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	623b      	str	r3, [r7, #32]
 8007f32:	e7fe      	b.n	8007f32 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d103      	bne.n	8007f42 <xQueueGenericSendFromISR+0x66>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d101      	bne.n	8007f46 <xQueueGenericSendFromISR+0x6a>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e000      	b.n	8007f48 <xQueueGenericSendFromISR+0x6c>
 8007f46:	2300      	movs	r3, #0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <xQueueGenericSendFromISR+0x84>
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	61fb      	str	r3, [r7, #28]
 8007f5e:	e7fe      	b.n	8007f5e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f60:	f001 fe20 	bl	8009ba4 <vPortValidateInterruptPriority>
	__asm volatile
 8007f64:	f3ef 8211 	mrs	r2, BASEPRI
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	61ba      	str	r2, [r7, #24]
 8007f7a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007f7c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d302      	bcc.n	8007f92 <xQueueGenericSendFromISR+0xb6>
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d12c      	bne.n	8007fec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	68b9      	ldr	r1, [r7, #8]
 8007fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fa2:	f000 fb32 	bl	800860a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fa6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fae:	d112      	bne.n	8007fd6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d016      	beq.n	8007fe6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	3324      	adds	r3, #36	; 0x24
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 f801 	bl	8008fc4 <xTaskRemoveFromEventList>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00e      	beq.n	8007fe6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e007      	b.n	8007fe6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fda:	3301      	adds	r3, #1
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	b25a      	sxtb	r2, r3
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007fea:	e001      	b.n	8007ff0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3738      	adds	r7, #56	; 0x38
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08e      	sub	sp, #56	; 0x38
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	2b00      	cmp	r3, #0
 8008016:	d109      	bne.n	800802c <xQueueGiveFromISR+0x28>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	623b      	str	r3, [r7, #32]
 800802a:	e7fe      	b.n	800802a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008030:	2b00      	cmp	r3, #0
 8008032:	d009      	beq.n	8008048 <xQueueGiveFromISR+0x44>
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	61fb      	str	r3, [r7, #28]
 8008046:	e7fe      	b.n	8008046 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d103      	bne.n	8008058 <xQueueGiveFromISR+0x54>
 8008050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <xQueueGiveFromISR+0x58>
 8008058:	2301      	movs	r3, #1
 800805a:	e000      	b.n	800805e <xQueueGiveFromISR+0x5a>
 800805c:	2300      	movs	r3, #0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d109      	bne.n	8008076 <xQueueGiveFromISR+0x72>
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	61bb      	str	r3, [r7, #24]
 8008074:	e7fe      	b.n	8008074 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008076:	f001 fd95 	bl	8009ba4 <vPortValidateInterruptPriority>
	__asm volatile
 800807a:	f3ef 8211 	mrs	r2, BASEPRI
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	617a      	str	r2, [r7, #20]
 8008090:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008092:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d22b      	bcs.n	80080fe <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	1c5a      	adds	r2, r3, #1
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80080b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c0:	d112      	bne.n	80080e8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d016      	beq.n	80080f8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	3324      	adds	r3, #36	; 0x24
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 ff78 	bl	8008fc4 <xTaskRemoveFromEventList>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00e      	beq.n	80080f8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2201      	movs	r2, #1
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	e007      	b.n	80080f8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080ec:	3301      	adds	r3, #1
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	b25a      	sxtb	r2, r3
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080f8:	2301      	movs	r3, #1
 80080fa:	637b      	str	r3, [r7, #52]	; 0x34
 80080fc:	e001      	b.n	8008102 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080fe:	2300      	movs	r3, #0
 8008100:	637b      	str	r3, [r7, #52]	; 0x34
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800810c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800810e:	4618      	mov	r0, r3
 8008110:	3738      	adds	r7, #56	; 0x38
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08c      	sub	sp, #48	; 0x30
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008124:	2300      	movs	r3, #0
 8008126:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812e:	2b00      	cmp	r3, #0
 8008130:	d109      	bne.n	8008146 <xQueueReceive+0x2e>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	623b      	str	r3, [r7, #32]
 8008144:	e7fe      	b.n	8008144 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d103      	bne.n	8008154 <xQueueReceive+0x3c>
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <xQueueReceive+0x40>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <xQueueReceive+0x42>
 8008158:	2300      	movs	r3, #0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d109      	bne.n	8008172 <xQueueReceive+0x5a>
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	e7fe      	b.n	8008170 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008172:	f001 f8dd 	bl	8009330 <xTaskGetSchedulerState>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <xQueueReceive+0x6a>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <xQueueReceive+0x6e>
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <xQueueReceive+0x70>
 8008186:	2300      	movs	r3, #0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d109      	bne.n	80081a0 <xQueueReceive+0x88>
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	61bb      	str	r3, [r7, #24]
 800819e:	e7fe      	b.n	800819e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081a0:	f001 fc24 	bl	80099ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01f      	beq.n	80081f0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081b0:	68b9      	ldr	r1, [r7, #8]
 80081b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081b4:	f000 fa93 	bl	80086de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	1e5a      	subs	r2, r3, #1
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00f      	beq.n	80081e8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	3310      	adds	r3, #16
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 fef9 	bl	8008fc4 <xTaskRemoveFromEventList>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d007      	beq.n	80081e8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081d8:	4b3c      	ldr	r3, [pc, #240]	; (80082cc <xQueueReceive+0x1b4>)
 80081da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081e8:	f001 fc2e 	bl	8009a48 <vPortExitCritical>
				return pdPASS;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e069      	b.n	80082c4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d103      	bne.n	80081fe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081f6:	f001 fc27 	bl	8009a48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081fa:	2300      	movs	r3, #0
 80081fc:	e062      	b.n	80082c4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008204:	f107 0310 	add.w	r3, r7, #16
 8008208:	4618      	mov	r0, r3
 800820a:	f000 ff3d 	bl	8009088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800820e:	2301      	movs	r3, #1
 8008210:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008212:	f001 fc19 	bl	8009a48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008216:	f000 fcf5 	bl	8008c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800821a:	f001 fbe7 	bl	80099ec <vPortEnterCritical>
 800821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008224:	b25b      	sxtb	r3, r3
 8008226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822a:	d103      	bne.n	8008234 <xQueueReceive+0x11c>
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800823a:	b25b      	sxtb	r3, r3
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008240:	d103      	bne.n	800824a <xQueueReceive+0x132>
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800824a:	f001 fbfd 	bl	8009a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800824e:	1d3a      	adds	r2, r7, #4
 8008250:	f107 0310 	add.w	r3, r7, #16
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f000 ff2c 	bl	80090b4 <xTaskCheckForTimeOut>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d123      	bne.n	80082aa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008264:	f000 fab3 	bl	80087ce <prvIsQueueEmpty>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d017      	beq.n	800829e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	3324      	adds	r3, #36	; 0x24
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fe80 	bl	8008f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800827c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827e:	f000 fa54 	bl	800872a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008282:	f000 fccd 	bl	8008c20 <xTaskResumeAll>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d189      	bne.n	80081a0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800828c:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <xQueueReceive+0x1b4>)
 800828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	e780      	b.n	80081a0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800829e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082a0:	f000 fa43 	bl	800872a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082a4:	f000 fcbc 	bl	8008c20 <xTaskResumeAll>
 80082a8:	e77a      	b.n	80081a0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80082aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ac:	f000 fa3d 	bl	800872a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082b0:	f000 fcb6 	bl	8008c20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082b6:	f000 fa8a 	bl	80087ce <prvIsQueueEmpty>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f43f af6f 	beq.w	80081a0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3730      	adds	r7, #48	; 0x30
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	e000ed04 	.word	0xe000ed04

080082d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08e      	sub	sp, #56	; 0x38
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80082da:	2300      	movs	r3, #0
 80082dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80082e2:	2300      	movs	r3, #0
 80082e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d109      	bne.n	8008300 <xQueueSemaphoreTake+0x30>
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	623b      	str	r3, [r7, #32]
 80082fe:	e7fe      	b.n	80082fe <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d009      	beq.n	800831c <xQueueSemaphoreTake+0x4c>
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	61fb      	str	r3, [r7, #28]
 800831a:	e7fe      	b.n	800831a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800831c:	f001 f808 	bl	8009330 <xTaskGetSchedulerState>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d102      	bne.n	800832c <xQueueSemaphoreTake+0x5c>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <xQueueSemaphoreTake+0x60>
 800832c:	2301      	movs	r3, #1
 800832e:	e000      	b.n	8008332 <xQueueSemaphoreTake+0x62>
 8008330:	2300      	movs	r3, #0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <xQueueSemaphoreTake+0x7a>
 8008336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	61bb      	str	r3, [r7, #24]
 8008348:	e7fe      	b.n	8008348 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800834a:	f001 fb4f 	bl	80099ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008352:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	2b00      	cmp	r3, #0
 8008358:	d024      	beq.n	80083a4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	1e5a      	subs	r2, r3, #1
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d104      	bne.n	8008374 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800836a:	f001 f99b 	bl	80096a4 <pvTaskIncrementMutexHeldCount>
 800836e:	4602      	mov	r2, r0
 8008370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008372:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00f      	beq.n	800839c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	3310      	adds	r3, #16
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fe1f 	bl	8008fc4 <xTaskRemoveFromEventList>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d007      	beq.n	800839c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800838c:	4b53      	ldr	r3, [pc, #332]	; (80084dc <xQueueSemaphoreTake+0x20c>)
 800838e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800839c:	f001 fb54 	bl	8009a48 <vPortExitCritical>
				return pdPASS;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e096      	b.n	80084d2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d110      	bne.n	80083cc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d009      	beq.n	80083c4 <xQueueSemaphoreTake+0xf4>
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	e7fe      	b.n	80083c2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80083c4:	f001 fb40 	bl	8009a48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e082      	b.n	80084d2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083d2:	f107 030c 	add.w	r3, r7, #12
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fe56 	bl	8009088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083e0:	f001 fb32 	bl	8009a48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083e4:	f000 fc0e 	bl	8008c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083e8:	f001 fb00 	bl	80099ec <vPortEnterCritical>
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083f2:	b25b      	sxtb	r3, r3
 80083f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f8:	d103      	bne.n	8008402 <xQueueSemaphoreTake+0x132>
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008408:	b25b      	sxtb	r3, r3
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840e:	d103      	bne.n	8008418 <xQueueSemaphoreTake+0x148>
 8008410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008418:	f001 fb16 	bl	8009a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800841c:	463a      	mov	r2, r7
 800841e:	f107 030c 	add.w	r3, r7, #12
 8008422:	4611      	mov	r1, r2
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fe45 	bl	80090b4 <xTaskCheckForTimeOut>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d132      	bne.n	8008496 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008432:	f000 f9cc 	bl	80087ce <prvIsQueueEmpty>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d026      	beq.n	800848a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d109      	bne.n	8008458 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008444:	f001 fad2 	bl	80099ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 ff8d 	bl	800936c <xTaskPriorityInherit>
 8008452:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008454:	f001 faf8 	bl	8009a48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845a:	3324      	adds	r3, #36	; 0x24
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	4611      	mov	r1, r2
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fd8b 	bl	8008f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008468:	f000 f95f 	bl	800872a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800846c:	f000 fbd8 	bl	8008c20 <xTaskResumeAll>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	f47f af69 	bne.w	800834a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008478:	4b18      	ldr	r3, [pc, #96]	; (80084dc <xQueueSemaphoreTake+0x20c>)
 800847a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	e75f      	b.n	800834a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800848a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800848c:	f000 f94d 	bl	800872a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008490:	f000 fbc6 	bl	8008c20 <xTaskResumeAll>
 8008494:	e759      	b.n	800834a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008498:	f000 f947 	bl	800872a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800849c:	f000 fbc0 	bl	8008c20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084a2:	f000 f994 	bl	80087ce <prvIsQueueEmpty>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f43f af4e 	beq.w	800834a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00d      	beq.n	80084d0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80084b4:	f001 fa9a 	bl	80099ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80084b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084ba:	f000 f88e 	bl	80085da <prvGetDisinheritPriorityAfterTimeout>
 80084be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80084c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084c6:	4618      	mov	r0, r3
 80084c8:	f001 f854 	bl	8009574 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80084cc:	f001 fabc 	bl	8009a48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3738      	adds	r7, #56	; 0x38
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	e000ed04 	.word	0xe000ed04

080084e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08e      	sub	sp, #56	; 0x38
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d109      	bne.n	800850a <xQueueReceiveFromISR+0x2a>
 80084f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	623b      	str	r3, [r7, #32]
 8008508:	e7fe      	b.n	8008508 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d103      	bne.n	8008518 <xQueueReceiveFromISR+0x38>
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <xQueueReceiveFromISR+0x3c>
 8008518:	2301      	movs	r3, #1
 800851a:	e000      	b.n	800851e <xQueueReceiveFromISR+0x3e>
 800851c:	2300      	movs	r3, #0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <xQueueReceiveFromISR+0x56>
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	61fb      	str	r3, [r7, #28]
 8008534:	e7fe      	b.n	8008534 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008536:	f001 fb35 	bl	8009ba4 <vPortValidateInterruptPriority>
	__asm volatile
 800853a:	f3ef 8211 	mrs	r2, BASEPRI
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	61ba      	str	r2, [r7, #24]
 8008550:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008552:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008554:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800855c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855e:	2b00      	cmp	r3, #0
 8008560:	d02f      	beq.n	80085c2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008570:	f000 f8b5 	bl	80086de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	1e5a      	subs	r2, r3, #1
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800857c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008584:	d112      	bne.n	80085ac <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d016      	beq.n	80085bc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	3310      	adds	r3, #16
 8008592:	4618      	mov	r0, r3
 8008594:	f000 fd16 	bl	8008fc4 <xTaskRemoveFromEventList>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00e      	beq.n	80085bc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	e007      	b.n	80085bc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80085ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085b0:	3301      	adds	r3, #1
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	b25a      	sxtb	r2, r3
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80085bc:	2301      	movs	r3, #1
 80085be:	637b      	str	r3, [r7, #52]	; 0x34
 80085c0:	e001      	b.n	80085c6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	637b      	str	r3, [r7, #52]	; 0x34
 80085c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3738      	adds	r7, #56	; 0x38
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80085da:	b480      	push	{r7}
 80085dc:	b085      	sub	sp, #20
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d006      	beq.n	80085f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f1c3 0307 	rsb	r3, r3, #7
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	e001      	b.n	80085fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80085fc:	68fb      	ldr	r3, [r7, #12]
	}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b086      	sub	sp, #24
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008616:	2300      	movs	r3, #0
 8008618:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10d      	bne.n	8008644 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d14d      	bne.n	80086cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	4618      	mov	r0, r3
 8008636:	f000 ff19 	bl	800946c <xTaskPriorityDisinherit>
 800863a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	609a      	str	r2, [r3, #8]
 8008642:	e043      	b.n	80086cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d119      	bne.n	800867e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6858      	ldr	r0, [r3, #4]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	461a      	mov	r2, r3
 8008654:	68b9      	ldr	r1, [r7, #8]
 8008656:	f002 fded 	bl	800b234 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	441a      	add	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	429a      	cmp	r2, r3
 8008672:	d32b      	bcc.n	80086cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	605a      	str	r2, [r3, #4]
 800867c:	e026      	b.n	80086cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	68d8      	ldr	r0, [r3, #12]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	461a      	mov	r2, r3
 8008688:	68b9      	ldr	r1, [r7, #8]
 800868a:	f002 fdd3 	bl	800b234 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	425b      	negs	r3, r3
 8008698:	441a      	add	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d207      	bcs.n	80086ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	689a      	ldr	r2, [r3, #8]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	425b      	negs	r3, r3
 80086b4:	441a      	add	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d105      	bne.n	80086cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80086d4:	697b      	ldr	r3, [r7, #20]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d018      	beq.n	8008722 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68da      	ldr	r2, [r3, #12]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f8:	441a      	add	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	429a      	cmp	r2, r3
 8008708:	d303      	bcc.n	8008712 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68d9      	ldr	r1, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871a:	461a      	mov	r2, r3
 800871c:	6838      	ldr	r0, [r7, #0]
 800871e:	f002 fd89 	bl	800b234 <memcpy>
	}
}
 8008722:	bf00      	nop
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008732:	f001 f95b 	bl	80099ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800873c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800873e:	e011      	b.n	8008764 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	d012      	beq.n	800876e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3324      	adds	r3, #36	; 0x24
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fc39 	bl	8008fc4 <xTaskRemoveFromEventList>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008758:	f000 fd0c 	bl	8009174 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	3b01      	subs	r3, #1
 8008760:	b2db      	uxtb	r3, r3
 8008762:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008768:	2b00      	cmp	r3, #0
 800876a:	dce9      	bgt.n	8008740 <prvUnlockQueue+0x16>
 800876c:	e000      	b.n	8008770 <prvUnlockQueue+0x46>
					break;
 800876e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	22ff      	movs	r2, #255	; 0xff
 8008774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008778:	f001 f966 	bl	8009a48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800877c:	f001 f936 	bl	80099ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008786:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008788:	e011      	b.n	80087ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d012      	beq.n	80087b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	3310      	adds	r3, #16
 8008796:	4618      	mov	r0, r3
 8008798:	f000 fc14 	bl	8008fc4 <xTaskRemoveFromEventList>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087a2:	f000 fce7 	bl	8009174 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	dce9      	bgt.n	800878a <prvUnlockQueue+0x60>
 80087b6:	e000      	b.n	80087ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	22ff      	movs	r2, #255	; 0xff
 80087be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087c2:	f001 f941 	bl	8009a48 <vPortExitCritical>
}
 80087c6:	bf00      	nop
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087d6:	f001 f909 	bl	80099ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d102      	bne.n	80087e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087e2:	2301      	movs	r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	e001      	b.n	80087ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087ec:	f001 f92c 	bl	8009a48 <vPortExitCritical>

	return xReturn;
 80087f0:	68fb      	ldr	r3, [r7, #12]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008802:	f001 f8f3 	bl	80099ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880e:	429a      	cmp	r2, r3
 8008810:	d102      	bne.n	8008818 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008812:	2301      	movs	r3, #1
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	e001      	b.n	800881c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800881c:	f001 f914 	bl	8009a48 <vPortExitCritical>

	return xReturn;
 8008820:	68fb      	ldr	r3, [r7, #12]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800882a:	b580      	push	{r7, lr}
 800882c:	b08e      	sub	sp, #56	; 0x38
 800882e:	af04      	add	r7, sp, #16
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	607a      	str	r2, [r7, #4]
 8008836:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883a:	2b00      	cmp	r3, #0
 800883c:	d109      	bne.n	8008852 <xTaskCreateStatic+0x28>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	623b      	str	r3, [r7, #32]
 8008850:	e7fe      	b.n	8008850 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008854:	2b00      	cmp	r3, #0
 8008856:	d109      	bne.n	800886c <xTaskCreateStatic+0x42>
 8008858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	61fb      	str	r3, [r7, #28]
 800886a:	e7fe      	b.n	800886a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800886c:	2354      	movs	r3, #84	; 0x54
 800886e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	2b54      	cmp	r3, #84	; 0x54
 8008874:	d009      	beq.n	800888a <xTaskCreateStatic+0x60>
 8008876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	61bb      	str	r3, [r7, #24]
 8008888:	e7fe      	b.n	8008888 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800888a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888e:	2b00      	cmp	r3, #0
 8008890:	d01e      	beq.n	80088d0 <xTaskCreateStatic+0xa6>
 8008892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008894:	2b00      	cmp	r3, #0
 8008896:	d01b      	beq.n	80088d0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	2202      	movs	r2, #2
 80088a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088aa:	2300      	movs	r3, #0
 80088ac:	9303      	str	r3, [sp, #12]
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	9302      	str	r3, [sp, #8]
 80088b2:	f107 0314 	add.w	r3, r7, #20
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f000 f850 	bl	8008968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088ca:	f000 f8d3 	bl	8008a74 <prvAddNewTaskToReadyList>
 80088ce:	e001      	b.n	80088d4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088d4:	697b      	ldr	r3, [r7, #20]
	}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3728      	adds	r7, #40	; 0x28
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b08c      	sub	sp, #48	; 0x30
 80088e2:	af04      	add	r7, sp, #16
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	603b      	str	r3, [r7, #0]
 80088ea:	4613      	mov	r3, r2
 80088ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088ee:	88fb      	ldrh	r3, [r7, #6]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 f994 	bl	8009c20 <pvPortMalloc>
 80088f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00e      	beq.n	800891e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008900:	2054      	movs	r0, #84	; 0x54
 8008902:	f001 f98d 	bl	8009c20 <pvPortMalloc>
 8008906:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	631a      	str	r2, [r3, #48]	; 0x30
 8008914:	e005      	b.n	8008922 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008916:	6978      	ldr	r0, [r7, #20]
 8008918:	f001 fa44 	bl	8009da4 <vPortFree>
 800891c:	e001      	b.n	8008922 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800891e:	2300      	movs	r3, #0
 8008920:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d017      	beq.n	8008958 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008930:	88fa      	ldrh	r2, [r7, #6]
 8008932:	2300      	movs	r3, #0
 8008934:	9303      	str	r3, [sp, #12]
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	9302      	str	r3, [sp, #8]
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	68b9      	ldr	r1, [r7, #8]
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 f80e 	bl	8008968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800894c:	69f8      	ldr	r0, [r7, #28]
 800894e:	f000 f891 	bl	8008a74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008952:	2301      	movs	r3, #1
 8008954:	61bb      	str	r3, [r7, #24]
 8008956:	e002      	b.n	800895e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008958:	f04f 33ff 	mov.w	r3, #4294967295
 800895c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800895e:	69bb      	ldr	r3, [r7, #24]
	}
 8008960:	4618      	mov	r0, r3
 8008962:	3720      	adds	r7, #32
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b088      	sub	sp, #32
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008980:	3b01      	subs	r3, #1
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	f023 0307 	bic.w	r3, r3, #7
 800898e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b00      	cmp	r3, #0
 8008998:	d009      	beq.n	80089ae <prvInitialiseNewTask+0x46>
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	e7fe      	b.n	80089ac <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d01f      	beq.n	80089f4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089b4:	2300      	movs	r3, #0
 80089b6:	61fb      	str	r3, [r7, #28]
 80089b8:	e012      	b.n	80089e0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	4413      	add	r3, r2
 80089c0:	7819      	ldrb	r1, [r3, #0]
 80089c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	4413      	add	r3, r2
 80089c8:	3334      	adds	r3, #52	; 0x34
 80089ca:	460a      	mov	r2, r1
 80089cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	4413      	add	r3, r2
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d006      	beq.n	80089e8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	3301      	adds	r3, #1
 80089de:	61fb      	str	r3, [r7, #28]
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	2b0f      	cmp	r3, #15
 80089e4:	d9e9      	bls.n	80089ba <prvInitialiseNewTask+0x52>
 80089e6:	e000      	b.n	80089ea <prvInitialiseNewTask+0x82>
			{
				break;
 80089e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089f2:	e003      	b.n	80089fc <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	2b06      	cmp	r3, #6
 8008a00:	d901      	bls.n	8008a06 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a02:	2306      	movs	r3, #6
 8008a04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a10:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a14:	2200      	movs	r2, #0
 8008a16:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fe ff95 	bl	800794c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	3318      	adds	r3, #24
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe ff90 	bl	800794c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a34:	f1c3 0207 	rsb	r2, r3, #7
 8008a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	2200      	movs	r2, #0
 8008a46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	68f9      	ldr	r1, [r7, #12]
 8008a54:	69b8      	ldr	r0, [r7, #24]
 8008a56:	f000 fe9f 	bl	8009798 <pxPortInitialiseStack>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a6c:	bf00      	nop
 8008a6e:	3720      	adds	r7, #32
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a7c:	f000 ffb6 	bl	80099ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a80:	4b2a      	ldr	r3, [pc, #168]	; (8008b2c <prvAddNewTaskToReadyList+0xb8>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3301      	adds	r3, #1
 8008a86:	4a29      	ldr	r2, [pc, #164]	; (8008b2c <prvAddNewTaskToReadyList+0xb8>)
 8008a88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a8a:	4b29      	ldr	r3, [pc, #164]	; (8008b30 <prvAddNewTaskToReadyList+0xbc>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d109      	bne.n	8008aa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a92:	4a27      	ldr	r2, [pc, #156]	; (8008b30 <prvAddNewTaskToReadyList+0xbc>)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a98:	4b24      	ldr	r3, [pc, #144]	; (8008b2c <prvAddNewTaskToReadyList+0xb8>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d110      	bne.n	8008ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008aa0:	f000 fb8c 	bl	80091bc <prvInitialiseTaskLists>
 8008aa4:	e00d      	b.n	8008ac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008aa6:	4b23      	ldr	r3, [pc, #140]	; (8008b34 <prvAddNewTaskToReadyList+0xc0>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d109      	bne.n	8008ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008aae:	4b20      	ldr	r3, [pc, #128]	; (8008b30 <prvAddNewTaskToReadyList+0xbc>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d802      	bhi.n	8008ac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008abc:	4a1c      	ldr	r2, [pc, #112]	; (8008b30 <prvAddNewTaskToReadyList+0xbc>)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ac2:	4b1d      	ldr	r3, [pc, #116]	; (8008b38 <prvAddNewTaskToReadyList+0xc4>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	4a1b      	ldr	r2, [pc, #108]	; (8008b38 <prvAddNewTaskToReadyList+0xc4>)
 8008aca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	409a      	lsls	r2, r3
 8008ad4:	4b19      	ldr	r3, [pc, #100]	; (8008b3c <prvAddNewTaskToReadyList+0xc8>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	4a18      	ldr	r2, [pc, #96]	; (8008b3c <prvAddNewTaskToReadyList+0xc8>)
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <prvAddNewTaskToReadyList+0xcc>)
 8008aec:	441a      	add	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3304      	adds	r3, #4
 8008af2:	4619      	mov	r1, r3
 8008af4:	4610      	mov	r0, r2
 8008af6:	f7fe ff36 	bl	8007966 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008afa:	f000 ffa5 	bl	8009a48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008afe:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <prvAddNewTaskToReadyList+0xc0>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00e      	beq.n	8008b24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b06:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <prvAddNewTaskToReadyList+0xbc>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d207      	bcs.n	8008b24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b14:	4b0b      	ldr	r3, [pc, #44]	; (8008b44 <prvAddNewTaskToReadyList+0xd0>)
 8008b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b24:	bf00      	nop
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	200003f4 	.word	0x200003f4
 8008b30:	200002f4 	.word	0x200002f4
 8008b34:	20000400 	.word	0x20000400
 8008b38:	20000410 	.word	0x20000410
 8008b3c:	200003fc 	.word	0x200003fc
 8008b40:	200002f8 	.word	0x200002f8
 8008b44:	e000ed04 	.word	0xe000ed04

08008b48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08a      	sub	sp, #40	; 0x28
 8008b4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b52:	2300      	movs	r3, #0
 8008b54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b56:	463a      	mov	r2, r7
 8008b58:	1d39      	adds	r1, r7, #4
 8008b5a:	f107 0308 	add.w	r3, r7, #8
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7f8 fd76 	bl	8001650 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	9202      	str	r2, [sp, #8]
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	2300      	movs	r3, #0
 8008b74:	460a      	mov	r2, r1
 8008b76:	491d      	ldr	r1, [pc, #116]	; (8008bec <vTaskStartScheduler+0xa4>)
 8008b78:	481d      	ldr	r0, [pc, #116]	; (8008bf0 <vTaskStartScheduler+0xa8>)
 8008b7a:	f7ff fe56 	bl	800882a <xTaskCreateStatic>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	4b1c      	ldr	r3, [pc, #112]	; (8008bf4 <vTaskStartScheduler+0xac>)
 8008b82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b84:	4b1b      	ldr	r3, [pc, #108]	; (8008bf4 <vTaskStartScheduler+0xac>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d002      	beq.n	8008b92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	e001      	b.n	8008b96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d115      	bne.n	8008bc8 <vTaskStartScheduler+0x80>
 8008b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bae:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <vTaskStartScheduler+0xb0>)
 8008bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bb6:	4b11      	ldr	r3, [pc, #68]	; (8008bfc <vTaskStartScheduler+0xb4>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008bbc:	4b10      	ldr	r3, [pc, #64]	; (8008c00 <vTaskStartScheduler+0xb8>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008bc2:	f000 fe75 	bl	80098b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008bc6:	e00d      	b.n	8008be4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bce:	d109      	bne.n	8008be4 <vTaskStartScheduler+0x9c>
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	e7fe      	b.n	8008be2 <vTaskStartScheduler+0x9a>
}
 8008be4:	bf00      	nop
 8008be6:	3718      	adds	r7, #24
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	0800c38c 	.word	0x0800c38c
 8008bf0:	0800918d 	.word	0x0800918d
 8008bf4:	20000418 	.word	0x20000418
 8008bf8:	20000414 	.word	0x20000414
 8008bfc:	20000400 	.word	0x20000400
 8008c00:	200003f8 	.word	0x200003f8

08008c04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008c08:	4b04      	ldr	r3, [pc, #16]	; (8008c1c <vTaskSuspendAll+0x18>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	4a03      	ldr	r2, [pc, #12]	; (8008c1c <vTaskSuspendAll+0x18>)
 8008c10:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008c12:	bf00      	nop
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	2000041c 	.word	0x2000041c

08008c20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c2e:	4b41      	ldr	r3, [pc, #260]	; (8008d34 <xTaskResumeAll+0x114>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d109      	bne.n	8008c4a <xTaskResumeAll+0x2a>
 8008c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	e7fe      	b.n	8008c48 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c4a:	f000 fecf 	bl	80099ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c4e:	4b39      	ldr	r3, [pc, #228]	; (8008d34 <xTaskResumeAll+0x114>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	4a37      	ldr	r2, [pc, #220]	; (8008d34 <xTaskResumeAll+0x114>)
 8008c56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c58:	4b36      	ldr	r3, [pc, #216]	; (8008d34 <xTaskResumeAll+0x114>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d161      	bne.n	8008d24 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c60:	4b35      	ldr	r3, [pc, #212]	; (8008d38 <xTaskResumeAll+0x118>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d05d      	beq.n	8008d24 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c68:	e02e      	b.n	8008cc8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c6a:	4b34      	ldr	r3, [pc, #208]	; (8008d3c <xTaskResumeAll+0x11c>)
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	3318      	adds	r3, #24
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe fed2 	bl	8007a20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe fecd 	bl	8007a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	409a      	lsls	r2, r3
 8008c8e:	4b2c      	ldr	r3, [pc, #176]	; (8008d40 <xTaskResumeAll+0x120>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	4a2a      	ldr	r2, [pc, #168]	; (8008d40 <xTaskResumeAll+0x120>)
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4a27      	ldr	r2, [pc, #156]	; (8008d44 <xTaskResumeAll+0x124>)
 8008ca6:	441a      	add	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	3304      	adds	r3, #4
 8008cac:	4619      	mov	r1, r3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	f7fe fe59 	bl	8007966 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb8:	4b23      	ldr	r3, [pc, #140]	; (8008d48 <xTaskResumeAll+0x128>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d302      	bcc.n	8008cc8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008cc2:	4b22      	ldr	r3, [pc, #136]	; (8008d4c <xTaskResumeAll+0x12c>)
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cc8:	4b1c      	ldr	r3, [pc, #112]	; (8008d3c <xTaskResumeAll+0x11c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1cc      	bne.n	8008c6a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008cd6:	f000 fb0b 	bl	80092f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008cda:	4b1d      	ldr	r3, [pc, #116]	; (8008d50 <xTaskResumeAll+0x130>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d010      	beq.n	8008d08 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ce6:	f000 f837 	bl	8008d58 <xTaskIncrementTick>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008cf0:	4b16      	ldr	r3, [pc, #88]	; (8008d4c <xTaskResumeAll+0x12c>)
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1f1      	bne.n	8008ce6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008d02:	4b13      	ldr	r3, [pc, #76]	; (8008d50 <xTaskResumeAll+0x130>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d08:	4b10      	ldr	r3, [pc, #64]	; (8008d4c <xTaskResumeAll+0x12c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d009      	beq.n	8008d24 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d10:	2301      	movs	r3, #1
 8008d12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d14:	4b0f      	ldr	r3, [pc, #60]	; (8008d54 <xTaskResumeAll+0x134>)
 8008d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d1a:	601a      	str	r2, [r3, #0]
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d24:	f000 fe90 	bl	8009a48 <vPortExitCritical>

	return xAlreadyYielded;
 8008d28:	68bb      	ldr	r3, [r7, #8]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	2000041c 	.word	0x2000041c
 8008d38:	200003f4 	.word	0x200003f4
 8008d3c:	200003b4 	.word	0x200003b4
 8008d40:	200003fc 	.word	0x200003fc
 8008d44:	200002f8 	.word	0x200002f8
 8008d48:	200002f4 	.word	0x200002f4
 8008d4c:	20000408 	.word	0x20000408
 8008d50:	20000404 	.word	0x20000404
 8008d54:	e000ed04 	.word	0xe000ed04

08008d58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d62:	4b4e      	ldr	r3, [pc, #312]	; (8008e9c <xTaskIncrementTick+0x144>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f040 8087 	bne.w	8008e7a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d6c:	4b4c      	ldr	r3, [pc, #304]	; (8008ea0 <xTaskIncrementTick+0x148>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3301      	adds	r3, #1
 8008d72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d74:	4a4a      	ldr	r2, [pc, #296]	; (8008ea0 <xTaskIncrementTick+0x148>)
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d11f      	bne.n	8008dc0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d80:	4b48      	ldr	r3, [pc, #288]	; (8008ea4 <xTaskIncrementTick+0x14c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d009      	beq.n	8008d9e <xTaskIncrementTick+0x46>
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	e7fe      	b.n	8008d9c <xTaskIncrementTick+0x44>
 8008d9e:	4b41      	ldr	r3, [pc, #260]	; (8008ea4 <xTaskIncrementTick+0x14c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	4b40      	ldr	r3, [pc, #256]	; (8008ea8 <xTaskIncrementTick+0x150>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a3e      	ldr	r2, [pc, #248]	; (8008ea4 <xTaskIncrementTick+0x14c>)
 8008daa:	6013      	str	r3, [r2, #0]
 8008dac:	4a3e      	ldr	r2, [pc, #248]	; (8008ea8 <xTaskIncrementTick+0x150>)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	4b3e      	ldr	r3, [pc, #248]	; (8008eac <xTaskIncrementTick+0x154>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3301      	adds	r3, #1
 8008db8:	4a3c      	ldr	r2, [pc, #240]	; (8008eac <xTaskIncrementTick+0x154>)
 8008dba:	6013      	str	r3, [r2, #0]
 8008dbc:	f000 fa98 	bl	80092f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008dc0:	4b3b      	ldr	r3, [pc, #236]	; (8008eb0 <xTaskIncrementTick+0x158>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d348      	bcc.n	8008e5c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dca:	4b36      	ldr	r3, [pc, #216]	; (8008ea4 <xTaskIncrementTick+0x14c>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d104      	bne.n	8008dde <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd4:	4b36      	ldr	r3, [pc, #216]	; (8008eb0 <xTaskIncrementTick+0x158>)
 8008dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dda:	601a      	str	r2, [r3, #0]
					break;
 8008ddc:	e03e      	b.n	8008e5c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dde:	4b31      	ldr	r3, [pc, #196]	; (8008ea4 <xTaskIncrementTick+0x14c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d203      	bcs.n	8008dfe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008df6:	4a2e      	ldr	r2, [pc, #184]	; (8008eb0 <xTaskIncrementTick+0x158>)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008dfc:	e02e      	b.n	8008e5c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	3304      	adds	r3, #4
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe fe0c 	bl	8007a20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d004      	beq.n	8008e1a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	3318      	adds	r3, #24
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe fe03 	bl	8007a20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1e:	2201      	movs	r2, #1
 8008e20:	409a      	lsls	r2, r3
 8008e22:	4b24      	ldr	r3, [pc, #144]	; (8008eb4 <xTaskIncrementTick+0x15c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	4a22      	ldr	r2, [pc, #136]	; (8008eb4 <xTaskIncrementTick+0x15c>)
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4a1f      	ldr	r2, [pc, #124]	; (8008eb8 <xTaskIncrementTick+0x160>)
 8008e3a:	441a      	add	r2, r3
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4619      	mov	r1, r3
 8008e42:	4610      	mov	r0, r2
 8008e44:	f7fe fd8f 	bl	8007966 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4c:	4b1b      	ldr	r3, [pc, #108]	; (8008ebc <xTaskIncrementTick+0x164>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d3b9      	bcc.n	8008dca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008e56:	2301      	movs	r3, #1
 8008e58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e5a:	e7b6      	b.n	8008dca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e5c:	4b17      	ldr	r3, [pc, #92]	; (8008ebc <xTaskIncrementTick+0x164>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e62:	4915      	ldr	r1, [pc, #84]	; (8008eb8 <xTaskIncrementTick+0x160>)
 8008e64:	4613      	mov	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d907      	bls.n	8008e84 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008e74:	2301      	movs	r3, #1
 8008e76:	617b      	str	r3, [r7, #20]
 8008e78:	e004      	b.n	8008e84 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008e7a:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <xTaskIncrementTick+0x168>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	4a0f      	ldr	r2, [pc, #60]	; (8008ec0 <xTaskIncrementTick+0x168>)
 8008e82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008e84:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <xTaskIncrementTick+0x16c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e90:	697b      	ldr	r3, [r7, #20]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3718      	adds	r7, #24
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	2000041c 	.word	0x2000041c
 8008ea0:	200003f8 	.word	0x200003f8
 8008ea4:	200003ac 	.word	0x200003ac
 8008ea8:	200003b0 	.word	0x200003b0
 8008eac:	2000040c 	.word	0x2000040c
 8008eb0:	20000414 	.word	0x20000414
 8008eb4:	200003fc 	.word	0x200003fc
 8008eb8:	200002f8 	.word	0x200002f8
 8008ebc:	200002f4 	.word	0x200002f4
 8008ec0:	20000404 	.word	0x20000404
 8008ec4:	20000408 	.word	0x20000408

08008ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ece:	4b26      	ldr	r3, [pc, #152]	; (8008f68 <vTaskSwitchContext+0xa0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ed6:	4b25      	ldr	r3, [pc, #148]	; (8008f6c <vTaskSwitchContext+0xa4>)
 8008ed8:	2201      	movs	r2, #1
 8008eda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008edc:	e03e      	b.n	8008f5c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008ede:	4b23      	ldr	r3, [pc, #140]	; (8008f6c <vTaskSwitchContext+0xa4>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee4:	4b22      	ldr	r3, [pc, #136]	; (8008f70 <vTaskSwitchContext+0xa8>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	fab3 f383 	clz	r3, r3
 8008ef0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008ef2:	7afb      	ldrb	r3, [r7, #11]
 8008ef4:	f1c3 031f 	rsb	r3, r3, #31
 8008ef8:	617b      	str	r3, [r7, #20]
 8008efa:	491e      	ldr	r1, [pc, #120]	; (8008f74 <vTaskSwitchContext+0xac>)
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	4613      	mov	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	440b      	add	r3, r1
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d109      	bne.n	8008f22 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	607b      	str	r3, [r7, #4]
 8008f20:	e7fe      	b.n	8008f20 <vTaskSwitchContext+0x58>
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	4613      	mov	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4a11      	ldr	r2, [pc, #68]	; (8008f74 <vTaskSwitchContext+0xac>)
 8008f2e:	4413      	add	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	605a      	str	r2, [r3, #4]
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	3308      	adds	r3, #8
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d104      	bne.n	8008f52 <vTaskSwitchContext+0x8a>
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	605a      	str	r2, [r3, #4]
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	4a07      	ldr	r2, [pc, #28]	; (8008f78 <vTaskSwitchContext+0xb0>)
 8008f5a:	6013      	str	r3, [r2, #0]
}
 8008f5c:	bf00      	nop
 8008f5e:	371c      	adds	r7, #28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	2000041c 	.word	0x2000041c
 8008f6c:	20000408 	.word	0x20000408
 8008f70:	200003fc 	.word	0x200003fc
 8008f74:	200002f8 	.word	0x200002f8
 8008f78:	200002f4 	.word	0x200002f4

08008f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d109      	bne.n	8008fa0 <vTaskPlaceOnEventList+0x24>
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	e7fe      	b.n	8008f9e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fa0:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <vTaskPlaceOnEventList+0x44>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3318      	adds	r3, #24
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7fe fd00 	bl	80079ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008fae:	2101      	movs	r1, #1
 8008fb0:	6838      	ldr	r0, [r7, #0]
 8008fb2:	f000 fb8b 	bl	80096cc <prvAddCurrentTaskToDelayedList>
}
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	200002f4 	.word	0x200002f4

08008fc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d109      	bne.n	8008fee <xTaskRemoveFromEventList+0x2a>
 8008fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	e7fe      	b.n	8008fec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	3318      	adds	r3, #24
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe fd14 	bl	8007a20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ff8:	4b1d      	ldr	r3, [pc, #116]	; (8009070 <xTaskRemoveFromEventList+0xac>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d11c      	bne.n	800903a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	3304      	adds	r3, #4
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe fd0b 	bl	8007a20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900e:	2201      	movs	r2, #1
 8009010:	409a      	lsls	r2, r3
 8009012:	4b18      	ldr	r3, [pc, #96]	; (8009074 <xTaskRemoveFromEventList+0xb0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4313      	orrs	r3, r2
 8009018:	4a16      	ldr	r2, [pc, #88]	; (8009074 <xTaskRemoveFromEventList+0xb0>)
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009020:	4613      	mov	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4a13      	ldr	r2, [pc, #76]	; (8009078 <xTaskRemoveFromEventList+0xb4>)
 800902a:	441a      	add	r2, r3
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	3304      	adds	r3, #4
 8009030:	4619      	mov	r1, r3
 8009032:	4610      	mov	r0, r2
 8009034:	f7fe fc97 	bl	8007966 <vListInsertEnd>
 8009038:	e005      	b.n	8009046 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	3318      	adds	r3, #24
 800903e:	4619      	mov	r1, r3
 8009040:	480e      	ldr	r0, [pc, #56]	; (800907c <xTaskRemoveFromEventList+0xb8>)
 8009042:	f7fe fc90 	bl	8007966 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904a:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <xTaskRemoveFromEventList+0xbc>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009050:	429a      	cmp	r2, r3
 8009052:	d905      	bls.n	8009060 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009054:	2301      	movs	r3, #1
 8009056:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009058:	4b0a      	ldr	r3, [pc, #40]	; (8009084 <xTaskRemoveFromEventList+0xc0>)
 800905a:	2201      	movs	r2, #1
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	e001      	b.n	8009064 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009064:	697b      	ldr	r3, [r7, #20]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	2000041c 	.word	0x2000041c
 8009074:	200003fc 	.word	0x200003fc
 8009078:	200002f8 	.word	0x200002f8
 800907c:	200003b4 	.word	0x200003b4
 8009080:	200002f4 	.word	0x200002f4
 8009084:	20000408 	.word	0x20000408

08009088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009090:	4b06      	ldr	r3, [pc, #24]	; (80090ac <vTaskInternalSetTimeOutState+0x24>)
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009098:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <vTaskInternalSetTimeOutState+0x28>)
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	605a      	str	r2, [r3, #4]
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	2000040c 	.word	0x2000040c
 80090b0:	200003f8 	.word	0x200003f8

080090b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b088      	sub	sp, #32
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d109      	bne.n	80090d8 <xTaskCheckForTimeOut+0x24>
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	e7fe      	b.n	80090d6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d109      	bne.n	80090f2 <xTaskCheckForTimeOut+0x3e>
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	e7fe      	b.n	80090f0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80090f2:	f000 fc7b 	bl	80099ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80090f6:	4b1d      	ldr	r3, [pc, #116]	; (800916c <xTaskCheckForTimeOut+0xb8>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d102      	bne.n	8009116 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009110:	2300      	movs	r3, #0
 8009112:	61fb      	str	r3, [r7, #28]
 8009114:	e023      	b.n	800915e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	4b15      	ldr	r3, [pc, #84]	; (8009170 <xTaskCheckForTimeOut+0xbc>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d007      	beq.n	8009132 <xTaskCheckForTimeOut+0x7e>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	69ba      	ldr	r2, [r7, #24]
 8009128:	429a      	cmp	r2, r3
 800912a:	d302      	bcc.n	8009132 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800912c:	2301      	movs	r3, #1
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	e015      	b.n	800915e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	429a      	cmp	r2, r3
 800913a:	d20b      	bcs.n	8009154 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	1ad2      	subs	r2, r2, r3
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff ff9d 	bl	8009088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800914e:	2300      	movs	r3, #0
 8009150:	61fb      	str	r3, [r7, #28]
 8009152:	e004      	b.n	800915e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2200      	movs	r2, #0
 8009158:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800915a:	2301      	movs	r3, #1
 800915c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800915e:	f000 fc73 	bl	8009a48 <vPortExitCritical>

	return xReturn;
 8009162:	69fb      	ldr	r3, [r7, #28]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3720      	adds	r7, #32
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	200003f8 	.word	0x200003f8
 8009170:	2000040c 	.word	0x2000040c

08009174 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009174:	b480      	push	{r7}
 8009176:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009178:	4b03      	ldr	r3, [pc, #12]	; (8009188 <vTaskMissedYield+0x14>)
 800917a:	2201      	movs	r2, #1
 800917c:	601a      	str	r2, [r3, #0]
}
 800917e:	bf00      	nop
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	20000408 	.word	0x20000408

0800918c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009194:	f000 f852 	bl	800923c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009198:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <prvIdleTask+0x28>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d9f9      	bls.n	8009194 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091a0:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <prvIdleTask+0x2c>)
 80091a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091b0:	e7f0      	b.n	8009194 <prvIdleTask+0x8>
 80091b2:	bf00      	nop
 80091b4:	200002f8 	.word	0x200002f8
 80091b8:	e000ed04 	.word	0xe000ed04

080091bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091c2:	2300      	movs	r3, #0
 80091c4:	607b      	str	r3, [r7, #4]
 80091c6:	e00c      	b.n	80091e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4a12      	ldr	r2, [pc, #72]	; (800921c <prvInitialiseTaskLists+0x60>)
 80091d4:	4413      	add	r3, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fe fb98 	bl	800790c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3301      	adds	r3, #1
 80091e0:	607b      	str	r3, [r7, #4]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b06      	cmp	r3, #6
 80091e6:	d9ef      	bls.n	80091c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80091e8:	480d      	ldr	r0, [pc, #52]	; (8009220 <prvInitialiseTaskLists+0x64>)
 80091ea:	f7fe fb8f 	bl	800790c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091ee:	480d      	ldr	r0, [pc, #52]	; (8009224 <prvInitialiseTaskLists+0x68>)
 80091f0:	f7fe fb8c 	bl	800790c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091f4:	480c      	ldr	r0, [pc, #48]	; (8009228 <prvInitialiseTaskLists+0x6c>)
 80091f6:	f7fe fb89 	bl	800790c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091fa:	480c      	ldr	r0, [pc, #48]	; (800922c <prvInitialiseTaskLists+0x70>)
 80091fc:	f7fe fb86 	bl	800790c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009200:	480b      	ldr	r0, [pc, #44]	; (8009230 <prvInitialiseTaskLists+0x74>)
 8009202:	f7fe fb83 	bl	800790c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009206:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <prvInitialiseTaskLists+0x78>)
 8009208:	4a05      	ldr	r2, [pc, #20]	; (8009220 <prvInitialiseTaskLists+0x64>)
 800920a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800920c:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <prvInitialiseTaskLists+0x7c>)
 800920e:	4a05      	ldr	r2, [pc, #20]	; (8009224 <prvInitialiseTaskLists+0x68>)
 8009210:	601a      	str	r2, [r3, #0]
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	200002f8 	.word	0x200002f8
 8009220:	20000384 	.word	0x20000384
 8009224:	20000398 	.word	0x20000398
 8009228:	200003b4 	.word	0x200003b4
 800922c:	200003c8 	.word	0x200003c8
 8009230:	200003e0 	.word	0x200003e0
 8009234:	200003ac 	.word	0x200003ac
 8009238:	200003b0 	.word	0x200003b0

0800923c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009242:	e019      	b.n	8009278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009244:	f000 fbd2 	bl	80099ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009248:	4b0f      	ldr	r3, [pc, #60]	; (8009288 <prvCheckTasksWaitingTermination+0x4c>)
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3304      	adds	r3, #4
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe fbe3 	bl	8007a20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800925a:	4b0c      	ldr	r3, [pc, #48]	; (800928c <prvCheckTasksWaitingTermination+0x50>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3b01      	subs	r3, #1
 8009260:	4a0a      	ldr	r2, [pc, #40]	; (800928c <prvCheckTasksWaitingTermination+0x50>)
 8009262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009264:	4b0a      	ldr	r3, [pc, #40]	; (8009290 <prvCheckTasksWaitingTermination+0x54>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3b01      	subs	r3, #1
 800926a:	4a09      	ldr	r2, [pc, #36]	; (8009290 <prvCheckTasksWaitingTermination+0x54>)
 800926c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800926e:	f000 fbeb 	bl	8009a48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f80e 	bl	8009294 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009278:	4b05      	ldr	r3, [pc, #20]	; (8009290 <prvCheckTasksWaitingTermination+0x54>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e1      	bne.n	8009244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	200003c8 	.word	0x200003c8
 800928c:	200003f4 	.word	0x200003f4
 8009290:	200003dc 	.word	0x200003dc

08009294 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d108      	bne.n	80092b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fd7a 	bl	8009da4 <vPortFree>
				vPortFree( pxTCB );
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fd77 	bl	8009da4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092b6:	e017      	b.n	80092e8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d103      	bne.n	80092ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fd6e 	bl	8009da4 <vPortFree>
	}
 80092c8:	e00e      	b.n	80092e8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d009      	beq.n	80092e8 <prvDeleteTCB+0x54>
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	e7fe      	b.n	80092e6 <prvDeleteTCB+0x52>
	}
 80092e8:	bf00      	nop
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092f6:	4b0c      	ldr	r3, [pc, #48]	; (8009328 <prvResetNextTaskUnblockTime+0x38>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d104      	bne.n	800930a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009300:	4b0a      	ldr	r3, [pc, #40]	; (800932c <prvResetNextTaskUnblockTime+0x3c>)
 8009302:	f04f 32ff 	mov.w	r2, #4294967295
 8009306:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009308:	e008      	b.n	800931c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800930a:	4b07      	ldr	r3, [pc, #28]	; (8009328 <prvResetNextTaskUnblockTime+0x38>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	4a04      	ldr	r2, [pc, #16]	; (800932c <prvResetNextTaskUnblockTime+0x3c>)
 800931a:	6013      	str	r3, [r2, #0]
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	200003ac 	.word	0x200003ac
 800932c:	20000414 	.word	0x20000414

08009330 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009336:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <xTaskGetSchedulerState+0x34>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d102      	bne.n	8009344 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800933e:	2301      	movs	r3, #1
 8009340:	607b      	str	r3, [r7, #4]
 8009342:	e008      	b.n	8009356 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009344:	4b08      	ldr	r3, [pc, #32]	; (8009368 <xTaskGetSchedulerState+0x38>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d102      	bne.n	8009352 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800934c:	2302      	movs	r3, #2
 800934e:	607b      	str	r3, [r7, #4]
 8009350:	e001      	b.n	8009356 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009352:	2300      	movs	r3, #0
 8009354:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009356:	687b      	ldr	r3, [r7, #4]
	}
 8009358:	4618      	mov	r0, r3
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	20000400 	.word	0x20000400
 8009368:	2000041c 	.word	0x2000041c

0800936c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d069      	beq.n	8009456 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009386:	4b36      	ldr	r3, [pc, #216]	; (8009460 <xTaskPriorityInherit+0xf4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	429a      	cmp	r2, r3
 800938e:	d259      	bcs.n	8009444 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	2b00      	cmp	r3, #0
 8009396:	db06      	blt.n	80093a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009398:	4b31      	ldr	r3, [pc, #196]	; (8009460 <xTaskPriorityInherit+0xf4>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	f1c3 0207 	rsb	r2, r3, #7
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	6959      	ldr	r1, [r3, #20]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ae:	4613      	mov	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4a2b      	ldr	r2, [pc, #172]	; (8009464 <xTaskPriorityInherit+0xf8>)
 80093b8:	4413      	add	r3, r2
 80093ba:	4299      	cmp	r1, r3
 80093bc:	d13a      	bne.n	8009434 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe fb2c 	bl	8007a20 <uxListRemove>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d115      	bne.n	80093fa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d2:	4924      	ldr	r1, [pc, #144]	; (8009464 <xTaskPriorityInherit+0xf8>)
 80093d4:	4613      	mov	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4413      	add	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	440b      	add	r3, r1
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10a      	bne.n	80093fa <xTaskPriorityInherit+0x8e>
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	2201      	movs	r2, #1
 80093ea:	fa02 f303 	lsl.w	r3, r2, r3
 80093ee:	43da      	mvns	r2, r3
 80093f0:	4b1d      	ldr	r3, [pc, #116]	; (8009468 <xTaskPriorityInherit+0xfc>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4013      	ands	r3, r2
 80093f6:	4a1c      	ldr	r2, [pc, #112]	; (8009468 <xTaskPriorityInherit+0xfc>)
 80093f8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093fa:	4b19      	ldr	r3, [pc, #100]	; (8009460 <xTaskPriorityInherit+0xf4>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	2201      	movs	r2, #1
 800940a:	409a      	lsls	r2, r3
 800940c:	4b16      	ldr	r3, [pc, #88]	; (8009468 <xTaskPriorityInherit+0xfc>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4313      	orrs	r3, r2
 8009412:	4a15      	ldr	r2, [pc, #84]	; (8009468 <xTaskPriorityInherit+0xfc>)
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4a10      	ldr	r2, [pc, #64]	; (8009464 <xTaskPriorityInherit+0xf8>)
 8009424:	441a      	add	r2, r3
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	3304      	adds	r3, #4
 800942a:	4619      	mov	r1, r3
 800942c:	4610      	mov	r0, r2
 800942e:	f7fe fa9a 	bl	8007966 <vListInsertEnd>
 8009432:	e004      	b.n	800943e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009434:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <xTaskPriorityInherit+0xf4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800943e:	2301      	movs	r3, #1
 8009440:	60fb      	str	r3, [r7, #12]
 8009442:	e008      	b.n	8009456 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <xTaskPriorityInherit+0xf4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944e:	429a      	cmp	r2, r3
 8009450:	d201      	bcs.n	8009456 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009452:	2301      	movs	r3, #1
 8009454:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009456:	68fb      	ldr	r3, [r7, #12]
	}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	200002f4 	.word	0x200002f4
 8009464:	200002f8 	.word	0x200002f8
 8009468:	200003fc 	.word	0x200003fc

0800946c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009478:	2300      	movs	r3, #0
 800947a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d06c      	beq.n	800955c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009482:	4b39      	ldr	r3, [pc, #228]	; (8009568 <xTaskPriorityDisinherit+0xfc>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	429a      	cmp	r2, r3
 800948a:	d009      	beq.n	80094a0 <xTaskPriorityDisinherit+0x34>
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	60fb      	str	r3, [r7, #12]
 800949e:	e7fe      	b.n	800949e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d109      	bne.n	80094bc <xTaskPriorityDisinherit+0x50>
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	60bb      	str	r3, [r7, #8]
 80094ba:	e7fe      	b.n	80094ba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094c0:	1e5a      	subs	r2, r3, #1
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d044      	beq.n	800955c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d140      	bne.n	800955c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	3304      	adds	r3, #4
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fa9e 	bl	8007a20 <uxListRemove>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d115      	bne.n	8009516 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ee:	491f      	ldr	r1, [pc, #124]	; (800956c <xTaskPriorityDisinherit+0x100>)
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	440b      	add	r3, r1
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10a      	bne.n	8009516 <xTaskPriorityDisinherit+0xaa>
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009504:	2201      	movs	r2, #1
 8009506:	fa02 f303 	lsl.w	r3, r2, r3
 800950a:	43da      	mvns	r2, r3
 800950c:	4b18      	ldr	r3, [pc, #96]	; (8009570 <xTaskPriorityDisinherit+0x104>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4013      	ands	r3, r2
 8009512:	4a17      	ldr	r2, [pc, #92]	; (8009570 <xTaskPriorityDisinherit+0x104>)
 8009514:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	f1c3 0207 	rsb	r2, r3, #7
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952e:	2201      	movs	r2, #1
 8009530:	409a      	lsls	r2, r3
 8009532:	4b0f      	ldr	r3, [pc, #60]	; (8009570 <xTaskPriorityDisinherit+0x104>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4313      	orrs	r3, r2
 8009538:	4a0d      	ldr	r2, [pc, #52]	; (8009570 <xTaskPriorityDisinherit+0x104>)
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009540:	4613      	mov	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4413      	add	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4a08      	ldr	r2, [pc, #32]	; (800956c <xTaskPriorityDisinherit+0x100>)
 800954a:	441a      	add	r2, r3
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	3304      	adds	r3, #4
 8009550:	4619      	mov	r1, r3
 8009552:	4610      	mov	r0, r2
 8009554:	f7fe fa07 	bl	8007966 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009558:	2301      	movs	r3, #1
 800955a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800955c:	697b      	ldr	r3, [r7, #20]
	}
 800955e:	4618      	mov	r0, r3
 8009560:	3718      	adds	r7, #24
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	200002f4 	.word	0x200002f4
 800956c:	200002f8 	.word	0x200002f8
 8009570:	200003fc 	.word	0x200003fc

08009574 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009574:	b580      	push	{r7, lr}
 8009576:	b088      	sub	sp, #32
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009582:	2301      	movs	r3, #1
 8009584:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 8081 	beq.w	8009690 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009592:	2b00      	cmp	r3, #0
 8009594:	d109      	bne.n	80095aa <vTaskPriorityDisinheritAfterTimeout+0x36>
 8009596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	60fb      	str	r3, [r7, #12]
 80095a8:	e7fe      	b.n	80095a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d902      	bls.n	80095ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	61fb      	str	r3, [r7, #28]
 80095b8:	e002      	b.n	80095c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c4:	69fa      	ldr	r2, [r7, #28]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d062      	beq.n	8009690 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d15d      	bne.n	8009690 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80095d4:	4b30      	ldr	r3, [pc, #192]	; (8009698 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d109      	bne.n	80095f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	60bb      	str	r3, [r7, #8]
 80095f0:	e7fe      	b.n	80095f0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	69fa      	ldr	r2, [r7, #28]
 80095fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	db04      	blt.n	8009610 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	f1c3 0207 	rsb	r2, r3, #7
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	6959      	ldr	r1, [r3, #20]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4a1f      	ldr	r2, [pc, #124]	; (800969c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009620:	4413      	add	r3, r2
 8009622:	4299      	cmp	r1, r3
 8009624:	d134      	bne.n	8009690 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	3304      	adds	r3, #4
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe f9f8 	bl	8007a20 <uxListRemove>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d115      	bne.n	8009662 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963a:	4918      	ldr	r1, [pc, #96]	; (800969c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800963c:	4613      	mov	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	440b      	add	r3, r1
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10a      	bne.n	8009662 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009650:	2201      	movs	r2, #1
 8009652:	fa02 f303 	lsl.w	r3, r2, r3
 8009656:	43da      	mvns	r2, r3
 8009658:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4013      	ands	r3, r2
 800965e:	4a10      	ldr	r2, [pc, #64]	; (80096a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009660:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009666:	2201      	movs	r2, #1
 8009668:	409a      	lsls	r2, r3
 800966a:	4b0d      	ldr	r3, [pc, #52]	; (80096a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4313      	orrs	r3, r2
 8009670:	4a0b      	ldr	r2, [pc, #44]	; (80096a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009678:	4613      	mov	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4a06      	ldr	r2, [pc, #24]	; (800969c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009682:	441a      	add	r2, r3
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	3304      	adds	r3, #4
 8009688:	4619      	mov	r1, r3
 800968a:	4610      	mov	r0, r2
 800968c:	f7fe f96b 	bl	8007966 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009690:	bf00      	nop
 8009692:	3720      	adds	r7, #32
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	200002f4 	.word	0x200002f4
 800969c:	200002f8 	.word	0x200002f8
 80096a0:	200003fc 	.word	0x200003fc

080096a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80096a4:	b480      	push	{r7}
 80096a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80096a8:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d004      	beq.n	80096ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80096b0:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096b6:	3201      	adds	r2, #1
 80096b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80096ba:	4b03      	ldr	r3, [pc, #12]	; (80096c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80096bc:	681b      	ldr	r3, [r3, #0]
	}
 80096be:	4618      	mov	r0, r3
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	200002f4 	.word	0x200002f4

080096cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096d6:	4b29      	ldr	r3, [pc, #164]	; (800977c <prvAddCurrentTaskToDelayedList+0xb0>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096dc:	4b28      	ldr	r3, [pc, #160]	; (8009780 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3304      	adds	r3, #4
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe f99c 	bl	8007a20 <uxListRemove>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10b      	bne.n	8009706 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80096ee:	4b24      	ldr	r3, [pc, #144]	; (8009780 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f4:	2201      	movs	r2, #1
 80096f6:	fa02 f303 	lsl.w	r3, r2, r3
 80096fa:	43da      	mvns	r2, r3
 80096fc:	4b21      	ldr	r3, [pc, #132]	; (8009784 <prvAddCurrentTaskToDelayedList+0xb8>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4013      	ands	r3, r2
 8009702:	4a20      	ldr	r2, [pc, #128]	; (8009784 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009704:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970c:	d10a      	bne.n	8009724 <prvAddCurrentTaskToDelayedList+0x58>
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d007      	beq.n	8009724 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009714:	4b1a      	ldr	r3, [pc, #104]	; (8009780 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3304      	adds	r3, #4
 800971a:	4619      	mov	r1, r3
 800971c:	481a      	ldr	r0, [pc, #104]	; (8009788 <prvAddCurrentTaskToDelayedList+0xbc>)
 800971e:	f7fe f922 	bl	8007966 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009722:	e026      	b.n	8009772 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4413      	add	r3, r2
 800972a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800972c:	4b14      	ldr	r3, [pc, #80]	; (8009780 <prvAddCurrentTaskToDelayedList+0xb4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	429a      	cmp	r2, r3
 800973a:	d209      	bcs.n	8009750 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800973c:	4b13      	ldr	r3, [pc, #76]	; (800978c <prvAddCurrentTaskToDelayedList+0xc0>)
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3304      	adds	r3, #4
 8009746:	4619      	mov	r1, r3
 8009748:	4610      	mov	r0, r2
 800974a:	f7fe f930 	bl	80079ae <vListInsert>
}
 800974e:	e010      	b.n	8009772 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009750:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3304      	adds	r3, #4
 800975a:	4619      	mov	r1, r3
 800975c:	4610      	mov	r0, r2
 800975e:	f7fe f926 	bl	80079ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009762:	4b0c      	ldr	r3, [pc, #48]	; (8009794 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	429a      	cmp	r2, r3
 800976a:	d202      	bcs.n	8009772 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800976c:	4a09      	ldr	r2, [pc, #36]	; (8009794 <prvAddCurrentTaskToDelayedList+0xc8>)
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	6013      	str	r3, [r2, #0]
}
 8009772:	bf00      	nop
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	200003f8 	.word	0x200003f8
 8009780:	200002f4 	.word	0x200002f4
 8009784:	200003fc 	.word	0x200003fc
 8009788:	200003e0 	.word	0x200003e0
 800978c:	200003b0 	.word	0x200003b0
 8009790:	200003ac 	.word	0x200003ac
 8009794:	20000414 	.word	0x20000414

08009798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	3b04      	subs	r3, #4
 80097a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3b04      	subs	r3, #4
 80097b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	f023 0201 	bic.w	r2, r3, #1
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3b04      	subs	r3, #4
 80097c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097c8:	4a0c      	ldr	r2, [pc, #48]	; (80097fc <pxPortInitialiseStack+0x64>)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3b14      	subs	r3, #20
 80097d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3b04      	subs	r3, #4
 80097de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f06f 0202 	mvn.w	r2, #2
 80097e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3b20      	subs	r3, #32
 80097ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097ee:	68fb      	ldr	r3, [r7, #12]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	08009801 	.word	0x08009801

08009800 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800980a:	4b11      	ldr	r3, [pc, #68]	; (8009850 <prvTaskExitError+0x50>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009812:	d009      	beq.n	8009828 <prvTaskExitError+0x28>
 8009814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	60fb      	str	r3, [r7, #12]
 8009826:	e7fe      	b.n	8009826 <prvTaskExitError+0x26>
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800983a:	bf00      	nop
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0fc      	beq.n	800983c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009842:	bf00      	nop
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	2000000c 	.word	0x2000000c
	...

08009860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009860:	4b07      	ldr	r3, [pc, #28]	; (8009880 <pxCurrentTCBConst2>)
 8009862:	6819      	ldr	r1, [r3, #0]
 8009864:	6808      	ldr	r0, [r1, #0]
 8009866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986a:	f380 8809 	msr	PSP, r0
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f04f 0000 	mov.w	r0, #0
 8009876:	f380 8811 	msr	BASEPRI, r0
 800987a:	4770      	bx	lr
 800987c:	f3af 8000 	nop.w

08009880 <pxCurrentTCBConst2>:
 8009880:	200002f4 	.word	0x200002f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop

08009888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009888:	4808      	ldr	r0, [pc, #32]	; (80098ac <prvPortStartFirstTask+0x24>)
 800988a:	6800      	ldr	r0, [r0, #0]
 800988c:	6800      	ldr	r0, [r0, #0]
 800988e:	f380 8808 	msr	MSP, r0
 8009892:	f04f 0000 	mov.w	r0, #0
 8009896:	f380 8814 	msr	CONTROL, r0
 800989a:	b662      	cpsie	i
 800989c:	b661      	cpsie	f
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	df00      	svc	0
 80098a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098aa:	bf00      	nop
 80098ac:	e000ed08 	.word	0xe000ed08

080098b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098b6:	4b44      	ldr	r3, [pc, #272]	; (80099c8 <xPortStartScheduler+0x118>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a44      	ldr	r2, [pc, #272]	; (80099cc <xPortStartScheduler+0x11c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d109      	bne.n	80098d4 <xPortStartScheduler+0x24>
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	613b      	str	r3, [r7, #16]
 80098d2:	e7fe      	b.n	80098d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098d4:	4b3c      	ldr	r3, [pc, #240]	; (80099c8 <xPortStartScheduler+0x118>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a3d      	ldr	r2, [pc, #244]	; (80099d0 <xPortStartScheduler+0x120>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d109      	bne.n	80098f2 <xPortStartScheduler+0x42>
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	e7fe      	b.n	80098f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098f2:	4b38      	ldr	r3, [pc, #224]	; (80099d4 <xPortStartScheduler+0x124>)
 80098f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	22ff      	movs	r2, #255	; 0xff
 8009902:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	b2db      	uxtb	r3, r3
 800990a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009914:	b2da      	uxtb	r2, r3
 8009916:	4b30      	ldr	r3, [pc, #192]	; (80099d8 <xPortStartScheduler+0x128>)
 8009918:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800991a:	4b30      	ldr	r3, [pc, #192]	; (80099dc <xPortStartScheduler+0x12c>)
 800991c:	2207      	movs	r2, #7
 800991e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009920:	e009      	b.n	8009936 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009922:	4b2e      	ldr	r3, [pc, #184]	; (80099dc <xPortStartScheduler+0x12c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	3b01      	subs	r3, #1
 8009928:	4a2c      	ldr	r2, [pc, #176]	; (80099dc <xPortStartScheduler+0x12c>)
 800992a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	b2db      	uxtb	r3, r3
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	b2db      	uxtb	r3, r3
 8009934:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009936:	78fb      	ldrb	r3, [r7, #3]
 8009938:	b2db      	uxtb	r3, r3
 800993a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800993e:	2b80      	cmp	r3, #128	; 0x80
 8009940:	d0ef      	beq.n	8009922 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009942:	4b26      	ldr	r3, [pc, #152]	; (80099dc <xPortStartScheduler+0x12c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f1c3 0307 	rsb	r3, r3, #7
 800994a:	2b04      	cmp	r3, #4
 800994c:	d009      	beq.n	8009962 <xPortStartScheduler+0xb2>
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	60bb      	str	r3, [r7, #8]
 8009960:	e7fe      	b.n	8009960 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009962:	4b1e      	ldr	r3, [pc, #120]	; (80099dc <xPortStartScheduler+0x12c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	021b      	lsls	r3, r3, #8
 8009968:	4a1c      	ldr	r2, [pc, #112]	; (80099dc <xPortStartScheduler+0x12c>)
 800996a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800996c:	4b1b      	ldr	r3, [pc, #108]	; (80099dc <xPortStartScheduler+0x12c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009974:	4a19      	ldr	r2, [pc, #100]	; (80099dc <xPortStartScheduler+0x12c>)
 8009976:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	b2da      	uxtb	r2, r3
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009980:	4b17      	ldr	r3, [pc, #92]	; (80099e0 <xPortStartScheduler+0x130>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a16      	ldr	r2, [pc, #88]	; (80099e0 <xPortStartScheduler+0x130>)
 8009986:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800998a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800998c:	4b14      	ldr	r3, [pc, #80]	; (80099e0 <xPortStartScheduler+0x130>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a13      	ldr	r2, [pc, #76]	; (80099e0 <xPortStartScheduler+0x130>)
 8009992:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009996:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009998:	f000 f8d6 	bl	8009b48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800999c:	4b11      	ldr	r3, [pc, #68]	; (80099e4 <xPortStartScheduler+0x134>)
 800999e:	2200      	movs	r2, #0
 80099a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099a2:	f000 f8f5 	bl	8009b90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099a6:	4b10      	ldr	r3, [pc, #64]	; (80099e8 <xPortStartScheduler+0x138>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a0f      	ldr	r2, [pc, #60]	; (80099e8 <xPortStartScheduler+0x138>)
 80099ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099b2:	f7ff ff69 	bl	8009888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099b6:	f7ff fa87 	bl	8008ec8 <vTaskSwitchContext>
	prvTaskExitError();
 80099ba:	f7ff ff21 	bl	8009800 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3718      	adds	r7, #24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	e000ed00 	.word	0xe000ed00
 80099cc:	410fc271 	.word	0x410fc271
 80099d0:	410fc270 	.word	0x410fc270
 80099d4:	e000e400 	.word	0xe000e400
 80099d8:	20000420 	.word	0x20000420
 80099dc:	20000424 	.word	0x20000424
 80099e0:	e000ed20 	.word	0xe000ed20
 80099e4:	2000000c 	.word	0x2000000c
 80099e8:	e000ef34 	.word	0xe000ef34

080099ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a04:	4b0e      	ldr	r3, [pc, #56]	; (8009a40 <vPortEnterCritical+0x54>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	4a0d      	ldr	r2, [pc, #52]	; (8009a40 <vPortEnterCritical+0x54>)
 8009a0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a0e:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <vPortEnterCritical+0x54>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d10e      	bne.n	8009a34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a16:	4b0b      	ldr	r3, [pc, #44]	; (8009a44 <vPortEnterCritical+0x58>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d009      	beq.n	8009a34 <vPortEnterCritical+0x48>
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	603b      	str	r3, [r7, #0]
 8009a32:	e7fe      	b.n	8009a32 <vPortEnterCritical+0x46>
	}
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	2000000c 	.word	0x2000000c
 8009a44:	e000ed04 	.word	0xe000ed04

08009a48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a4e:	4b11      	ldr	r3, [pc, #68]	; (8009a94 <vPortExitCritical+0x4c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <vPortExitCritical+0x22>
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	607b      	str	r3, [r7, #4]
 8009a68:	e7fe      	b.n	8009a68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009a6a:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <vPortExitCritical+0x4c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	4a08      	ldr	r2, [pc, #32]	; (8009a94 <vPortExitCritical+0x4c>)
 8009a72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a74:	4b07      	ldr	r3, [pc, #28]	; (8009a94 <vPortExitCritical+0x4c>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d104      	bne.n	8009a86 <vPortExitCritical+0x3e>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a86:	bf00      	nop
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	2000000c 	.word	0x2000000c
	...

08009aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009aa0:	f3ef 8009 	mrs	r0, PSP
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	4b15      	ldr	r3, [pc, #84]	; (8009b00 <pxCurrentTCBConst>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	f01e 0f10 	tst.w	lr, #16
 8009ab0:	bf08      	it	eq
 8009ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ac4:	f380 8811 	msr	BASEPRI, r0
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f7ff f9fa 	bl	8008ec8 <vTaskSwitchContext>
 8009ad4:	f04f 0000 	mov.w	r0, #0
 8009ad8:	f380 8811 	msr	BASEPRI, r0
 8009adc:	bc09      	pop	{r0, r3}
 8009ade:	6819      	ldr	r1, [r3, #0]
 8009ae0:	6808      	ldr	r0, [r1, #0]
 8009ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae6:	f01e 0f10 	tst.w	lr, #16
 8009aea:	bf08      	it	eq
 8009aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009af0:	f380 8809 	msr	PSP, r0
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	f3af 8000 	nop.w

08009b00 <pxCurrentTCBConst>:
 8009b00:	200002f4 	.word	0x200002f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop

08009b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b20:	f7ff f91a 	bl	8008d58 <xTaskIncrementTick>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d003      	beq.n	8009b32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b2a:	4b06      	ldr	r3, [pc, #24]	; (8009b44 <SysTick_Handler+0x3c>)
 8009b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	2300      	movs	r3, #0
 8009b34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b3c:	bf00      	nop
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	e000ed04 	.word	0xe000ed04

08009b48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b48:	b480      	push	{r7}
 8009b4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b4c:	4b0b      	ldr	r3, [pc, #44]	; (8009b7c <vPortSetupTimerInterrupt+0x34>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b52:	4b0b      	ldr	r3, [pc, #44]	; (8009b80 <vPortSetupTimerInterrupt+0x38>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b58:	4b0a      	ldr	r3, [pc, #40]	; (8009b84 <vPortSetupTimerInterrupt+0x3c>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a0a      	ldr	r2, [pc, #40]	; (8009b88 <vPortSetupTimerInterrupt+0x40>)
 8009b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b62:	099b      	lsrs	r3, r3, #6
 8009b64:	4a09      	ldr	r2, [pc, #36]	; (8009b8c <vPortSetupTimerInterrupt+0x44>)
 8009b66:	3b01      	subs	r3, #1
 8009b68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b6a:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <vPortSetupTimerInterrupt+0x34>)
 8009b6c:	2207      	movs	r2, #7
 8009b6e:	601a      	str	r2, [r3, #0]
}
 8009b70:	bf00      	nop
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	e000e010 	.word	0xe000e010
 8009b80:	e000e018 	.word	0xe000e018
 8009b84:	20000000 	.word	0x20000000
 8009b88:	10624dd3 	.word	0x10624dd3
 8009b8c:	e000e014 	.word	0xe000e014

08009b90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ba0 <vPortEnableVFP+0x10>
 8009b94:	6801      	ldr	r1, [r0, #0]
 8009b96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b9a:	6001      	str	r1, [r0, #0]
 8009b9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b9e:	bf00      	nop
 8009ba0:	e000ed88 	.word	0xe000ed88

08009ba4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009baa:	f3ef 8305 	mrs	r3, IPSR
 8009bae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b0f      	cmp	r3, #15
 8009bb4:	d913      	bls.n	8009bde <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bb6:	4a16      	ldr	r2, [pc, #88]	; (8009c10 <vPortValidateInterruptPriority+0x6c>)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4413      	add	r3, r2
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bc0:	4b14      	ldr	r3, [pc, #80]	; (8009c14 <vPortValidateInterruptPriority+0x70>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	7afa      	ldrb	r2, [r7, #11]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d209      	bcs.n	8009bde <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	607b      	str	r3, [r7, #4]
 8009bdc:	e7fe      	b.n	8009bdc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bde:	4b0e      	ldr	r3, [pc, #56]	; (8009c18 <vPortValidateInterruptPriority+0x74>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009be6:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <vPortValidateInterruptPriority+0x78>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d909      	bls.n	8009c02 <vPortValidateInterruptPriority+0x5e>
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	603b      	str	r3, [r7, #0]
 8009c00:	e7fe      	b.n	8009c00 <vPortValidateInterruptPriority+0x5c>
	}
 8009c02:	bf00      	nop
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	e000e3f0 	.word	0xe000e3f0
 8009c14:	20000420 	.word	0x20000420
 8009c18:	e000ed0c 	.word	0xe000ed0c
 8009c1c:	20000424 	.word	0x20000424

08009c20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08a      	sub	sp, #40	; 0x28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c2c:	f7fe ffea 	bl	8008c04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c30:	4b57      	ldr	r3, [pc, #348]	; (8009d90 <pvPortMalloc+0x170>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c38:	f000 f90c 	bl	8009e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c3c:	4b55      	ldr	r3, [pc, #340]	; (8009d94 <pvPortMalloc+0x174>)
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4013      	ands	r3, r2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f040 808c 	bne.w	8009d62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d01c      	beq.n	8009c8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009c50:	2208      	movs	r2, #8
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4413      	add	r3, r2
 8009c56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f003 0307 	and.w	r3, r3, #7
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d013      	beq.n	8009c8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f023 0307 	bic.w	r3, r3, #7
 8009c68:	3308      	adds	r3, #8
 8009c6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d009      	beq.n	8009c8a <pvPortMalloc+0x6a>
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	617b      	str	r3, [r7, #20]
 8009c88:	e7fe      	b.n	8009c88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d068      	beq.n	8009d62 <pvPortMalloc+0x142>
 8009c90:	4b41      	ldr	r3, [pc, #260]	; (8009d98 <pvPortMalloc+0x178>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d863      	bhi.n	8009d62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c9a:	4b40      	ldr	r3, [pc, #256]	; (8009d9c <pvPortMalloc+0x17c>)
 8009c9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c9e:	4b3f      	ldr	r3, [pc, #252]	; (8009d9c <pvPortMalloc+0x17c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ca4:	e004      	b.n	8009cb0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d903      	bls.n	8009cc2 <pvPortMalloc+0xa2>
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1f1      	bne.n	8009ca6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cc2:	4b33      	ldr	r3, [pc, #204]	; (8009d90 <pvPortMalloc+0x170>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d04a      	beq.n	8009d62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2208      	movs	r2, #8
 8009cd2:	4413      	add	r3, r2
 8009cd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	1ad2      	subs	r2, r2, r3
 8009ce6:	2308      	movs	r3, #8
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d91e      	bls.n	8009d2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	f003 0307 	and.w	r3, r3, #7
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d009      	beq.n	8009d14 <pvPortMalloc+0xf4>
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	613b      	str	r3, [r7, #16]
 8009d12:	e7fe      	b.n	8009d12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	1ad2      	subs	r2, r2, r3
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d26:	69b8      	ldr	r0, [r7, #24]
 8009d28:	f000 f8f6 	bl	8009f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d2c:	4b1a      	ldr	r3, [pc, #104]	; (8009d98 <pvPortMalloc+0x178>)
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	4a18      	ldr	r2, [pc, #96]	; (8009d98 <pvPortMalloc+0x178>)
 8009d38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d3a:	4b17      	ldr	r3, [pc, #92]	; (8009d98 <pvPortMalloc+0x178>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	4b18      	ldr	r3, [pc, #96]	; (8009da0 <pvPortMalloc+0x180>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d203      	bcs.n	8009d4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d46:	4b14      	ldr	r3, [pc, #80]	; (8009d98 <pvPortMalloc+0x178>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a15      	ldr	r2, [pc, #84]	; (8009da0 <pvPortMalloc+0x180>)
 8009d4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	4b10      	ldr	r3, [pc, #64]	; (8009d94 <pvPortMalloc+0x174>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	431a      	orrs	r2, r3
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	2200      	movs	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d62:	f7fe ff5d 	bl	8008c20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	f003 0307 	and.w	r3, r3, #7
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d009      	beq.n	8009d84 <pvPortMalloc+0x164>
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	60fb      	str	r3, [r7, #12]
 8009d82:	e7fe      	b.n	8009d82 <pvPortMalloc+0x162>
	return pvReturn;
 8009d84:	69fb      	ldr	r3, [r7, #28]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3728      	adds	r7, #40	; 0x28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	20000fe8 	.word	0x20000fe8
 8009d94:	20000ff4 	.word	0x20000ff4
 8009d98:	20000fec 	.word	0x20000fec
 8009d9c:	20000fe0 	.word	0x20000fe0
 8009da0:	20000ff0 	.word	0x20000ff0

08009da4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d046      	beq.n	8009e44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009db6:	2308      	movs	r3, #8
 8009db8:	425b      	negs	r3, r3
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	4b20      	ldr	r3, [pc, #128]	; (8009e4c <vPortFree+0xa8>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4013      	ands	r3, r2
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d109      	bne.n	8009de6 <vPortFree+0x42>
 8009dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	e7fe      	b.n	8009de4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d009      	beq.n	8009e02 <vPortFree+0x5e>
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	60bb      	str	r3, [r7, #8]
 8009e00:	e7fe      	b.n	8009e00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	685a      	ldr	r2, [r3, #4]
 8009e06:	4b11      	ldr	r3, [pc, #68]	; (8009e4c <vPortFree+0xa8>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d019      	beq.n	8009e44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d115      	bne.n	8009e44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <vPortFree+0xa8>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	43db      	mvns	r3, r3
 8009e22:	401a      	ands	r2, r3
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e28:	f7fe feec 	bl	8008c04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <vPortFree+0xac>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4413      	add	r3, r2
 8009e36:	4a06      	ldr	r2, [pc, #24]	; (8009e50 <vPortFree+0xac>)
 8009e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e3a:	6938      	ldr	r0, [r7, #16]
 8009e3c:	f000 f86c 	bl	8009f18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009e40:	f7fe feee 	bl	8008c20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e44:	bf00      	nop
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20000ff4 	.word	0x20000ff4
 8009e50:	20000fec 	.word	0x20000fec

08009e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e60:	4b27      	ldr	r3, [pc, #156]	; (8009f00 <prvHeapInit+0xac>)
 8009e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f003 0307 	and.w	r3, r3, #7
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00c      	beq.n	8009e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3307      	adds	r3, #7
 8009e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f023 0307 	bic.w	r3, r3, #7
 8009e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	4a1f      	ldr	r2, [pc, #124]	; (8009f00 <prvHeapInit+0xac>)
 8009e84:	4413      	add	r3, r2
 8009e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e8c:	4a1d      	ldr	r2, [pc, #116]	; (8009f04 <prvHeapInit+0xb0>)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e92:	4b1c      	ldr	r3, [pc, #112]	; (8009f04 <prvHeapInit+0xb0>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ea0:	2208      	movs	r2, #8
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	1a9b      	subs	r3, r3, r2
 8009ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f023 0307 	bic.w	r3, r3, #7
 8009eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4a15      	ldr	r2, [pc, #84]	; (8009f08 <prvHeapInit+0xb4>)
 8009eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009eb6:	4b14      	ldr	r3, [pc, #80]	; (8009f08 <prvHeapInit+0xb4>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ebe:	4b12      	ldr	r3, [pc, #72]	; (8009f08 <prvHeapInit+0xb4>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	1ad2      	subs	r2, r2, r3
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ed4:	4b0c      	ldr	r3, [pc, #48]	; (8009f08 <prvHeapInit+0xb4>)
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	4a0a      	ldr	r2, [pc, #40]	; (8009f0c <prvHeapInit+0xb8>)
 8009ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	4a09      	ldr	r2, [pc, #36]	; (8009f10 <prvHeapInit+0xbc>)
 8009eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009eec:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <prvHeapInit+0xc0>)
 8009eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ef2:	601a      	str	r2, [r3, #0]
}
 8009ef4:	bf00      	nop
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	20000428 	.word	0x20000428
 8009f04:	20000fe0 	.word	0x20000fe0
 8009f08:	20000fe8 	.word	0x20000fe8
 8009f0c:	20000ff0 	.word	0x20000ff0
 8009f10:	20000fec 	.word	0x20000fec
 8009f14:	20000ff4 	.word	0x20000ff4

08009f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f20:	4b28      	ldr	r3, [pc, #160]	; (8009fc4 <prvInsertBlockIntoFreeList+0xac>)
 8009f22:	60fb      	str	r3, [r7, #12]
 8009f24:	e002      	b.n	8009f2c <prvInsertBlockIntoFreeList+0x14>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d8f7      	bhi.n	8009f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	4413      	add	r3, r2
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d108      	bne.n	8009f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	441a      	add	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	441a      	add	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d118      	bne.n	8009fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	4b15      	ldr	r3, [pc, #84]	; (8009fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d00d      	beq.n	8009f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	685a      	ldr	r2, [r3, #4]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	441a      	add	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	e008      	b.n	8009fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f96:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	e003      	b.n	8009fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d002      	beq.n	8009fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fb6:	bf00      	nop
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20000fe0 	.word	0x20000fe0
 8009fc8:	20000fe8 	.word	0x20000fe8

08009fcc <arm_rfft_fast_init_f32>:
 8009fcc:	084b      	lsrs	r3, r1, #1
 8009fce:	2b80      	cmp	r3, #128	; 0x80
 8009fd0:	b410      	push	{r4}
 8009fd2:	8201      	strh	r1, [r0, #16]
 8009fd4:	8003      	strh	r3, [r0, #0]
 8009fd6:	d047      	beq.n	800a068 <arm_rfft_fast_init_f32+0x9c>
 8009fd8:	d917      	bls.n	800a00a <arm_rfft_fast_init_f32+0x3e>
 8009fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fde:	d03d      	beq.n	800a05c <arm_rfft_fast_init_f32+0x90>
 8009fe0:	d929      	bls.n	800a036 <arm_rfft_fast_init_f32+0x6a>
 8009fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fe6:	d020      	beq.n	800a02a <arm_rfft_fast_init_f32+0x5e>
 8009fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fec:	d113      	bne.n	800a016 <arm_rfft_fast_init_f32+0x4a>
 8009fee:	4921      	ldr	r1, [pc, #132]	; (800a074 <arm_rfft_fast_init_f32+0xa8>)
 8009ff0:	4a21      	ldr	r2, [pc, #132]	; (800a078 <arm_rfft_fast_init_f32+0xac>)
 8009ff2:	4b22      	ldr	r3, [pc, #136]	; (800a07c <arm_rfft_fast_init_f32+0xb0>)
 8009ff4:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8009ff8:	8184      	strh	r4, [r0, #12]
 8009ffa:	6081      	str	r1, [r0, #8]
 8009ffc:	6042      	str	r2, [r0, #4]
 8009ffe:	6143      	str	r3, [r0, #20]
 800a000:	2000      	movs	r0, #0
 800a002:	b240      	sxtb	r0, r0
 800a004:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	d01c      	beq.n	800a048 <arm_rfft_fast_init_f32+0x7c>
 800a00e:	2b40      	cmp	r3, #64	; 0x40
 800a010:	d006      	beq.n	800a020 <arm_rfft_fast_init_f32+0x54>
 800a012:	2b10      	cmp	r3, #16
 800a014:	d01d      	beq.n	800a052 <arm_rfft_fast_init_f32+0x86>
 800a016:	20ff      	movs	r0, #255	; 0xff
 800a018:	b240      	sxtb	r0, r0
 800a01a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	2438      	movs	r4, #56	; 0x38
 800a022:	4917      	ldr	r1, [pc, #92]	; (800a080 <arm_rfft_fast_init_f32+0xb4>)
 800a024:	4a17      	ldr	r2, [pc, #92]	; (800a084 <arm_rfft_fast_init_f32+0xb8>)
 800a026:	4b18      	ldr	r3, [pc, #96]	; (800a088 <arm_rfft_fast_init_f32+0xbc>)
 800a028:	e7e6      	b.n	8009ff8 <arm_rfft_fast_init_f32+0x2c>
 800a02a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800a02e:	4917      	ldr	r1, [pc, #92]	; (800a08c <arm_rfft_fast_init_f32+0xc0>)
 800a030:	4a17      	ldr	r2, [pc, #92]	; (800a090 <arm_rfft_fast_init_f32+0xc4>)
 800a032:	4b18      	ldr	r3, [pc, #96]	; (800a094 <arm_rfft_fast_init_f32+0xc8>)
 800a034:	e7e0      	b.n	8009ff8 <arm_rfft_fast_init_f32+0x2c>
 800a036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a03a:	d1ec      	bne.n	800a016 <arm_rfft_fast_init_f32+0x4a>
 800a03c:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800a040:	4915      	ldr	r1, [pc, #84]	; (800a098 <arm_rfft_fast_init_f32+0xcc>)
 800a042:	4a16      	ldr	r2, [pc, #88]	; (800a09c <arm_rfft_fast_init_f32+0xd0>)
 800a044:	4b16      	ldr	r3, [pc, #88]	; (800a0a0 <arm_rfft_fast_init_f32+0xd4>)
 800a046:	e7d7      	b.n	8009ff8 <arm_rfft_fast_init_f32+0x2c>
 800a048:	2430      	movs	r4, #48	; 0x30
 800a04a:	4916      	ldr	r1, [pc, #88]	; (800a0a4 <arm_rfft_fast_init_f32+0xd8>)
 800a04c:	4a16      	ldr	r2, [pc, #88]	; (800a0a8 <arm_rfft_fast_init_f32+0xdc>)
 800a04e:	4b17      	ldr	r3, [pc, #92]	; (800a0ac <arm_rfft_fast_init_f32+0xe0>)
 800a050:	e7d2      	b.n	8009ff8 <arm_rfft_fast_init_f32+0x2c>
 800a052:	2414      	movs	r4, #20
 800a054:	4916      	ldr	r1, [pc, #88]	; (800a0b0 <arm_rfft_fast_init_f32+0xe4>)
 800a056:	4a17      	ldr	r2, [pc, #92]	; (800a0b4 <arm_rfft_fast_init_f32+0xe8>)
 800a058:	4b17      	ldr	r3, [pc, #92]	; (800a0b8 <arm_rfft_fast_init_f32+0xec>)
 800a05a:	e7cd      	b.n	8009ff8 <arm_rfft_fast_init_f32+0x2c>
 800a05c:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800a060:	4916      	ldr	r1, [pc, #88]	; (800a0bc <arm_rfft_fast_init_f32+0xf0>)
 800a062:	4a17      	ldr	r2, [pc, #92]	; (800a0c0 <arm_rfft_fast_init_f32+0xf4>)
 800a064:	4b17      	ldr	r3, [pc, #92]	; (800a0c4 <arm_rfft_fast_init_f32+0xf8>)
 800a066:	e7c7      	b.n	8009ff8 <arm_rfft_fast_init_f32+0x2c>
 800a068:	24d0      	movs	r4, #208	; 0xd0
 800a06a:	4917      	ldr	r1, [pc, #92]	; (800a0c8 <arm_rfft_fast_init_f32+0xfc>)
 800a06c:	4a17      	ldr	r2, [pc, #92]	; (800a0cc <arm_rfft_fast_init_f32+0x100>)
 800a06e:	4b18      	ldr	r3, [pc, #96]	; (800a0d0 <arm_rfft_fast_init_f32+0x104>)
 800a070:	e7c2      	b.n	8009ff8 <arm_rfft_fast_init_f32+0x2c>
 800a072:	bf00      	nop
 800a074:	0801b210 	.word	0x0801b210
 800a078:	0800c408 	.word	0x0800c408
 800a07c:	08012578 	.word	0x08012578
 800a080:	08010508 	.word	0x08010508
 800a084:	0801cfd0 	.word	0x0801cfd0
 800a088:	0801f4c0 	.word	0x0801f4c0
 800a08c:	08018ef8 	.word	0x08018ef8
 800a090:	08016df8 	.word	0x08016df8
 800a094:	08010578 	.word	0x08010578
 800a098:	0801f150 	.word	0x0801f150
 800a09c:	08016578 	.word	0x08016578
 800a0a0:	0801d1d0 	.word	0x0801d1d0
 800a0a4:	08019db0 	.word	0x08019db0
 800a0a8:	08018df8 	.word	0x08018df8
 800a0ac:	08010408 	.word	0x08010408
 800a0b0:	08019d08 	.word	0x08019d08
 800a0b4:	08016d78 	.word	0x08016d78
 800a0b8:	08019d30 	.word	0x08019d30
 800a0bc:	0801d9d0 	.word	0x0801d9d0
 800a0c0:	0801a210 	.word	0x0801a210
 800a0c4:	0801dd50 	.word	0x0801dd50
 800a0c8:	0801f6c0 	.word	0x0801f6c0
 800a0cc:	08019e10 	.word	0x08019e10
 800a0d0:	0801ed50 	.word	0x0801ed50

0800a0d4 <arm_rfft_fast_f32>:
 800a0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d8:	8a06      	ldrh	r6, [r0, #16]
 800a0da:	0876      	lsrs	r6, r6, #1
 800a0dc:	4607      	mov	r7, r0
 800a0de:	4615      	mov	r5, r2
 800a0e0:	8006      	strh	r6, [r0, #0]
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d15c      	bne.n	800a1a2 <arm_rfft_fast_f32+0xce>
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	f000 fbe6 	bl	800a8bc <arm_cfft_f32>
 800a0f0:	edd4 7a00 	vldr	s15, [r4]
 800a0f4:	ed94 7a01 	vldr	s14, [r4, #4]
 800a0f8:	883e      	ldrh	r6, [r7, #0]
 800a0fa:	6978      	ldr	r0, [r7, #20]
 800a0fc:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a100:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a104:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800a108:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a10c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a110:	3e01      	subs	r6, #1
 800a112:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800a116:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a11a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800a11e:	ed85 7a00 	vstr	s14, [r5]
 800a122:	edc5 7a01 	vstr	s15, [r5, #4]
 800a126:	3010      	adds	r0, #16
 800a128:	f105 0210 	add.w	r2, r5, #16
 800a12c:	3b08      	subs	r3, #8
 800a12e:	f104 0110 	add.w	r1, r4, #16
 800a132:	ed51 4a02 	vldr	s9, [r1, #-8]
 800a136:	ed93 5a02 	vldr	s10, [r3, #8]
 800a13a:	ed11 7a01 	vldr	s14, [r1, #-4]
 800a13e:	ed10 6a02 	vldr	s12, [r0, #-8]
 800a142:	edd3 5a03 	vldr	s11, [r3, #12]
 800a146:	ed50 6a01 	vldr	s13, [r0, #-4]
 800a14a:	ee75 7a64 	vsub.f32	s15, s10, s9
 800a14e:	ee35 4a87 	vadd.f32	s8, s11, s14
 800a152:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a156:	ee77 5a65 	vsub.f32	s11, s14, s11
 800a15a:	ee66 4a27 	vmul.f32	s9, s12, s15
 800a15e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800a162:	ee34 5a85 	vadd.f32	s10, s9, s10
 800a166:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a16a:	ee66 6a84 	vmul.f32	s13, s13, s8
 800a16e:	ee77 7a25 	vadd.f32	s15, s14, s11
 800a172:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a176:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a17a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800a17e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a182:	3e01      	subs	r6, #1
 800a184:	ed42 6a02 	vstr	s13, [r2, #-8]
 800a188:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a18c:	f1a3 0308 	sub.w	r3, r3, #8
 800a190:	f101 0108 	add.w	r1, r1, #8
 800a194:	f100 0008 	add.w	r0, r0, #8
 800a198:	f102 0208 	add.w	r2, r2, #8
 800a19c:	d1c9      	bne.n	800a132 <arm_rfft_fast_f32+0x5e>
 800a19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a2:	edd1 7a00 	vldr	s15, [r1]
 800a1a6:	edd1 6a01 	vldr	s13, [r1, #4]
 800a1aa:	6941      	ldr	r1, [r0, #20]
 800a1ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a1b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a1b4:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800a1b8:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a1bc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a1c0:	3e01      	subs	r6, #1
 800a1c2:	ed82 7a00 	vstr	s14, [r2]
 800a1c6:	edc2 7a01 	vstr	s15, [r2, #4]
 800a1ca:	00f0      	lsls	r0, r6, #3
 800a1cc:	b3ee      	cbz	r6, 800a24a <arm_rfft_fast_f32+0x176>
 800a1ce:	3808      	subs	r0, #8
 800a1d0:	f101 0e10 	add.w	lr, r1, #16
 800a1d4:	4420      	add	r0, r4
 800a1d6:	f104 0110 	add.w	r1, r4, #16
 800a1da:	f102 0c10 	add.w	ip, r2, #16
 800a1de:	ed90 7a02 	vldr	s14, [r0, #8]
 800a1e2:	ed51 6a02 	vldr	s13, [r1, #-8]
 800a1e6:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800a1ea:	ed90 4a03 	vldr	s8, [r0, #12]
 800a1ee:	ed11 5a01 	vldr	s10, [r1, #-4]
 800a1f2:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800a1f6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800a1fa:	ee74 4a05 	vadd.f32	s9, s8, s10
 800a1fe:	ee26 3a27 	vmul.f32	s6, s12, s15
 800a202:	ee77 6a26 	vadd.f32	s13, s14, s13
 800a206:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a20a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800a20e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a212:	ee77 7a05 	vadd.f32	s15, s14, s10
 800a216:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a21a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800a21e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a222:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800a226:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a22a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a22e:	3e01      	subs	r6, #1
 800a230:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800a234:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800a238:	f1a0 0008 	sub.w	r0, r0, #8
 800a23c:	f101 0108 	add.w	r1, r1, #8
 800a240:	f10e 0e08 	add.w	lr, lr, #8
 800a244:	f10c 0c08 	add.w	ip, ip, #8
 800a248:	d1c9      	bne.n	800a1de <arm_rfft_fast_f32+0x10a>
 800a24a:	4638      	mov	r0, r7
 800a24c:	4629      	mov	r1, r5
 800a24e:	461a      	mov	r2, r3
 800a250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a254:	2301      	movs	r3, #1
 800a256:	f000 bb31 	b.w	800a8bc <arm_cfft_f32>
 800a25a:	bf00      	nop

0800a25c <arm_cfft_radix8by2_f32>:
 800a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a260:	ed2d 8b08 	vpush	{d8-d11}
 800a264:	f8b0 e000 	ldrh.w	lr, [r0]
 800a268:	6842      	ldr	r2, [r0, #4]
 800a26a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800a26e:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800a272:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800a276:	4607      	mov	r7, r0
 800a278:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800a27c:	f000 80af 	beq.w	800a3de <arm_cfft_radix8by2_f32+0x182>
 800a280:	3310      	adds	r3, #16
 800a282:	18ce      	adds	r6, r1, r3
 800a284:	3210      	adds	r2, #16
 800a286:	4443      	add	r3, r8
 800a288:	f101 0510 	add.w	r5, r1, #16
 800a28c:	f108 0410 	add.w	r4, r8, #16
 800a290:	ed54 1a04 	vldr	s3, [r4, #-16]
 800a294:	ed13 4a04 	vldr	s8, [r3, #-16]
 800a298:	ed53 3a03 	vldr	s7, [r3, #-12]
 800a29c:	ed53 5a02 	vldr	s11, [r3, #-8]
 800a2a0:	ed13 5a01 	vldr	s10, [r3, #-4]
 800a2a4:	ed54 6a03 	vldr	s13, [r4, #-12]
 800a2a8:	ed14 0a02 	vldr	s0, [r4, #-8]
 800a2ac:	ed16 2a04 	vldr	s4, [r6, #-16]
 800a2b0:	ed56 2a03 	vldr	s5, [r6, #-12]
 800a2b4:	ed15 6a03 	vldr	s12, [r5, #-12]
 800a2b8:	ed15 7a01 	vldr	s14, [r5, #-4]
 800a2bc:	ed15 3a04 	vldr	s6, [r5, #-16]
 800a2c0:	ed54 7a01 	vldr	s15, [r4, #-4]
 800a2c4:	ed56 0a02 	vldr	s1, [r6, #-8]
 800a2c8:	ed16 1a01 	vldr	s2, [r6, #-4]
 800a2cc:	ed55 4a02 	vldr	s9, [r5, #-8]
 800a2d0:	ee73 ba21 	vadd.f32	s23, s6, s3
 800a2d4:	ee36 ba26 	vadd.f32	s22, s12, s13
 800a2d8:	ee37 aa27 	vadd.f32	s20, s14, s15
 800a2dc:	ee72 9a04 	vadd.f32	s19, s4, s8
 800a2e0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800a2e4:	ee31 8a05 	vadd.f32	s16, s2, s10
 800a2e8:	ee74 aa80 	vadd.f32	s21, s9, s0
 800a2ec:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800a2f0:	ed45 ba04 	vstr	s23, [r5, #-16]
 800a2f4:	ed05 ba03 	vstr	s22, [r5, #-12]
 800a2f8:	ed45 aa02 	vstr	s21, [r5, #-8]
 800a2fc:	ed05 aa01 	vstr	s20, [r5, #-4]
 800a300:	ed06 8a01 	vstr	s16, [r6, #-4]
 800a304:	ed46 9a04 	vstr	s19, [r6, #-16]
 800a308:	ed06 9a03 	vstr	s18, [r6, #-12]
 800a30c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800a310:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a314:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800a318:	ed12 6a03 	vldr	s12, [r2, #-12]
 800a31c:	ed52 2a04 	vldr	s5, [r2, #-16]
 800a320:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a324:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a328:	ee26 8a86 	vmul.f32	s16, s13, s12
 800a32c:	ee24 2a06 	vmul.f32	s4, s8, s12
 800a330:	ee63 1a22 	vmul.f32	s3, s6, s5
 800a334:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a338:	ee23 3a06 	vmul.f32	s6, s6, s12
 800a33c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800a340:	ee23 6a86 	vmul.f32	s12, s7, s12
 800a344:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800a348:	ee36 6a04 	vadd.f32	s12, s12, s8
 800a34c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a350:	ee72 3a63 	vsub.f32	s7, s4, s7
 800a354:	ee71 2a88 	vadd.f32	s5, s3, s16
 800a358:	ed44 6a03 	vstr	s13, [r4, #-12]
 800a35c:	ed44 2a04 	vstr	s5, [r4, #-16]
 800a360:	ed43 3a04 	vstr	s7, [r3, #-16]
 800a364:	ed03 6a03 	vstr	s12, [r3, #-12]
 800a368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a36c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800a370:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a374:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a378:	ee35 6a41 	vsub.f32	s12, s10, s2
 800a37c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800a380:	ee67 3a87 	vmul.f32	s7, s15, s14
 800a384:	ee26 5a87 	vmul.f32	s10, s13, s14
 800a388:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800a38c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a390:	ee64 4a87 	vmul.f32	s9, s9, s14
 800a394:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a398:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a39c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a3a0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a3a4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800a3a8:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a3ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a3b0:	f1be 0e01 	subs.w	lr, lr, #1
 800a3b4:	ed44 5a02 	vstr	s11, [r4, #-8]
 800a3b8:	f105 0510 	add.w	r5, r5, #16
 800a3bc:	ed44 7a01 	vstr	s15, [r4, #-4]
 800a3c0:	f106 0610 	add.w	r6, r6, #16
 800a3c4:	ed03 6a02 	vstr	s12, [r3, #-8]
 800a3c8:	ed03 7a01 	vstr	s14, [r3, #-4]
 800a3cc:	f102 0210 	add.w	r2, r2, #16
 800a3d0:	f104 0410 	add.w	r4, r4, #16
 800a3d4:	f103 0310 	add.w	r3, r3, #16
 800a3d8:	f47f af5a 	bne.w	800a290 <arm_cfft_radix8by2_f32+0x34>
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	fa1f f48c 	uxth.w	r4, ip
 800a3e2:	4608      	mov	r0, r1
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	f000 fc10 	bl	800ac0c <arm_radix8_butterfly_f32>
 800a3ec:	ecbd 8b08 	vpop	{d8-d11}
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fc:	f000 bc06 	b.w	800ac0c <arm_radix8_butterfly_f32>

0800a400 <arm_cfft_radix8by4_f32>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	ed2d 8b0a 	vpush	{d8-d12}
 800a408:	8802      	ldrh	r2, [r0, #0]
 800a40a:	ed91 6a00 	vldr	s12, [r1]
 800a40e:	b08f      	sub	sp, #60	; 0x3c
 800a410:	460f      	mov	r7, r1
 800a412:	0852      	lsrs	r2, r2, #1
 800a414:	0093      	lsls	r3, r2, #2
 800a416:	900c      	str	r0, [sp, #48]	; 0x30
 800a418:	9103      	str	r1, [sp, #12]
 800a41a:	6841      	ldr	r1, [r0, #4]
 800a41c:	ed97 7a01 	vldr	s14, [r7, #4]
 800a420:	4638      	mov	r0, r7
 800a422:	4418      	add	r0, r3
 800a424:	4606      	mov	r6, r0
 800a426:	9009      	str	r0, [sp, #36]	; 0x24
 800a428:	4418      	add	r0, r3
 800a42a:	edd0 6a00 	vldr	s13, [r0]
 800a42e:	edd6 3a00 	vldr	s7, [r6]
 800a432:	edd6 2a01 	vldr	s5, [r6, #4]
 800a436:	edd0 7a01 	vldr	s15, [r0, #4]
 800a43a:	900a      	str	r0, [sp, #40]	; 0x28
 800a43c:	ee76 5a26 	vadd.f32	s11, s12, s13
 800a440:	4604      	mov	r4, r0
 800a442:	4625      	mov	r5, r4
 800a444:	441c      	add	r4, r3
 800a446:	ed94 4a00 	vldr	s8, [r4]
 800a44a:	ed94 5a01 	vldr	s10, [r4, #4]
 800a44e:	9401      	str	r4, [sp, #4]
 800a450:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800a454:	4630      	mov	r0, r6
 800a456:	ee74 4a24 	vadd.f32	s9, s8, s9
 800a45a:	463e      	mov	r6, r7
 800a45c:	ee14 ea90 	vmov	lr, s9
 800a460:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a464:	f846 eb08 	str.w	lr, [r6], #8
 800a468:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a46c:	edd0 4a01 	vldr	s9, [r0, #4]
 800a470:	9604      	str	r6, [sp, #16]
 800a472:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a476:	9e01      	ldr	r6, [sp, #4]
 800a478:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800a47c:	ed96 2a01 	vldr	s4, [r6, #4]
 800a480:	ee36 7a24 	vadd.f32	s14, s12, s9
 800a484:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800a488:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800a48c:	ee36 6a62 	vsub.f32	s12, s12, s5
 800a490:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800a494:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800a498:	ee73 3a45 	vsub.f32	s7, s6, s10
 800a49c:	4604      	mov	r4, r0
 800a49e:	ee36 6a45 	vsub.f32	s12, s12, s10
 800a4a2:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a4a6:	46a3      	mov	fp, r4
 800a4a8:	ee37 7a02 	vadd.f32	s14, s14, s4
 800a4ac:	ee34 5a84 	vadd.f32	s10, s9, s8
 800a4b0:	ee13 8a90 	vmov	r8, s7
 800a4b4:	46a4      	mov	ip, r4
 800a4b6:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800a4ba:	ed87 7a01 	vstr	s14, [r7, #4]
 800a4be:	f84b 8b08 	str.w	r8, [fp], #8
 800a4c2:	f1ac 0704 	sub.w	r7, ip, #4
 800a4c6:	ed8c 5a01 	vstr	s10, [ip, #4]
 800a4ca:	f101 0c08 	add.w	ip, r1, #8
 800a4ce:	462c      	mov	r4, r5
 800a4d0:	f8cd c014 	str.w	ip, [sp, #20]
 800a4d4:	ee15 ca90 	vmov	ip, s11
 800a4d8:	f844 cb08 	str.w	ip, [r4], #8
 800a4dc:	9407      	str	r4, [sp, #28]
 800a4de:	f101 0410 	add.w	r4, r1, #16
 800a4e2:	ed85 6a01 	vstr	s12, [r5, #4]
 800a4e6:	0852      	lsrs	r2, r2, #1
 800a4e8:	9402      	str	r4, [sp, #8]
 800a4ea:	462c      	mov	r4, r5
 800a4ec:	f101 0518 	add.w	r5, r1, #24
 800a4f0:	920b      	str	r2, [sp, #44]	; 0x2c
 800a4f2:	46b2      	mov	sl, r6
 800a4f4:	9506      	str	r5, [sp, #24]
 800a4f6:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800a4fa:	3a02      	subs	r2, #2
 800a4fc:	ee16 5a90 	vmov	r5, s13
 800a500:	46b6      	mov	lr, r6
 800a502:	4630      	mov	r0, r6
 800a504:	0852      	lsrs	r2, r2, #1
 800a506:	f84a 5b08 	str.w	r5, [sl], #8
 800a50a:	f1a0 0604 	sub.w	r6, r0, #4
 800a50e:	edce 7a01 	vstr	s15, [lr, #4]
 800a512:	9208      	str	r2, [sp, #32]
 800a514:	f000 8130 	beq.w	800a778 <arm_cfft_radix8by4_f32+0x378>
 800a518:	4691      	mov	r9, r2
 800a51a:	9a03      	ldr	r2, [sp, #12]
 800a51c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a520:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a524:	3b08      	subs	r3, #8
 800a526:	f102 0510 	add.w	r5, r2, #16
 800a52a:	f101 0c20 	add.w	ip, r1, #32
 800a52e:	f1a4 020c 	sub.w	r2, r4, #12
 800a532:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800a536:	4433      	add	r3, r6
 800a538:	3410      	adds	r4, #16
 800a53a:	4650      	mov	r0, sl
 800a53c:	4659      	mov	r1, fp
 800a53e:	ed55 3a02 	vldr	s7, [r5, #-8]
 800a542:	ed14 5a02 	vldr	s10, [r4, #-8]
 800a546:	ed91 7a00 	vldr	s14, [r1]
 800a54a:	edd0 7a00 	vldr	s15, [r0]
 800a54e:	ed15 4a01 	vldr	s8, [r5, #-4]
 800a552:	ed54 5a01 	vldr	s11, [r4, #-4]
 800a556:	edd0 6a01 	vldr	s13, [r0, #4]
 800a55a:	ed91 6a01 	vldr	s12, [r1, #4]
 800a55e:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a562:	ee34 0a25 	vadd.f32	s0, s8, s11
 800a566:	ee78 4a07 	vadd.f32	s9, s16, s14
 800a56a:	ee74 5a65 	vsub.f32	s11, s8, s11
 800a56e:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800a572:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800a576:	ed45 4a02 	vstr	s9, [r5, #-8]
 800a57a:	edd1 4a01 	vldr	s9, [r1, #4]
 800a57e:	ed90 4a01 	vldr	s8, [r0, #4]
 800a582:	ee70 4a24 	vadd.f32	s9, s0, s9
 800a586:	ee76 aa05 	vadd.f32	s21, s12, s10
 800a58a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a58e:	ee35 aac7 	vsub.f32	s20, s11, s14
 800a592:	ed45 4a01 	vstr	s9, [r5, #-4]
 800a596:	edd6 1a00 	vldr	s3, [r6]
 800a59a:	edd7 0a00 	vldr	s1, [r7]
 800a59e:	ed92 4a02 	vldr	s8, [r2, #8]
 800a5a2:	edd3 3a02 	vldr	s7, [r3, #8]
 800a5a6:	ed93 2a01 	vldr	s4, [r3, #4]
 800a5aa:	ed16 1a01 	vldr	s2, [r6, #-4]
 800a5ae:	edd2 2a01 	vldr	s5, [r2, #4]
 800a5b2:	ed57 9a01 	vldr	s19, [r7, #-4]
 800a5b6:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800a5ba:	ee39 3a81 	vadd.f32	s6, s19, s2
 800a5be:	ee74 8a84 	vadd.f32	s17, s9, s8
 800a5c2:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800a5c6:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800a5ca:	ee7a aae6 	vsub.f32	s21, s21, s13
 800a5ce:	ee18 aa90 	vmov	sl, s17
 800a5d2:	f847 a908 	str.w	sl, [r7], #-8
 800a5d6:	edd2 8a01 	vldr	s17, [r2, #4]
 800a5da:	ed93 9a01 	vldr	s18, [r3, #4]
 800a5de:	ee73 8a28 	vadd.f32	s17, s6, s17
 800a5e2:	ee3a aa27 	vadd.f32	s20, s20, s15
 800a5e6:	ee78 8a89 	vadd.f32	s17, s17, s18
 800a5ea:	ee74 0a63 	vsub.f32	s1, s8, s7
 800a5ee:	edc7 8a01 	vstr	s17, [r7, #4]
 800a5f2:	ed18 ba02 	vldr	s22, [r8, #-8]
 800a5f6:	ed58 8a01 	vldr	s17, [r8, #-4]
 800a5fa:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800a5fe:	ee6a ba28 	vmul.f32	s23, s20, s17
 800a602:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800a606:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800a60a:	ee30 9a81 	vadd.f32	s18, s1, s2
 800a60e:	ee79 9a82 	vadd.f32	s19, s19, s4
 800a612:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800a616:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800a61a:	ee69 baa8 	vmul.f32	s23, s19, s17
 800a61e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800a622:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800a626:	ee69 8a28 	vmul.f32	s17, s18, s17
 800a62a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800a62e:	ee1c aa10 	vmov	sl, s24
 800a632:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800a636:	f841 ab08 	str.w	sl, [r1], #8
 800a63a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800a63e:	ee3b bacb 	vsub.f32	s22, s23, s22
 800a642:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800a646:	ee33 3a62 	vsub.f32	s6, s6, s5
 800a64a:	ed01 aa01 	vstr	s20, [r1, #-4]
 800a64e:	edc2 8a01 	vstr	s17, [r2, #4]
 800a652:	ed82 ba02 	vstr	s22, [r2, #8]
 800a656:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800a65a:	ee74 3a63 	vsub.f32	s7, s8, s7
 800a65e:	ee38 8a47 	vsub.f32	s16, s16, s14
 800a662:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800a666:	ee30 0a46 	vsub.f32	s0, s0, s12
 800a66a:	ee33 3a42 	vsub.f32	s6, s6, s4
 800a66e:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a672:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a676:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800a67a:	ee63 8a04 	vmul.f32	s17, s6, s8
 800a67e:	ee28 aa24 	vmul.f32	s20, s16, s9
 800a682:	ee60 9a04 	vmul.f32	s19, s0, s8
 800a686:	ee28 8a04 	vmul.f32	s16, s16, s8
 800a68a:	ee20 0a24 	vmul.f32	s0, s0, s9
 800a68e:	ee63 3a84 	vmul.f32	s7, s7, s8
 800a692:	ee39 4a68 	vsub.f32	s8, s18, s17
 800a696:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800a69a:	ee14 aa10 	vmov	sl, s8
 800a69e:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a6a2:	ee63 4a24 	vmul.f32	s9, s6, s9
 800a6a6:	ed44 9a02 	vstr	s19, [r4, #-8]
 800a6aa:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800a6ae:	ed04 0a01 	vstr	s0, [r4, #-4]
 800a6b2:	f846 a908 	str.w	sl, [r6], #-8
 800a6b6:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a6ba:	ee35 7a87 	vadd.f32	s14, s11, s14
 800a6be:	edc6 3a01 	vstr	s7, [r6, #4]
 800a6c2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a6c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6ca:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800a6ce:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800a6d2:	ee67 5a86 	vmul.f32	s11, s15, s12
 800a6d6:	ee26 5a87 	vmul.f32	s10, s13, s14
 800a6da:	ee72 2a62 	vsub.f32	s5, s4, s5
 800a6de:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800a6e2:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800a6e6:	ee75 5a25 	vadd.f32	s11, s10, s11
 800a6ea:	ee62 0a86 	vmul.f32	s1, s5, s12
 800a6ee:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a6f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6f6:	ee21 6a06 	vmul.f32	s12, s2, s12
 800a6fa:	ee62 2a87 	vmul.f32	s5, s5, s14
 800a6fe:	ee21 1a07 	vmul.f32	s2, s2, s14
 800a702:	ee15 aa90 	vmov	sl, s11
 800a706:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a70a:	f840 ab08 	str.w	sl, [r0], #8
 800a70e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800a712:	ee76 2a22 	vadd.f32	s5, s12, s5
 800a716:	f1b9 0901 	subs.w	r9, r9, #1
 800a71a:	ed40 7a01 	vstr	s15, [r0, #-4]
 800a71e:	f105 0508 	add.w	r5, r5, #8
 800a722:	ed83 1a02 	vstr	s2, [r3, #8]
 800a726:	edc3 2a01 	vstr	s5, [r3, #4]
 800a72a:	f108 0808 	add.w	r8, r8, #8
 800a72e:	f1a2 0208 	sub.w	r2, r2, #8
 800a732:	f10c 0c10 	add.w	ip, ip, #16
 800a736:	f104 0408 	add.w	r4, r4, #8
 800a73a:	f10e 0e18 	add.w	lr, lr, #24
 800a73e:	f1a3 0308 	sub.w	r3, r3, #8
 800a742:	f47f aefc 	bne.w	800a53e <arm_cfft_radix8by4_f32+0x13e>
 800a746:	9908      	ldr	r1, [sp, #32]
 800a748:	9802      	ldr	r0, [sp, #8]
 800a74a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800a74e:	00cb      	lsls	r3, r1, #3
 800a750:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a754:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a758:	9102      	str	r1, [sp, #8]
 800a75a:	9904      	ldr	r1, [sp, #16]
 800a75c:	4419      	add	r1, r3
 800a75e:	9104      	str	r1, [sp, #16]
 800a760:	9905      	ldr	r1, [sp, #20]
 800a762:	4419      	add	r1, r3
 800a764:	9105      	str	r1, [sp, #20]
 800a766:	9907      	ldr	r1, [sp, #28]
 800a768:	449b      	add	fp, r3
 800a76a:	4419      	add	r1, r3
 800a76c:	449a      	add	sl, r3
 800a76e:	9b06      	ldr	r3, [sp, #24]
 800a770:	9107      	str	r1, [sp, #28]
 800a772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a776:	9306      	str	r3, [sp, #24]
 800a778:	9a04      	ldr	r2, [sp, #16]
 800a77a:	9807      	ldr	r0, [sp, #28]
 800a77c:	edd2 3a00 	vldr	s7, [r2]
 800a780:	ed90 4a00 	vldr	s8, [r0]
 800a784:	eddb 7a00 	vldr	s15, [fp]
 800a788:	ed9a 3a00 	vldr	s6, [sl]
 800a78c:	edd2 4a01 	vldr	s9, [r2, #4]
 800a790:	ed90 7a01 	vldr	s14, [r0, #4]
 800a794:	ed9b 2a01 	vldr	s4, [fp, #4]
 800a798:	edda 5a01 	vldr	s11, [sl, #4]
 800a79c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800a7a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a7a2:	ee73 6a84 	vadd.f32	s13, s7, s8
 800a7a6:	ee34 6a87 	vadd.f32	s12, s9, s14
 800a7aa:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800a7ae:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800a7b2:	ee33 5a05 	vadd.f32	s10, s6, s10
 800a7b6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800a7ba:	ed82 5a00 	vstr	s10, [r2]
 800a7be:	ed9b 5a01 	vldr	s10, [fp, #4]
 800a7c2:	edda 4a01 	vldr	s9, [sl, #4]
 800a7c6:	ee36 5a05 	vadd.f32	s10, s12, s10
 800a7ca:	ee72 3a04 	vadd.f32	s7, s4, s8
 800a7ce:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a7d2:	ee77 4a67 	vsub.f32	s9, s14, s15
 800a7d6:	ed82 5a01 	vstr	s10, [r2, #4]
 800a7da:	9a05      	ldr	r2, [sp, #20]
 800a7dc:	ee34 5a83 	vadd.f32	s10, s9, s6
 800a7e0:	edd2 1a00 	vldr	s3, [r2]
 800a7e4:	edd2 2a01 	vldr	s5, [r2, #4]
 800a7e8:	9a02      	ldr	r2, [sp, #8]
 800a7ea:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800a7ee:	ee36 6a42 	vsub.f32	s12, s12, s4
 800a7f2:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800a7f6:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800a7fa:	ee65 2a22 	vmul.f32	s5, s10, s5
 800a7fe:	ee25 5a21 	vmul.f32	s10, s10, s3
 800a802:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a806:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a80a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a80e:	edcb 2a00 	vstr	s5, [fp]
 800a812:	ed8b 5a01 	vstr	s10, [fp, #4]
 800a816:	edd2 3a01 	vldr	s7, [r2, #4]
 800a81a:	ed92 5a00 	vldr	s10, [r2]
 800a81e:	9a06      	ldr	r2, [sp, #24]
 800a820:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a824:	ee36 6a65 	vsub.f32	s12, s12, s11
 800a828:	ee66 4a85 	vmul.f32	s9, s13, s10
 800a82c:	ee26 5a05 	vmul.f32	s10, s12, s10
 800a830:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800a834:	ee26 6a23 	vmul.f32	s12, s12, s7
 800a838:	ee75 6a66 	vsub.f32	s13, s10, s13
 800a83c:	ee34 6a86 	vadd.f32	s12, s9, s12
 800a840:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a844:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a848:	edc0 6a01 	vstr	s13, [r0, #4]
 800a84c:	ed80 6a00 	vstr	s12, [r0]
 800a850:	ed92 6a01 	vldr	s12, [r2, #4]
 800a854:	9803      	ldr	r0, [sp, #12]
 800a856:	ee77 7a43 	vsub.f32	s15, s14, s6
 800a85a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800a85e:	ed92 7a00 	vldr	s14, [r2]
 800a862:	ee65 6a87 	vmul.f32	s13, s11, s14
 800a866:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a86a:	ee65 5a86 	vmul.f32	s11, s11, s12
 800a86e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a872:	ee77 5a65 	vsub.f32	s11, s14, s11
 800a876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a87a:	edca 5a01 	vstr	s11, [sl, #4]
 800a87e:	edca 7a00 	vstr	s15, [sl]
 800a882:	6872      	ldr	r2, [r6, #4]
 800a884:	4621      	mov	r1, r4
 800a886:	2304      	movs	r3, #4
 800a888:	f000 f9c0 	bl	800ac0c <arm_radix8_butterfly_f32>
 800a88c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a88e:	6872      	ldr	r2, [r6, #4]
 800a890:	4621      	mov	r1, r4
 800a892:	2304      	movs	r3, #4
 800a894:	f000 f9ba 	bl	800ac0c <arm_radix8_butterfly_f32>
 800a898:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a89a:	6872      	ldr	r2, [r6, #4]
 800a89c:	4621      	mov	r1, r4
 800a89e:	2304      	movs	r3, #4
 800a8a0:	f000 f9b4 	bl	800ac0c <arm_radix8_butterfly_f32>
 800a8a4:	9801      	ldr	r0, [sp, #4]
 800a8a6:	6872      	ldr	r2, [r6, #4]
 800a8a8:	4621      	mov	r1, r4
 800a8aa:	2304      	movs	r3, #4
 800a8ac:	b00f      	add	sp, #60	; 0x3c
 800a8ae:	ecbd 8b0a 	vpop	{d8-d12}
 800a8b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b6:	f000 b9a9 	b.w	800ac0c <arm_radix8_butterfly_f32>
 800a8ba:	bf00      	nop

0800a8bc <arm_cfft_f32>:
 800a8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c0:	2a01      	cmp	r2, #1
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	4617      	mov	r7, r2
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	4698      	mov	r8, r3
 800a8ca:	8805      	ldrh	r5, [r0, #0]
 800a8cc:	d054      	beq.n	800a978 <arm_cfft_f32+0xbc>
 800a8ce:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a8d2:	d04c      	beq.n	800a96e <arm_cfft_f32+0xb2>
 800a8d4:	d916      	bls.n	800a904 <arm_cfft_f32+0x48>
 800a8d6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a8da:	d01a      	beq.n	800a912 <arm_cfft_f32+0x56>
 800a8dc:	d95c      	bls.n	800a998 <arm_cfft_f32+0xdc>
 800a8de:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a8e2:	d044      	beq.n	800a96e <arm_cfft_f32+0xb2>
 800a8e4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a8e8:	d105      	bne.n	800a8f6 <arm_cfft_f32+0x3a>
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	6872      	ldr	r2, [r6, #4]
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	f000 f98b 	bl	800ac0c <arm_radix8_butterfly_f32>
 800a8f6:	f1b8 0f00 	cmp.w	r8, #0
 800a8fa:	d111      	bne.n	800a920 <arm_cfft_f32+0x64>
 800a8fc:	2f01      	cmp	r7, #1
 800a8fe:	d016      	beq.n	800a92e <arm_cfft_f32+0x72>
 800a900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a904:	2d20      	cmp	r5, #32
 800a906:	d032      	beq.n	800a96e <arm_cfft_f32+0xb2>
 800a908:	d94a      	bls.n	800a9a0 <arm_cfft_f32+0xe4>
 800a90a:	2d40      	cmp	r5, #64	; 0x40
 800a90c:	d0ed      	beq.n	800a8ea <arm_cfft_f32+0x2e>
 800a90e:	2d80      	cmp	r5, #128	; 0x80
 800a910:	d1f1      	bne.n	800a8f6 <arm_cfft_f32+0x3a>
 800a912:	4630      	mov	r0, r6
 800a914:	4621      	mov	r1, r4
 800a916:	f7ff fca1 	bl	800a25c <arm_cfft_radix8by2_f32>
 800a91a:	f1b8 0f00 	cmp.w	r8, #0
 800a91e:	d0ed      	beq.n	800a8fc <arm_cfft_f32+0x40>
 800a920:	4620      	mov	r0, r4
 800a922:	89b1      	ldrh	r1, [r6, #12]
 800a924:	68b2      	ldr	r2, [r6, #8]
 800a926:	f7f5 fc6b 	bl	8000200 <arm_bitreversal_32>
 800a92a:	2f01      	cmp	r7, #1
 800a92c:	d1e8      	bne.n	800a900 <arm_cfft_f32+0x44>
 800a92e:	ee07 5a90 	vmov	s15, r5
 800a932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a936:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a93a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800a93e:	2d00      	cmp	r5, #0
 800a940:	d0de      	beq.n	800a900 <arm_cfft_f32+0x44>
 800a942:	f104 0108 	add.w	r1, r4, #8
 800a946:	2300      	movs	r3, #0
 800a948:	3301      	adds	r3, #1
 800a94a:	429d      	cmp	r5, r3
 800a94c:	f101 0108 	add.w	r1, r1, #8
 800a950:	ed11 7a04 	vldr	s14, [r1, #-16]
 800a954:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a958:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a95c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a960:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a964:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a968:	d1ee      	bne.n	800a948 <arm_cfft_f32+0x8c>
 800a96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a96e:	4630      	mov	r0, r6
 800a970:	4621      	mov	r1, r4
 800a972:	f7ff fd45 	bl	800a400 <arm_cfft_radix8by4_f32>
 800a976:	e7be      	b.n	800a8f6 <arm_cfft_f32+0x3a>
 800a978:	b1ad      	cbz	r5, 800a9a6 <arm_cfft_f32+0xea>
 800a97a:	f101 030c 	add.w	r3, r1, #12
 800a97e:	2200      	movs	r2, #0
 800a980:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a984:	3201      	adds	r2, #1
 800a986:	eef1 7a67 	vneg.f32	s15, s15
 800a98a:	4295      	cmp	r5, r2
 800a98c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a990:	f103 0308 	add.w	r3, r3, #8
 800a994:	d1f4      	bne.n	800a980 <arm_cfft_f32+0xc4>
 800a996:	e79a      	b.n	800a8ce <arm_cfft_f32+0x12>
 800a998:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a99c:	d0a5      	beq.n	800a8ea <arm_cfft_f32+0x2e>
 800a99e:	e7aa      	b.n	800a8f6 <arm_cfft_f32+0x3a>
 800a9a0:	2d10      	cmp	r5, #16
 800a9a2:	d0b6      	beq.n	800a912 <arm_cfft_f32+0x56>
 800a9a4:	e7a7      	b.n	800a8f6 <arm_cfft_f32+0x3a>
 800a9a6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a9aa:	d894      	bhi.n	800a8d6 <arm_cfft_f32+0x1a>
 800a9ac:	e7aa      	b.n	800a904 <arm_cfft_f32+0x48>
 800a9ae:	bf00      	nop

0800a9b0 <arm_cmplx_mag_f32>:
 800a9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b4:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800a9b8:	b084      	sub	sp, #16
 800a9ba:	d07f      	beq.n	800aabc <arm_cmplx_mag_f32+0x10c>
 800a9bc:	2700      	movs	r7, #0
 800a9be:	f100 0420 	add.w	r4, r0, #32
 800a9c2:	f101 0510 	add.w	r5, r1, #16
 800a9c6:	4646      	mov	r6, r8
 800a9c8:	e05a      	b.n	800aa80 <arm_cmplx_mag_f32+0xd0>
 800a9ca:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a9ce:	eeb4 0a40 	vcmp.f32	s0, s0
 800a9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d6:	f040 80a4 	bne.w	800ab22 <arm_cmplx_mag_f32+0x172>
 800a9da:	ed05 0a04 	vstr	s0, [r5, #-16]
 800a9de:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800a9e2:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800a9e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a9ea:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a9ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a9f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9fa:	f2c0 808f 	blt.w	800ab1c <arm_cmplx_mag_f32+0x16c>
 800a9fe:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800aa02:	eeb4 0a40 	vcmp.f32	s0, s0
 800aa06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa0a:	f040 80af 	bne.w	800ab6c <arm_cmplx_mag_f32+0x1bc>
 800aa0e:	ed05 0a03 	vstr	s0, [r5, #-12]
 800aa12:	ed54 7a04 	vldr	s15, [r4, #-16]
 800aa16:	ed14 0a03 	vldr	s0, [r4, #-12]
 800aa1a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aa1e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800aa22:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa2e:	db72      	blt.n	800ab16 <arm_cmplx_mag_f32+0x166>
 800aa30:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800aa34:	eeb4 0a40 	vcmp.f32	s0, s0
 800aa38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa3c:	f040 808c 	bne.w	800ab58 <arm_cmplx_mag_f32+0x1a8>
 800aa40:	ed05 0a02 	vstr	s0, [r5, #-8]
 800aa44:	ed54 7a02 	vldr	s15, [r4, #-8]
 800aa48:	ed14 0a01 	vldr	s0, [r4, #-4]
 800aa4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aa50:	ee20 0a00 	vmul.f32	s0, s0, s0
 800aa54:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa60:	db20      	blt.n	800aaa4 <arm_cmplx_mag_f32+0xf4>
 800aa62:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800aa66:	eeb4 0a40 	vcmp.f32	s0, s0
 800aa6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa6e:	d169      	bne.n	800ab44 <arm_cmplx_mag_f32+0x194>
 800aa70:	3e01      	subs	r6, #1
 800aa72:	ed05 0a01 	vstr	s0, [r5, #-4]
 800aa76:	f104 0420 	add.w	r4, r4, #32
 800aa7a:	f105 0510 	add.w	r5, r5, #16
 800aa7e:	d019      	beq.n	800aab4 <arm_cmplx_mag_f32+0x104>
 800aa80:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800aa84:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800aa88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aa8c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800aa90:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9c:	da95      	bge.n	800a9ca <arm_cmplx_mag_f32+0x1a>
 800aa9e:	f845 7c10 	str.w	r7, [r5, #-16]
 800aaa2:	e79c      	b.n	800a9de <arm_cmplx_mag_f32+0x2e>
 800aaa4:	3e01      	subs	r6, #1
 800aaa6:	f845 7c04 	str.w	r7, [r5, #-4]
 800aaaa:	f104 0420 	add.w	r4, r4, #32
 800aaae:	f105 0510 	add.w	r5, r5, #16
 800aab2:	d1e5      	bne.n	800aa80 <arm_cmplx_mag_f32+0xd0>
 800aab4:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800aab8:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800aabc:	f012 0503 	ands.w	r5, r2, #3
 800aac0:	d026      	beq.n	800ab10 <arm_cmplx_mag_f32+0x160>
 800aac2:	2600      	movs	r6, #0
 800aac4:	f100 0408 	add.w	r4, r0, #8
 800aac8:	e00c      	b.n	800aae4 <arm_cmplx_mag_f32+0x134>
 800aaca:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800aace:	eeb4 0a40 	vcmp.f32	s0, s0
 800aad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad6:	d12e      	bne.n	800ab36 <arm_cmplx_mag_f32+0x186>
 800aad8:	3d01      	subs	r5, #1
 800aada:	ed01 0a01 	vstr	s0, [r1, #-4]
 800aade:	f104 0408 	add.w	r4, r4, #8
 800aae2:	d015      	beq.n	800ab10 <arm_cmplx_mag_f32+0x160>
 800aae4:	ed54 7a02 	vldr	s15, [r4, #-8]
 800aae8:	ed14 0a01 	vldr	s0, [r4, #-4]
 800aaec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aaf0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800aaf4:	3104      	adds	r1, #4
 800aaf6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aafa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab02:	dae2      	bge.n	800aaca <arm_cmplx_mag_f32+0x11a>
 800ab04:	3d01      	subs	r5, #1
 800ab06:	f841 6c04 	str.w	r6, [r1, #-4]
 800ab0a:	f104 0408 	add.w	r4, r4, #8
 800ab0e:	d1e9      	bne.n	800aae4 <arm_cmplx_mag_f32+0x134>
 800ab10:	b004      	add	sp, #16
 800ab12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab16:	f845 7c08 	str.w	r7, [r5, #-8]
 800ab1a:	e793      	b.n	800aa44 <arm_cmplx_mag_f32+0x94>
 800ab1c:	f845 7c0c 	str.w	r7, [r5, #-12]
 800ab20:	e777      	b.n	800aa12 <arm_cmplx_mag_f32+0x62>
 800ab22:	eeb0 0a67 	vmov.f32	s0, s15
 800ab26:	9203      	str	r2, [sp, #12]
 800ab28:	9102      	str	r1, [sp, #8]
 800ab2a:	9001      	str	r0, [sp, #4]
 800ab2c:	f000 fcd0 	bl	800b4d0 <sqrtf>
 800ab30:	a801      	add	r0, sp, #4
 800ab32:	c807      	ldmia	r0, {r0, r1, r2}
 800ab34:	e751      	b.n	800a9da <arm_cmplx_mag_f32+0x2a>
 800ab36:	eeb0 0a67 	vmov.f32	s0, s15
 800ab3a:	9101      	str	r1, [sp, #4]
 800ab3c:	f000 fcc8 	bl	800b4d0 <sqrtf>
 800ab40:	9901      	ldr	r1, [sp, #4]
 800ab42:	e7c9      	b.n	800aad8 <arm_cmplx_mag_f32+0x128>
 800ab44:	eeb0 0a67 	vmov.f32	s0, s15
 800ab48:	9203      	str	r2, [sp, #12]
 800ab4a:	9102      	str	r1, [sp, #8]
 800ab4c:	9001      	str	r0, [sp, #4]
 800ab4e:	f000 fcbf 	bl	800b4d0 <sqrtf>
 800ab52:	a801      	add	r0, sp, #4
 800ab54:	c807      	ldmia	r0, {r0, r1, r2}
 800ab56:	e78b      	b.n	800aa70 <arm_cmplx_mag_f32+0xc0>
 800ab58:	eeb0 0a67 	vmov.f32	s0, s15
 800ab5c:	9203      	str	r2, [sp, #12]
 800ab5e:	9102      	str	r1, [sp, #8]
 800ab60:	9001      	str	r0, [sp, #4]
 800ab62:	f000 fcb5 	bl	800b4d0 <sqrtf>
 800ab66:	a801      	add	r0, sp, #4
 800ab68:	c807      	ldmia	r0, {r0, r1, r2}
 800ab6a:	e769      	b.n	800aa40 <arm_cmplx_mag_f32+0x90>
 800ab6c:	eeb0 0a67 	vmov.f32	s0, s15
 800ab70:	9203      	str	r2, [sp, #12]
 800ab72:	9102      	str	r1, [sp, #8]
 800ab74:	9001      	str	r0, [sp, #4]
 800ab76:	f000 fcab 	bl	800b4d0 <sqrtf>
 800ab7a:	a801      	add	r0, sp, #4
 800ab7c:	c807      	ldmia	r0, {r0, r1, r2}
 800ab7e:	e746      	b.n	800aa0e <arm_cmplx_mag_f32+0x5e>

0800ab80 <arm_mult_f32>:
 800ab80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab82:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800ab86:	d033      	beq.n	800abf0 <arm_mult_f32+0x70>
 800ab88:	f100 0610 	add.w	r6, r0, #16
 800ab8c:	f101 0510 	add.w	r5, r1, #16
 800ab90:	f102 0410 	add.w	r4, r2, #16
 800ab94:	4677      	mov	r7, lr
 800ab96:	ed16 6a04 	vldr	s12, [r6, #-16]
 800ab9a:	ed55 4a04 	vldr	s9, [r5, #-16]
 800ab9e:	ed56 6a02 	vldr	s13, [r6, #-8]
 800aba2:	ed15 5a02 	vldr	s10, [r5, #-8]
 800aba6:	ed16 7a03 	vldr	s14, [r6, #-12]
 800abaa:	ed55 5a03 	vldr	s11, [r5, #-12]
 800abae:	ed56 7a01 	vldr	s15, [r6, #-4]
 800abb2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800abb6:	ee66 6a85 	vmul.f32	s13, s13, s10
 800abba:	ed04 6a04 	vstr	s12, [r4, #-16]
 800abbe:	ed15 6a01 	vldr	s12, [r5, #-4]
 800abc2:	ed44 6a02 	vstr	s13, [r4, #-8]
 800abc6:	ee27 7a25 	vmul.f32	s14, s14, s11
 800abca:	ee67 7a86 	vmul.f32	s15, s15, s12
 800abce:	3f01      	subs	r7, #1
 800abd0:	ed04 7a03 	vstr	s14, [r4, #-12]
 800abd4:	ed44 7a01 	vstr	s15, [r4, #-4]
 800abd8:	f106 0610 	add.w	r6, r6, #16
 800abdc:	f105 0510 	add.w	r5, r5, #16
 800abe0:	f104 0410 	add.w	r4, r4, #16
 800abe4:	d1d7      	bne.n	800ab96 <arm_mult_f32+0x16>
 800abe6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800abea:	4420      	add	r0, r4
 800abec:	4421      	add	r1, r4
 800abee:	4422      	add	r2, r4
 800abf0:	f013 0303 	ands.w	r3, r3, #3
 800abf4:	d009      	beq.n	800ac0a <arm_mult_f32+0x8a>
 800abf6:	ecf0 7a01 	vldmia	r0!, {s15}
 800abfa:	ecb1 7a01 	vldmia	r1!, {s14}
 800abfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac02:	3b01      	subs	r3, #1
 800ac04:	ece2 7a01 	vstmia	r2!, {s15}
 800ac08:	d1f5      	bne.n	800abf6 <arm_mult_f32+0x76>
 800ac0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac0c <arm_radix8_butterfly_f32>:
 800ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	ed2d 8b10 	vpush	{d8-d15}
 800ac14:	b09d      	sub	sp, #116	; 0x74
 800ac16:	461c      	mov	r4, r3
 800ac18:	ed9f bac8 	vldr	s22, [pc, #800]	; 800af3c <arm_radix8_butterfly_f32+0x330>
 800ac1c:	921a      	str	r2, [sp, #104]	; 0x68
 800ac1e:	1d03      	adds	r3, r0, #4
 800ac20:	4682      	mov	sl, r0
 800ac22:	4689      	mov	r9, r1
 800ac24:	468b      	mov	fp, r1
 800ac26:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac28:	9400      	str	r4, [sp, #0]
 800ac2a:	469e      	mov	lr, r3
 800ac2c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800ac30:	005a      	lsls	r2, r3, #1
 800ac32:	18d6      	adds	r6, r2, r3
 800ac34:	18f5      	adds	r5, r6, r3
 800ac36:	9203      	str	r2, [sp, #12]
 800ac38:	195a      	adds	r2, r3, r5
 800ac3a:	18d0      	adds	r0, r2, r3
 800ac3c:	00df      	lsls	r7, r3, #3
 800ac3e:	1819      	adds	r1, r3, r0
 800ac40:	463c      	mov	r4, r7
 800ac42:	9701      	str	r7, [sp, #4]
 800ac44:	4457      	add	r7, sl
 800ac46:	930c      	str	r3, [sp, #48]	; 0x30
 800ac48:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800ac4c:	011b      	lsls	r3, r3, #4
 800ac4e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800ac52:	eb07 0c04 	add.w	ip, r7, r4
 800ac56:	9c00      	ldr	r4, [sp, #0]
 800ac58:	9302      	str	r3, [sp, #8]
 800ac5a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800ac5e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800ac62:	3204      	adds	r2, #4
 800ac64:	3104      	adds	r1, #4
 800ac66:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800ac6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac6e:	f04f 0800 	mov.w	r8, #0
 800ac72:	eddc 7a00 	vldr	s15, [ip]
 800ac76:	edd7 6a00 	vldr	s13, [r7]
 800ac7a:	edd6 3a00 	vldr	s7, [r6]
 800ac7e:	ed5e aa01 	vldr	s21, [lr, #-4]
 800ac82:	edd5 4a00 	vldr	s9, [r5]
 800ac86:	ed90 2a00 	vldr	s4, [r0]
 800ac8a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ac8e:	ed51 0a01 	vldr	s1, [r1, #-4]
 800ac92:	ee77 8a82 	vadd.f32	s17, s15, s4
 800ac96:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800ac9a:	ee76 1a87 	vadd.f32	s3, s13, s14
 800ac9e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800aca2:	ee31 6a84 	vadd.f32	s12, s3, s8
 800aca6:	ee33 5a28 	vadd.f32	s10, s6, s17
 800acaa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800acae:	ee75 6a06 	vadd.f32	s13, s10, s12
 800acb2:	ee35 5a46 	vsub.f32	s10, s10, s12
 800acb6:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800acba:	ed85 5a00 	vstr	s10, [r5]
 800acbe:	ed96 1a01 	vldr	s2, [r6, #4]
 800acc2:	edd7 5a01 	vldr	s11, [r7, #4]
 800acc6:	ed92 aa00 	vldr	s20, [r2]
 800acca:	ed91 6a00 	vldr	s12, [r1]
 800acce:	ed9e 9a00 	vldr	s18, [lr]
 800acd2:	ed95 5a01 	vldr	s10, [r5, #4]
 800acd6:	eddc 6a01 	vldr	s13, [ip, #4]
 800acda:	edd0 9a01 	vldr	s19, [r0, #4]
 800acde:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800ace2:	ee71 2a46 	vsub.f32	s5, s2, s12
 800ace6:	ee75 3aca 	vsub.f32	s7, s11, s20
 800acea:	ee37 0a60 	vsub.f32	s0, s14, s1
 800acee:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800acf2:	ee37 7a20 	vadd.f32	s14, s14, s1
 800acf6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800acfa:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800acfe:	ee79 3a05 	vadd.f32	s7, s18, s10
 800ad02:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800ad06:	ee39 5a45 	vsub.f32	s10, s18, s10
 800ad0a:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800ad0e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800ad12:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800ad16:	ee31 6a06 	vadd.f32	s12, s2, s12
 800ad1a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800ad1e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800ad22:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800ad26:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800ad2a:	ee33 3a68 	vsub.f32	s6, s6, s17
 800ad2e:	ee36 0a88 	vadd.f32	s0, s13, s16
 800ad32:	ee75 8a86 	vadd.f32	s17, s11, s12
 800ad36:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800ad3a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800ad3e:	ee75 6a62 	vsub.f32	s13, s10, s5
 800ad42:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800ad46:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800ad4a:	ee33 1a89 	vadd.f32	s2, s7, s18
 800ad4e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800ad52:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800ad56:	ee75 4a22 	vadd.f32	s9, s10, s5
 800ad5a:	ee32 5a27 	vadd.f32	s10, s4, s15
 800ad5e:	ee72 7a67 	vsub.f32	s15, s4, s15
 800ad62:	ee33 8a06 	vadd.f32	s16, s6, s12
 800ad66:	ee75 2a87 	vadd.f32	s5, s11, s14
 800ad6a:	ee31 9a28 	vadd.f32	s18, s2, s17
 800ad6e:	ee33 6a46 	vsub.f32	s12, s6, s12
 800ad72:	ee74 0a61 	vsub.f32	s1, s8, s3
 800ad76:	ee33 2a80 	vadd.f32	s4, s7, s0
 800ad7a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800ad7e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800ad82:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ad86:	ee31 1a68 	vsub.f32	s2, s2, s17
 800ad8a:	ee34 4a21 	vadd.f32	s8, s8, s3
 800ad8e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800ad92:	ee74 4a85 	vadd.f32	s9, s9, s10
 800ad96:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ad9a:	44d8      	add	r8, fp
 800ad9c:	45c1      	cmp	r9, r8
 800ad9e:	ed8e 9a00 	vstr	s18, [lr]
 800ada2:	ed85 1a01 	vstr	s2, [r5, #4]
 800ada6:	449e      	add	lr, r3
 800ada8:	ed8c 8a00 	vstr	s16, [ip]
 800adac:	441d      	add	r5, r3
 800adae:	ed80 6a00 	vstr	s12, [r0]
 800adb2:	edcc 0a01 	vstr	s1, [ip, #4]
 800adb6:	ed80 4a01 	vstr	s8, [r0, #4]
 800adba:	449c      	add	ip, r3
 800adbc:	ed87 2a00 	vstr	s4, [r7]
 800adc0:	4418      	add	r0, r3
 800adc2:	ed41 3a01 	vstr	s7, [r1, #-4]
 800adc6:	ed42 2a01 	vstr	s5, [r2, #-4]
 800adca:	ed86 7a00 	vstr	s14, [r6]
 800adce:	ed87 3a01 	vstr	s6, [r7, #4]
 800add2:	edc1 4a00 	vstr	s9, [r1]
 800add6:	441f      	add	r7, r3
 800add8:	edc2 5a00 	vstr	s11, [r2]
 800addc:	4419      	add	r1, r3
 800adde:	edc6 6a01 	vstr	s13, [r6, #4]
 800ade2:	441a      	add	r2, r3
 800ade4:	441e      	add	r6, r3
 800ade6:	f63f af44 	bhi.w	800ac72 <arm_radix8_butterfly_f32+0x66>
 800adea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800adec:	2907      	cmp	r1, #7
 800adee:	4620      	mov	r0, r4
 800adf0:	f240 81e9 	bls.w	800b1c6 <arm_radix8_butterfly_f32+0x5ba>
 800adf4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800adf8:	193e      	adds	r6, r7, r4
 800adfa:	1935      	adds	r5, r6, r4
 800adfc:	9c03      	ldr	r4, [sp, #12]
 800adfe:	9000      	str	r0, [sp, #0]
 800ae00:	4622      	mov	r2, r4
 800ae02:	3201      	adds	r2, #1
 800ae04:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ae08:	9900      	ldr	r1, [sp, #0]
 800ae0a:	1828      	adds	r0, r5, r0
 800ae0c:	eb00 0e01 	add.w	lr, r0, r1
 800ae10:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ae12:	440a      	add	r2, r1
 800ae14:	eb04 0c01 	add.w	ip, r4, r1
 800ae18:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800ae1c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800ae20:	9a00      	ldr	r2, [sp, #0]
 800ae22:	940f      	str	r4, [sp, #60]	; 0x3c
 800ae24:	00ed      	lsls	r5, r5, #3
 800ae26:	9511      	str	r5, [sp, #68]	; 0x44
 800ae28:	00d5      	lsls	r5, r2, #3
 800ae2a:	950d      	str	r5, [sp, #52]	; 0x34
 800ae2c:	9d01      	ldr	r5, [sp, #4]
 800ae2e:	3508      	adds	r5, #8
 800ae30:	9516      	str	r5, [sp, #88]	; 0x58
 800ae32:	9d02      	ldr	r5, [sp, #8]
 800ae34:	3508      	adds	r5, #8
 800ae36:	0114      	lsls	r4, r2, #4
 800ae38:	9517      	str	r5, [sp, #92]	; 0x5c
 800ae3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae3c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ae3e:	940e      	str	r4, [sp, #56]	; 0x38
 800ae40:	00c0      	lsls	r0, r0, #3
 800ae42:	9010      	str	r0, [sp, #64]	; 0x40
 800ae44:	18aa      	adds	r2, r5, r2
 800ae46:	9207      	str	r2, [sp, #28]
 800ae48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ae4c:	18aa      	adds	r2, r5, r2
 800ae4e:	9208      	str	r2, [sp, #32]
 800ae50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ae52:	18aa      	adds	r2, r5, r2
 800ae54:	9209      	str	r2, [sp, #36]	; 0x24
 800ae56:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ae5a:	f10e 0204 	add.w	r2, lr, #4
 800ae5e:	920a      	str	r2, [sp, #40]	; 0x28
 800ae60:	00c9      	lsls	r1, r1, #3
 800ae62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae64:	310c      	adds	r1, #12
 800ae66:	00f6      	lsls	r6, r6, #3
 800ae68:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800ae6c:	9114      	str	r1, [sp, #80]	; 0x50
 800ae6e:	18a9      	adds	r1, r5, r2
 800ae70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae72:	9612      	str	r6, [sp, #72]	; 0x48
 800ae74:	00ff      	lsls	r7, r7, #3
 800ae76:	19ae      	adds	r6, r5, r6
 800ae78:	3008      	adds	r0, #8
 800ae7a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800ae7e:	9606      	str	r6, [sp, #24]
 800ae80:	9019      	str	r0, [sp, #100]	; 0x64
 800ae82:	18aa      	adds	r2, r5, r2
 800ae84:	0164      	lsls	r4, r4, #5
 800ae86:	19ee      	adds	r6, r5, r7
 800ae88:	f10c 000c 	add.w	r0, ip, #12
 800ae8c:	9713      	str	r7, [sp, #76]	; 0x4c
 800ae8e:	9604      	str	r6, [sp, #16]
 800ae90:	9015      	str	r0, [sp, #84]	; 0x54
 800ae92:	9103      	str	r1, [sp, #12]
 800ae94:	9205      	str	r2, [sp, #20]
 800ae96:	f104 0208 	add.w	r2, r4, #8
 800ae9a:	9218      	str	r2, [sp, #96]	; 0x60
 800ae9c:	f04f 0801 	mov.w	r8, #1
 800aea0:	2200      	movs	r2, #0
 800aea2:	f102 0108 	add.w	r1, r2, #8
 800aea6:	460f      	mov	r7, r1
 800aea8:	910b      	str	r1, [sp, #44]	; 0x2c
 800aeaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aeac:	188e      	adds	r6, r1, r2
 800aeae:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aeb0:	188d      	adds	r5, r1, r2
 800aeb2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800aeb4:	188c      	adds	r4, r1, r2
 800aeb6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800aeb8:	1888      	adds	r0, r1, r2
 800aeba:	9914      	ldr	r1, [sp, #80]	; 0x50
 800aebc:	eb01 0c02 	add.w	ip, r1, r2
 800aec0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800aec2:	440a      	add	r2, r1
 800aec4:	9903      	ldr	r1, [sp, #12]
 800aec6:	edd1 fa00 	vldr	s31, [r1]
 800aeca:	9905      	ldr	r1, [sp, #20]
 800aecc:	ed91 fa00 	vldr	s30, [r1]
 800aed0:	9904      	ldr	r1, [sp, #16]
 800aed2:	edd1 ea00 	vldr	s29, [r1]
 800aed6:	9906      	ldr	r1, [sp, #24]
 800aed8:	ed91 ea00 	vldr	s28, [r1]
 800aedc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aede:	edd1 da00 	vldr	s27, [r1]
 800aee2:	9908      	ldr	r1, [sp, #32]
 800aee4:	ed91 da00 	vldr	s26, [r1]
 800aee8:	9907      	ldr	r1, [sp, #28]
 800aeea:	edd1 ca00 	vldr	s25, [r1]
 800aeee:	9903      	ldr	r1, [sp, #12]
 800aef0:	ed91 ca01 	vldr	s24, [r1, #4]
 800aef4:	9905      	ldr	r1, [sp, #20]
 800aef6:	edd1 ba01 	vldr	s23, [r1, #4]
 800aefa:	9904      	ldr	r1, [sp, #16]
 800aefc:	edd1 aa01 	vldr	s21, [r1, #4]
 800af00:	9906      	ldr	r1, [sp, #24]
 800af02:	ed91 aa01 	vldr	s20, [r1, #4]
 800af06:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af08:	edd1 7a01 	vldr	s15, [r1, #4]
 800af0c:	9908      	ldr	r1, [sp, #32]
 800af0e:	edcd 7a00 	vstr	s15, [sp]
 800af12:	edd1 7a01 	vldr	s15, [r1, #4]
 800af16:	9907      	ldr	r1, [sp, #28]
 800af18:	edcd 7a01 	vstr	s15, [sp, #4]
 800af1c:	edd1 7a01 	vldr	s15, [r1, #4]
 800af20:	eb0a 0e07 	add.w	lr, sl, r7
 800af24:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800af26:	edcd 7a02 	vstr	s15, [sp, #8]
 800af2a:	eb0c 010a 	add.w	r1, ip, sl
 800af2e:	4456      	add	r6, sl
 800af30:	4455      	add	r5, sl
 800af32:	4454      	add	r4, sl
 800af34:	4450      	add	r0, sl
 800af36:	4452      	add	r2, sl
 800af38:	46c4      	mov	ip, r8
 800af3a:	e001      	b.n	800af40 <arm_radix8_butterfly_f32+0x334>
 800af3c:	3f3504f3 	.word	0x3f3504f3
 800af40:	ed96 5a00 	vldr	s10, [r6]
 800af44:	ed52 9a01 	vldr	s19, [r2, #-4]
 800af48:	ed11 6a01 	vldr	s12, [r1, #-4]
 800af4c:	edd0 7a00 	vldr	s15, [r0]
 800af50:	ed17 7a01 	vldr	s14, [r7, #-4]
 800af54:	edde 3a00 	vldr	s7, [lr]
 800af58:	ed94 3a00 	vldr	s6, [r4]
 800af5c:	ed95 2a00 	vldr	s4, [r5]
 800af60:	ed9e 0a01 	vldr	s0, [lr, #4]
 800af64:	ee33 8a85 	vadd.f32	s16, s7, s10
 800af68:	ee32 1a06 	vadd.f32	s2, s4, s12
 800af6c:	ee33 4a29 	vadd.f32	s8, s6, s19
 800af70:	ee77 4a87 	vadd.f32	s9, s15, s14
 800af74:	ee78 1a04 	vadd.f32	s3, s16, s8
 800af78:	ee71 6a24 	vadd.f32	s13, s2, s9
 800af7c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800af80:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800af84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af88:	ed8e 6a00 	vstr	s12, [lr]
 800af8c:	edd0 8a01 	vldr	s17, [r0, #4]
 800af90:	ed95 9a01 	vldr	s18, [r5, #4]
 800af94:	edd1 2a00 	vldr	s5, [r1]
 800af98:	ed97 7a00 	vldr	s14, [r7]
 800af9c:	edd4 0a01 	vldr	s1, [r4, #4]
 800afa0:	ed96 6a01 	vldr	s12, [r6, #4]
 800afa4:	edd2 5a00 	vldr	s11, [r2]
 800afa8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800afac:	ee33 3a69 	vsub.f32	s6, s6, s19
 800afb0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800afb4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800afb8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800afbc:	ee38 7a87 	vadd.f32	s14, s17, s14
 800afc0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800afc4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800afc8:	ee75 8a69 	vsub.f32	s17, s10, s19
 800afcc:	ee32 9a27 	vadd.f32	s18, s4, s15
 800afd0:	ee35 5a29 	vadd.f32	s10, s10, s19
 800afd4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800afd8:	ee30 2a06 	vadd.f32	s4, s0, s12
 800afdc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800afe0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800afe4:	ee32 9a08 	vadd.f32	s18, s4, s16
 800afe8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800afec:	ee32 2a48 	vsub.f32	s4, s4, s16
 800aff0:	ee71 4a64 	vsub.f32	s9, s2, s9
 800aff4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800aff8:	ee32 1a87 	vadd.f32	s2, s5, s14
 800affc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b000:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b004:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b008:	ee73 0a29 	vadd.f32	s1, s6, s19
 800b00c:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b010:	ee33 3a69 	vsub.f32	s6, s6, s19
 800b014:	ee32 7a64 	vsub.f32	s14, s4, s9
 800b018:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800b01c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b020:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b024:	ee75 8a85 	vadd.f32	s17, s11, s10
 800b028:	ee74 3a22 	vadd.f32	s7, s8, s5
 800b02c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800b030:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b034:	ee79 1a41 	vsub.f32	s3, s18, s2
 800b038:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800b03c:	ee76 5a43 	vsub.f32	s11, s12, s6
 800b040:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b044:	ee72 4a24 	vadd.f32	s9, s4, s9
 800b048:	ee30 4a60 	vsub.f32	s8, s0, s1
 800b04c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800b050:	ee30 0a20 	vadd.f32	s0, s0, s1
 800b054:	ee77 9a85 	vadd.f32	s19, s15, s10
 800b058:	ee36 6a03 	vadd.f32	s12, s12, s6
 800b05c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b060:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800b064:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800b068:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800b06c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800b070:	ee39 1a01 	vadd.f32	s2, s18, s2
 800b074:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800b078:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800b07c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800b080:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800b084:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800b088:	ee35 3a03 	vadd.f32	s6, s10, s6
 800b08c:	ee72 6a66 	vsub.f32	s13, s4, s13
 800b090:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800b094:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800b098:	ed9d 4a02 	vldr	s8, [sp, #8]
 800b09c:	ed8e 1a01 	vstr	s2, [lr, #4]
 800b0a0:	ee77 3a63 	vsub.f32	s7, s14, s7
 800b0a4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b0a8:	ed9d 7a01 	vldr	s14, [sp, #4]
 800b0ac:	ed86 3a00 	vstr	s6, [r6]
 800b0b0:	ee30 9a89 	vadd.f32	s18, s1, s18
 800b0b4:	ee32 2a05 	vadd.f32	s4, s4, s10
 800b0b8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800b0bc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800b0c0:	ee67 2a22 	vmul.f32	s5, s14, s5
 800b0c4:	ee64 1a00 	vmul.f32	s3, s8, s0
 800b0c8:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b0cc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800b0d0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800b0d4:	ee64 8a28 	vmul.f32	s17, s8, s17
 800b0d8:	ed9d 4a00 	vldr	s8, [sp]
 800b0dc:	edc6 6a01 	vstr	s13, [r6, #4]
 800b0e0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b0e4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800b0e8:	ee64 9a29 	vmul.f32	s19, s8, s19
 800b0ec:	ee24 4a25 	vmul.f32	s8, s8, s11
 800b0f0:	ee30 7a87 	vadd.f32	s14, s1, s14
 800b0f4:	ee74 4a84 	vadd.f32	s9, s9, s8
 800b0f8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800b0fc:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800b100:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800b104:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800b108:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800b10c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800b110:	ee75 1a21 	vadd.f32	s3, s10, s3
 800b114:	ee30 0a68 	vsub.f32	s0, s0, s17
 800b118:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800b11c:	ee70 0a84 	vadd.f32	s1, s1, s8
 800b120:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b124:	44dc      	add	ip, fp
 800b126:	45e1      	cmp	r9, ip
 800b128:	ed84 9a00 	vstr	s18, [r4]
 800b12c:	edc4 3a01 	vstr	s7, [r4, #4]
 800b130:	449e      	add	lr, r3
 800b132:	ed02 7a01 	vstr	s14, [r2, #-4]
 800b136:	edc2 2a00 	vstr	s5, [r2]
 800b13a:	441e      	add	r6, r3
 800b13c:	ed85 2a00 	vstr	s4, [r5]
 800b140:	ed85 8a01 	vstr	s16, [r5, #4]
 800b144:	441c      	add	r4, r3
 800b146:	ed47 1a01 	vstr	s3, [r7, #-4]
 800b14a:	ed87 0a00 	vstr	s0, [r7]
 800b14e:	441a      	add	r2, r3
 800b150:	ed41 4a01 	vstr	s9, [r1, #-4]
 800b154:	edc1 9a00 	vstr	s19, [r1]
 800b158:	441d      	add	r5, r3
 800b15a:	edc0 0a00 	vstr	s1, [r0]
 800b15e:	441f      	add	r7, r3
 800b160:	ed80 6a01 	vstr	s12, [r0, #4]
 800b164:	4419      	add	r1, r3
 800b166:	4418      	add	r0, r3
 800b168:	f63f aeea 	bhi.w	800af40 <arm_radix8_butterfly_f32+0x334>
 800b16c:	9a03      	ldr	r2, [sp, #12]
 800b16e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b170:	440a      	add	r2, r1
 800b172:	9203      	str	r2, [sp, #12]
 800b174:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b176:	9a05      	ldr	r2, [sp, #20]
 800b178:	440a      	add	r2, r1
 800b17a:	9205      	str	r2, [sp, #20]
 800b17c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b17e:	9a04      	ldr	r2, [sp, #16]
 800b180:	440a      	add	r2, r1
 800b182:	9204      	str	r2, [sp, #16]
 800b184:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b186:	9a06      	ldr	r2, [sp, #24]
 800b188:	440a      	add	r2, r1
 800b18a:	9206      	str	r2, [sp, #24]
 800b18c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b190:	440a      	add	r2, r1
 800b192:	9209      	str	r2, [sp, #36]	; 0x24
 800b194:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b196:	9a08      	ldr	r2, [sp, #32]
 800b198:	440a      	add	r2, r1
 800b19a:	9208      	str	r2, [sp, #32]
 800b19c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b19e:	9a07      	ldr	r2, [sp, #28]
 800b1a0:	440a      	add	r2, r1
 800b1a2:	9207      	str	r2, [sp, #28]
 800b1a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b1a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1a8:	f108 0801 	add.w	r8, r8, #1
 800b1ac:	3208      	adds	r2, #8
 800b1ae:	4588      	cmp	r8, r1
 800b1b0:	920a      	str	r2, [sp, #40]	; 0x28
 800b1b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1b4:	f47f ae75 	bne.w	800aea2 <arm_radix8_butterfly_f32+0x296>
 800b1b8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	46c3      	mov	fp, r8
 800b1c0:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800b1c4:	e532      	b.n	800ac2c <arm_radix8_butterfly_f32+0x20>
 800b1c6:	b01d      	add	sp, #116	; 0x74
 800b1c8:	ecbd 8b10 	vpop	{d8-d15}
 800b1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1d0 <calloc>:
 800b1d0:	4b02      	ldr	r3, [pc, #8]	; (800b1dc <calloc+0xc>)
 800b1d2:	460a      	mov	r2, r1
 800b1d4:	4601      	mov	r1, r0
 800b1d6:	6818      	ldr	r0, [r3, #0]
 800b1d8:	f000 b83f 	b.w	800b25a <_calloc_r>
 800b1dc:	20000010 	.word	0x20000010

0800b1e0 <__errno>:
 800b1e0:	4b01      	ldr	r3, [pc, #4]	; (800b1e8 <__errno+0x8>)
 800b1e2:	6818      	ldr	r0, [r3, #0]
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	20000010 	.word	0x20000010

0800b1ec <__libc_init_array>:
 800b1ec:	b570      	push	{r4, r5, r6, lr}
 800b1ee:	4e0d      	ldr	r6, [pc, #52]	; (800b224 <__libc_init_array+0x38>)
 800b1f0:	4c0d      	ldr	r4, [pc, #52]	; (800b228 <__libc_init_array+0x3c>)
 800b1f2:	1ba4      	subs	r4, r4, r6
 800b1f4:	10a4      	asrs	r4, r4, #2
 800b1f6:	2500      	movs	r5, #0
 800b1f8:	42a5      	cmp	r5, r4
 800b1fa:	d109      	bne.n	800b210 <__libc_init_array+0x24>
 800b1fc:	4e0b      	ldr	r6, [pc, #44]	; (800b22c <__libc_init_array+0x40>)
 800b1fe:	4c0c      	ldr	r4, [pc, #48]	; (800b230 <__libc_init_array+0x44>)
 800b200:	f001 f880 	bl	800c304 <_init>
 800b204:	1ba4      	subs	r4, r4, r6
 800b206:	10a4      	asrs	r4, r4, #2
 800b208:	2500      	movs	r5, #0
 800b20a:	42a5      	cmp	r5, r4
 800b20c:	d105      	bne.n	800b21a <__libc_init_array+0x2e>
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b214:	4798      	blx	r3
 800b216:	3501      	adds	r5, #1
 800b218:	e7ee      	b.n	800b1f8 <__libc_init_array+0xc>
 800b21a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b21e:	4798      	blx	r3
 800b220:	3501      	adds	r5, #1
 800b222:	e7f2      	b.n	800b20a <__libc_init_array+0x1e>
 800b224:	0801fc44 	.word	0x0801fc44
 800b228:	0801fc44 	.word	0x0801fc44
 800b22c:	0801fc44 	.word	0x0801fc44
 800b230:	0801fc48 	.word	0x0801fc48

0800b234 <memcpy>:
 800b234:	b510      	push	{r4, lr}
 800b236:	1e43      	subs	r3, r0, #1
 800b238:	440a      	add	r2, r1
 800b23a:	4291      	cmp	r1, r2
 800b23c:	d100      	bne.n	800b240 <memcpy+0xc>
 800b23e:	bd10      	pop	{r4, pc}
 800b240:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b244:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b248:	e7f7      	b.n	800b23a <memcpy+0x6>

0800b24a <memset>:
 800b24a:	4402      	add	r2, r0
 800b24c:	4603      	mov	r3, r0
 800b24e:	4293      	cmp	r3, r2
 800b250:	d100      	bne.n	800b254 <memset+0xa>
 800b252:	4770      	bx	lr
 800b254:	f803 1b01 	strb.w	r1, [r3], #1
 800b258:	e7f9      	b.n	800b24e <memset+0x4>

0800b25a <_calloc_r>:
 800b25a:	b538      	push	{r3, r4, r5, lr}
 800b25c:	fb02 f401 	mul.w	r4, r2, r1
 800b260:	4621      	mov	r1, r4
 800b262:	f000 f809 	bl	800b278 <_malloc_r>
 800b266:	4605      	mov	r5, r0
 800b268:	b118      	cbz	r0, 800b272 <_calloc_r+0x18>
 800b26a:	4622      	mov	r2, r4
 800b26c:	2100      	movs	r1, #0
 800b26e:	f7ff ffec 	bl	800b24a <memset>
 800b272:	4628      	mov	r0, r5
 800b274:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b278 <_malloc_r>:
 800b278:	b570      	push	{r4, r5, r6, lr}
 800b27a:	1ccd      	adds	r5, r1, #3
 800b27c:	f025 0503 	bic.w	r5, r5, #3
 800b280:	3508      	adds	r5, #8
 800b282:	2d0c      	cmp	r5, #12
 800b284:	bf38      	it	cc
 800b286:	250c      	movcc	r5, #12
 800b288:	2d00      	cmp	r5, #0
 800b28a:	4606      	mov	r6, r0
 800b28c:	db01      	blt.n	800b292 <_malloc_r+0x1a>
 800b28e:	42a9      	cmp	r1, r5
 800b290:	d903      	bls.n	800b29a <_malloc_r+0x22>
 800b292:	230c      	movs	r3, #12
 800b294:	6033      	str	r3, [r6, #0]
 800b296:	2000      	movs	r0, #0
 800b298:	bd70      	pop	{r4, r5, r6, pc}
 800b29a:	f000 f857 	bl	800b34c <__malloc_lock>
 800b29e:	4a21      	ldr	r2, [pc, #132]	; (800b324 <_malloc_r+0xac>)
 800b2a0:	6814      	ldr	r4, [r2, #0]
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	b991      	cbnz	r1, 800b2cc <_malloc_r+0x54>
 800b2a6:	4c20      	ldr	r4, [pc, #128]	; (800b328 <_malloc_r+0xb0>)
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	b91b      	cbnz	r3, 800b2b4 <_malloc_r+0x3c>
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f000 f83d 	bl	800b32c <_sbrk_r>
 800b2b2:	6020      	str	r0, [r4, #0]
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f000 f838 	bl	800b32c <_sbrk_r>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d124      	bne.n	800b30a <_malloc_r+0x92>
 800b2c0:	230c      	movs	r3, #12
 800b2c2:	6033      	str	r3, [r6, #0]
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	f000 f842 	bl	800b34e <__malloc_unlock>
 800b2ca:	e7e4      	b.n	800b296 <_malloc_r+0x1e>
 800b2cc:	680b      	ldr	r3, [r1, #0]
 800b2ce:	1b5b      	subs	r3, r3, r5
 800b2d0:	d418      	bmi.n	800b304 <_malloc_r+0x8c>
 800b2d2:	2b0b      	cmp	r3, #11
 800b2d4:	d90f      	bls.n	800b2f6 <_malloc_r+0x7e>
 800b2d6:	600b      	str	r3, [r1, #0]
 800b2d8:	50cd      	str	r5, [r1, r3]
 800b2da:	18cc      	adds	r4, r1, r3
 800b2dc:	4630      	mov	r0, r6
 800b2de:	f000 f836 	bl	800b34e <__malloc_unlock>
 800b2e2:	f104 000b 	add.w	r0, r4, #11
 800b2e6:	1d23      	adds	r3, r4, #4
 800b2e8:	f020 0007 	bic.w	r0, r0, #7
 800b2ec:	1ac3      	subs	r3, r0, r3
 800b2ee:	d0d3      	beq.n	800b298 <_malloc_r+0x20>
 800b2f0:	425a      	negs	r2, r3
 800b2f2:	50e2      	str	r2, [r4, r3]
 800b2f4:	e7d0      	b.n	800b298 <_malloc_r+0x20>
 800b2f6:	428c      	cmp	r4, r1
 800b2f8:	684b      	ldr	r3, [r1, #4]
 800b2fa:	bf16      	itet	ne
 800b2fc:	6063      	strne	r3, [r4, #4]
 800b2fe:	6013      	streq	r3, [r2, #0]
 800b300:	460c      	movne	r4, r1
 800b302:	e7eb      	b.n	800b2dc <_malloc_r+0x64>
 800b304:	460c      	mov	r4, r1
 800b306:	6849      	ldr	r1, [r1, #4]
 800b308:	e7cc      	b.n	800b2a4 <_malloc_r+0x2c>
 800b30a:	1cc4      	adds	r4, r0, #3
 800b30c:	f024 0403 	bic.w	r4, r4, #3
 800b310:	42a0      	cmp	r0, r4
 800b312:	d005      	beq.n	800b320 <_malloc_r+0xa8>
 800b314:	1a21      	subs	r1, r4, r0
 800b316:	4630      	mov	r0, r6
 800b318:	f000 f808 	bl	800b32c <_sbrk_r>
 800b31c:	3001      	adds	r0, #1
 800b31e:	d0cf      	beq.n	800b2c0 <_malloc_r+0x48>
 800b320:	6025      	str	r5, [r4, #0]
 800b322:	e7db      	b.n	800b2dc <_malloc_r+0x64>
 800b324:	20000ff8 	.word	0x20000ff8
 800b328:	20000ffc 	.word	0x20000ffc

0800b32c <_sbrk_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4c06      	ldr	r4, [pc, #24]	; (800b348 <_sbrk_r+0x1c>)
 800b330:	2300      	movs	r3, #0
 800b332:	4605      	mov	r5, r0
 800b334:	4608      	mov	r0, r1
 800b336:	6023      	str	r3, [r4, #0]
 800b338:	f7f7 f932 	bl	80025a0 <_sbrk>
 800b33c:	1c43      	adds	r3, r0, #1
 800b33e:	d102      	bne.n	800b346 <_sbrk_r+0x1a>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	b103      	cbz	r3, 800b346 <_sbrk_r+0x1a>
 800b344:	602b      	str	r3, [r5, #0]
 800b346:	bd38      	pop	{r3, r4, r5, pc}
 800b348:	20001e0c 	.word	0x20001e0c

0800b34c <__malloc_lock>:
 800b34c:	4770      	bx	lr

0800b34e <__malloc_unlock>:
 800b34e:	4770      	bx	lr

0800b350 <cosf>:
 800b350:	ee10 3a10 	vmov	r3, s0
 800b354:	b507      	push	{r0, r1, r2, lr}
 800b356:	4a1c      	ldr	r2, [pc, #112]	; (800b3c8 <cosf+0x78>)
 800b358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b35c:	4293      	cmp	r3, r2
 800b35e:	dc04      	bgt.n	800b36a <cosf+0x1a>
 800b360:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800b3cc <cosf+0x7c>
 800b364:	f000 fbe6 	bl	800bb34 <__kernel_cosf>
 800b368:	e004      	b.n	800b374 <cosf+0x24>
 800b36a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b36e:	db04      	blt.n	800b37a <cosf+0x2a>
 800b370:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b374:	b003      	add	sp, #12
 800b376:	f85d fb04 	ldr.w	pc, [sp], #4
 800b37a:	4668      	mov	r0, sp
 800b37c:	f000 faaa 	bl	800b8d4 <__ieee754_rem_pio2f>
 800b380:	f000 0003 	and.w	r0, r0, #3
 800b384:	2801      	cmp	r0, #1
 800b386:	d007      	beq.n	800b398 <cosf+0x48>
 800b388:	2802      	cmp	r0, #2
 800b38a:	d00e      	beq.n	800b3aa <cosf+0x5a>
 800b38c:	b9a0      	cbnz	r0, 800b3b8 <cosf+0x68>
 800b38e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b392:	ed9d 0a00 	vldr	s0, [sp]
 800b396:	e7e5      	b.n	800b364 <cosf+0x14>
 800b398:	eddd 0a01 	vldr	s1, [sp, #4]
 800b39c:	ed9d 0a00 	vldr	s0, [sp]
 800b3a0:	f000 fea8 	bl	800c0f4 <__kernel_sinf>
 800b3a4:	eeb1 0a40 	vneg.f32	s0, s0
 800b3a8:	e7e4      	b.n	800b374 <cosf+0x24>
 800b3aa:	eddd 0a01 	vldr	s1, [sp, #4]
 800b3ae:	ed9d 0a00 	vldr	s0, [sp]
 800b3b2:	f000 fbbf 	bl	800bb34 <__kernel_cosf>
 800b3b6:	e7f5      	b.n	800b3a4 <cosf+0x54>
 800b3b8:	2001      	movs	r0, #1
 800b3ba:	eddd 0a01 	vldr	s1, [sp, #4]
 800b3be:	ed9d 0a00 	vldr	s0, [sp]
 800b3c2:	f000 fe97 	bl	800c0f4 <__kernel_sinf>
 800b3c6:	e7d5      	b.n	800b374 <cosf+0x24>
 800b3c8:	3f490fd8 	.word	0x3f490fd8
 800b3cc:	00000000 	.word	0x00000000

0800b3d0 <log>:
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	ed2d 8b02 	vpush	{d8}
 800b3d6:	b08a      	sub	sp, #40	; 0x28
 800b3d8:	ec55 4b10 	vmov	r4, r5, d0
 800b3dc:	f000 f8c8 	bl	800b570 <__ieee754_log>
 800b3e0:	4b36      	ldr	r3, [pc, #216]	; (800b4bc <log+0xec>)
 800b3e2:	eeb0 8a40 	vmov.f32	s16, s0
 800b3e6:	eef0 8a60 	vmov.f32	s17, s1
 800b3ea:	f993 6000 	ldrsb.w	r6, [r3]
 800b3ee:	1c73      	adds	r3, r6, #1
 800b3f0:	d05b      	beq.n	800b4aa <log+0xda>
 800b3f2:	4622      	mov	r2, r4
 800b3f4:	462b      	mov	r3, r5
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	f7f5 fbbf 	bl	8000b7c <__aeabi_dcmpun>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d153      	bne.n	800b4aa <log+0xda>
 800b402:	2200      	movs	r2, #0
 800b404:	2300      	movs	r3, #0
 800b406:	4620      	mov	r0, r4
 800b408:	4629      	mov	r1, r5
 800b40a:	f7f5 fbad 	bl	8000b68 <__aeabi_dcmpgt>
 800b40e:	2800      	cmp	r0, #0
 800b410:	d14b      	bne.n	800b4aa <log+0xda>
 800b412:	4b2b      	ldr	r3, [pc, #172]	; (800b4c0 <log+0xf0>)
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	9008      	str	r0, [sp, #32]
 800b418:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b41c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b420:	b9a6      	cbnz	r6, 800b44c <log+0x7c>
 800b422:	4b28      	ldr	r3, [pc, #160]	; (800b4c4 <log+0xf4>)
 800b424:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b428:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b42c:	4620      	mov	r0, r4
 800b42e:	2200      	movs	r2, #0
 800b430:	2300      	movs	r3, #0
 800b432:	4629      	mov	r1, r5
 800b434:	f7f5 fb70 	bl	8000b18 <__aeabi_dcmpeq>
 800b438:	bb40      	cbnz	r0, 800b48c <log+0xbc>
 800b43a:	2301      	movs	r3, #1
 800b43c:	2e02      	cmp	r6, #2
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	d119      	bne.n	800b476 <log+0xa6>
 800b442:	f7ff fecd 	bl	800b1e0 <__errno>
 800b446:	2321      	movs	r3, #33	; 0x21
 800b448:	6003      	str	r3, [r0, #0]
 800b44a:	e019      	b.n	800b480 <log+0xb0>
 800b44c:	4b1e      	ldr	r3, [pc, #120]	; (800b4c8 <log+0xf8>)
 800b44e:	2200      	movs	r2, #0
 800b450:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b454:	4620      	mov	r0, r4
 800b456:	2200      	movs	r2, #0
 800b458:	2300      	movs	r3, #0
 800b45a:	4629      	mov	r1, r5
 800b45c:	f7f5 fb5c 	bl	8000b18 <__aeabi_dcmpeq>
 800b460:	2800      	cmp	r0, #0
 800b462:	d0ea      	beq.n	800b43a <log+0x6a>
 800b464:	2302      	movs	r3, #2
 800b466:	429e      	cmp	r6, r3
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	d111      	bne.n	800b490 <log+0xc0>
 800b46c:	f7ff feb8 	bl	800b1e0 <__errno>
 800b470:	2322      	movs	r3, #34	; 0x22
 800b472:	6003      	str	r3, [r0, #0]
 800b474:	e011      	b.n	800b49a <log+0xca>
 800b476:	4668      	mov	r0, sp
 800b478:	f000 fe84 	bl	800c184 <matherr>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d0e0      	beq.n	800b442 <log+0x72>
 800b480:	4812      	ldr	r0, [pc, #72]	; (800b4cc <log+0xfc>)
 800b482:	f000 fe81 	bl	800c188 <nan>
 800b486:	ed8d 0b06 	vstr	d0, [sp, #24]
 800b48a:	e006      	b.n	800b49a <log+0xca>
 800b48c:	2302      	movs	r3, #2
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	4668      	mov	r0, sp
 800b492:	f000 fe77 	bl	800c184 <matherr>
 800b496:	2800      	cmp	r0, #0
 800b498:	d0e8      	beq.n	800b46c <log+0x9c>
 800b49a:	9b08      	ldr	r3, [sp, #32]
 800b49c:	b11b      	cbz	r3, 800b4a6 <log+0xd6>
 800b49e:	f7ff fe9f 	bl	800b1e0 <__errno>
 800b4a2:	9b08      	ldr	r3, [sp, #32]
 800b4a4:	6003      	str	r3, [r0, #0]
 800b4a6:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b4aa:	eeb0 0a48 	vmov.f32	s0, s16
 800b4ae:	eef0 0a68 	vmov.f32	s1, s17
 800b4b2:	b00a      	add	sp, #40	; 0x28
 800b4b4:	ecbd 8b02 	vpop	{d8}
 800b4b8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000074 	.word	0x20000074
 800b4c0:	0801f860 	.word	0x0801f860
 800b4c4:	c7efffff 	.word	0xc7efffff
 800b4c8:	fff00000 	.word	0xfff00000
 800b4cc:	0801f869 	.word	0x0801f869

0800b4d0 <sqrtf>:
 800b4d0:	b510      	push	{r4, lr}
 800b4d2:	ed2d 8b02 	vpush	{d8}
 800b4d6:	b08a      	sub	sp, #40	; 0x28
 800b4d8:	eeb0 8a40 	vmov.f32	s16, s0
 800b4dc:	f000 fb26 	bl	800bb2c <__ieee754_sqrtf>
 800b4e0:	4b21      	ldr	r3, [pc, #132]	; (800b568 <sqrtf+0x98>)
 800b4e2:	f993 4000 	ldrsb.w	r4, [r3]
 800b4e6:	1c63      	adds	r3, r4, #1
 800b4e8:	d02c      	beq.n	800b544 <sqrtf+0x74>
 800b4ea:	eeb4 8a48 	vcmp.f32	s16, s16
 800b4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f2:	d627      	bvs.n	800b544 <sqrtf+0x74>
 800b4f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4fc:	d522      	bpl.n	800b544 <sqrtf+0x74>
 800b4fe:	2301      	movs	r3, #1
 800b500:	9300      	str	r3, [sp, #0]
 800b502:	4b1a      	ldr	r3, [pc, #104]	; (800b56c <sqrtf+0x9c>)
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	ee18 0a10 	vmov	r0, s16
 800b50a:	2300      	movs	r3, #0
 800b50c:	9308      	str	r3, [sp, #32]
 800b50e:	f7f5 f843 	bl	8000598 <__aeabi_f2d>
 800b512:	2200      	movs	r2, #0
 800b514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b51c:	2300      	movs	r3, #0
 800b51e:	b9ac      	cbnz	r4, 800b54c <sqrtf+0x7c>
 800b520:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b524:	4668      	mov	r0, sp
 800b526:	f000 fe2d 	bl	800c184 <matherr>
 800b52a:	b1b8      	cbz	r0, 800b55c <sqrtf+0x8c>
 800b52c:	9b08      	ldr	r3, [sp, #32]
 800b52e:	b11b      	cbz	r3, 800b538 <sqrtf+0x68>
 800b530:	f7ff fe56 	bl	800b1e0 <__errno>
 800b534:	9b08      	ldr	r3, [sp, #32]
 800b536:	6003      	str	r3, [r0, #0]
 800b538:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b53c:	f7f5 fb34 	bl	8000ba8 <__aeabi_d2f>
 800b540:	ee00 0a10 	vmov	s0, r0
 800b544:	b00a      	add	sp, #40	; 0x28
 800b546:	ecbd 8b02 	vpop	{d8}
 800b54a:	bd10      	pop	{r4, pc}
 800b54c:	4610      	mov	r0, r2
 800b54e:	4619      	mov	r1, r3
 800b550:	f7f5 f9a4 	bl	800089c <__aeabi_ddiv>
 800b554:	2c02      	cmp	r4, #2
 800b556:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b55a:	d1e3      	bne.n	800b524 <sqrtf+0x54>
 800b55c:	f7ff fe40 	bl	800b1e0 <__errno>
 800b560:	2321      	movs	r3, #33	; 0x21
 800b562:	6003      	str	r3, [r0, #0]
 800b564:	e7e2      	b.n	800b52c <sqrtf+0x5c>
 800b566:	bf00      	nop
 800b568:	20000074 	.word	0x20000074
 800b56c:	0801f864 	.word	0x0801f864

0800b570 <__ieee754_log>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	ec51 0b10 	vmov	r0, r1, d0
 800b578:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b57c:	b087      	sub	sp, #28
 800b57e:	460d      	mov	r5, r1
 800b580:	da27      	bge.n	800b5d2 <__ieee754_log+0x62>
 800b582:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b586:	4303      	orrs	r3, r0
 800b588:	ee10 2a10 	vmov	r2, s0
 800b58c:	d10a      	bne.n	800b5a4 <__ieee754_log+0x34>
 800b58e:	49cc      	ldr	r1, [pc, #816]	; (800b8c0 <__ieee754_log+0x350>)
 800b590:	2200      	movs	r2, #0
 800b592:	2300      	movs	r3, #0
 800b594:	2000      	movs	r0, #0
 800b596:	f7f5 f981 	bl	800089c <__aeabi_ddiv>
 800b59a:	ec41 0b10 	vmov	d0, r0, r1
 800b59e:	b007      	add	sp, #28
 800b5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	da05      	bge.n	800b5b4 <__ieee754_log+0x44>
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	f7f4 fe95 	bl	80002d8 <__aeabi_dsub>
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	e7f0      	b.n	800b596 <__ieee754_log+0x26>
 800b5b4:	4bc3      	ldr	r3, [pc, #780]	; (800b8c4 <__ieee754_log+0x354>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f7f5 f846 	bl	8000648 <__aeabi_dmul>
 800b5bc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b5c0:	460d      	mov	r5, r1
 800b5c2:	4ac1      	ldr	r2, [pc, #772]	; (800b8c8 <__ieee754_log+0x358>)
 800b5c4:	4295      	cmp	r5, r2
 800b5c6:	dd06      	ble.n	800b5d6 <__ieee754_log+0x66>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	f7f4 fe86 	bl	80002dc <__adddf3>
 800b5d0:	e7e3      	b.n	800b59a <__ieee754_log+0x2a>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	e7f5      	b.n	800b5c2 <__ieee754_log+0x52>
 800b5d6:	152c      	asrs	r4, r5, #20
 800b5d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b5dc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b5e0:	441c      	add	r4, r3
 800b5e2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b5e6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b5ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5ee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b5f2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b5f6:	ea42 0105 	orr.w	r1, r2, r5
 800b5fa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b5fe:	2200      	movs	r2, #0
 800b600:	4bb2      	ldr	r3, [pc, #712]	; (800b8cc <__ieee754_log+0x35c>)
 800b602:	f7f4 fe69 	bl	80002d8 <__aeabi_dsub>
 800b606:	1cab      	adds	r3, r5, #2
 800b608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	4682      	mov	sl, r0
 800b610:	468b      	mov	fp, r1
 800b612:	f04f 0200 	mov.w	r2, #0
 800b616:	dc53      	bgt.n	800b6c0 <__ieee754_log+0x150>
 800b618:	2300      	movs	r3, #0
 800b61a:	f7f5 fa7d 	bl	8000b18 <__aeabi_dcmpeq>
 800b61e:	b1d0      	cbz	r0, 800b656 <__ieee754_log+0xe6>
 800b620:	2c00      	cmp	r4, #0
 800b622:	f000 8120 	beq.w	800b866 <__ieee754_log+0x2f6>
 800b626:	4620      	mov	r0, r4
 800b628:	f7f4 ffa4 	bl	8000574 <__aeabi_i2d>
 800b62c:	a390      	add	r3, pc, #576	; (adr r3, 800b870 <__ieee754_log+0x300>)
 800b62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b632:	4606      	mov	r6, r0
 800b634:	460f      	mov	r7, r1
 800b636:	f7f5 f807 	bl	8000648 <__aeabi_dmul>
 800b63a:	a38f      	add	r3, pc, #572	; (adr r3, 800b878 <__ieee754_log+0x308>)
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	4604      	mov	r4, r0
 800b642:	460d      	mov	r5, r1
 800b644:	4630      	mov	r0, r6
 800b646:	4639      	mov	r1, r7
 800b648:	f7f4 fffe 	bl	8000648 <__aeabi_dmul>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	4620      	mov	r0, r4
 800b652:	4629      	mov	r1, r5
 800b654:	e7ba      	b.n	800b5cc <__ieee754_log+0x5c>
 800b656:	a38a      	add	r3, pc, #552	; (adr r3, 800b880 <__ieee754_log+0x310>)
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	4650      	mov	r0, sl
 800b65e:	4659      	mov	r1, fp
 800b660:	f7f4 fff2 	bl	8000648 <__aeabi_dmul>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	2000      	movs	r0, #0
 800b66a:	4999      	ldr	r1, [pc, #612]	; (800b8d0 <__ieee754_log+0x360>)
 800b66c:	f7f4 fe34 	bl	80002d8 <__aeabi_dsub>
 800b670:	4652      	mov	r2, sl
 800b672:	4606      	mov	r6, r0
 800b674:	460f      	mov	r7, r1
 800b676:	465b      	mov	r3, fp
 800b678:	4650      	mov	r0, sl
 800b67a:	4659      	mov	r1, fp
 800b67c:	f7f4 ffe4 	bl	8000648 <__aeabi_dmul>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4630      	mov	r0, r6
 800b686:	4639      	mov	r1, r7
 800b688:	f7f4 ffde 	bl	8000648 <__aeabi_dmul>
 800b68c:	4606      	mov	r6, r0
 800b68e:	460f      	mov	r7, r1
 800b690:	b914      	cbnz	r4, 800b698 <__ieee754_log+0x128>
 800b692:	4632      	mov	r2, r6
 800b694:	463b      	mov	r3, r7
 800b696:	e0a0      	b.n	800b7da <__ieee754_log+0x26a>
 800b698:	4620      	mov	r0, r4
 800b69a:	f7f4 ff6b 	bl	8000574 <__aeabi_i2d>
 800b69e:	a374      	add	r3, pc, #464	; (adr r3, 800b870 <__ieee754_log+0x300>)
 800b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a4:	4680      	mov	r8, r0
 800b6a6:	4689      	mov	r9, r1
 800b6a8:	f7f4 ffce 	bl	8000648 <__aeabi_dmul>
 800b6ac:	a372      	add	r3, pc, #456	; (adr r3, 800b878 <__ieee754_log+0x308>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	460d      	mov	r5, r1
 800b6b6:	4640      	mov	r0, r8
 800b6b8:	4649      	mov	r1, r9
 800b6ba:	f7f4 ffc5 	bl	8000648 <__aeabi_dmul>
 800b6be:	e0a5      	b.n	800b80c <__ieee754_log+0x29c>
 800b6c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6c4:	f7f4 fe0a 	bl	80002dc <__adddf3>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	4650      	mov	r0, sl
 800b6ce:	4659      	mov	r1, fp
 800b6d0:	f7f5 f8e4 	bl	800089c <__aeabi_ddiv>
 800b6d4:	e9cd 0100 	strd	r0, r1, [sp]
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f7f4 ff4b 	bl	8000574 <__aeabi_i2d>
 800b6de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	f7f4 ffad 	bl	8000648 <__aeabi_dmul>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6f6:	f7f4 ffa7 	bl	8000648 <__aeabi_dmul>
 800b6fa:	a363      	add	r3, pc, #396	; (adr r3, 800b888 <__ieee754_log+0x318>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	4680      	mov	r8, r0
 800b702:	4689      	mov	r9, r1
 800b704:	f7f4 ffa0 	bl	8000648 <__aeabi_dmul>
 800b708:	a361      	add	r3, pc, #388	; (adr r3, 800b890 <__ieee754_log+0x320>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	f7f4 fde5 	bl	80002dc <__adddf3>
 800b712:	4642      	mov	r2, r8
 800b714:	464b      	mov	r3, r9
 800b716:	f7f4 ff97 	bl	8000648 <__aeabi_dmul>
 800b71a:	a35f      	add	r3, pc, #380	; (adr r3, 800b898 <__ieee754_log+0x328>)
 800b71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b720:	f7f4 fddc 	bl	80002dc <__adddf3>
 800b724:	4642      	mov	r2, r8
 800b726:	464b      	mov	r3, r9
 800b728:	f7f4 ff8e 	bl	8000648 <__aeabi_dmul>
 800b72c:	a35c      	add	r3, pc, #368	; (adr r3, 800b8a0 <__ieee754_log+0x330>)
 800b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b732:	f7f4 fdd3 	bl	80002dc <__adddf3>
 800b736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b73a:	f7f4 ff85 	bl	8000648 <__aeabi_dmul>
 800b73e:	a35a      	add	r3, pc, #360	; (adr r3, 800b8a8 <__ieee754_log+0x338>)
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b748:	4640      	mov	r0, r8
 800b74a:	4649      	mov	r1, r9
 800b74c:	f7f4 ff7c 	bl	8000648 <__aeabi_dmul>
 800b750:	a357      	add	r3, pc, #348	; (adr r3, 800b8b0 <__ieee754_log+0x340>)
 800b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b756:	f7f4 fdc1 	bl	80002dc <__adddf3>
 800b75a:	4642      	mov	r2, r8
 800b75c:	464b      	mov	r3, r9
 800b75e:	f7f4 ff73 	bl	8000648 <__aeabi_dmul>
 800b762:	a355      	add	r3, pc, #340	; (adr r3, 800b8b8 <__ieee754_log+0x348>)
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	f7f4 fdb8 	bl	80002dc <__adddf3>
 800b76c:	4642      	mov	r2, r8
 800b76e:	464b      	mov	r3, r9
 800b770:	f7f4 ff6a 	bl	8000648 <__aeabi_dmul>
 800b774:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800b778:	4602      	mov	r2, r0
 800b77a:	460b      	mov	r3, r1
 800b77c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b780:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b784:	f7f4 fdaa 	bl	80002dc <__adddf3>
 800b788:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800b78c:	3551      	adds	r5, #81	; 0x51
 800b78e:	4335      	orrs	r5, r6
 800b790:	2d00      	cmp	r5, #0
 800b792:	4680      	mov	r8, r0
 800b794:	4689      	mov	r9, r1
 800b796:	dd48      	ble.n	800b82a <__ieee754_log+0x2ba>
 800b798:	2200      	movs	r2, #0
 800b79a:	4b4d      	ldr	r3, [pc, #308]	; (800b8d0 <__ieee754_log+0x360>)
 800b79c:	4650      	mov	r0, sl
 800b79e:	4659      	mov	r1, fp
 800b7a0:	f7f4 ff52 	bl	8000648 <__aeabi_dmul>
 800b7a4:	4652      	mov	r2, sl
 800b7a6:	465b      	mov	r3, fp
 800b7a8:	f7f4 ff4e 	bl	8000648 <__aeabi_dmul>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4606      	mov	r6, r0
 800b7b2:	460f      	mov	r7, r1
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	4649      	mov	r1, r9
 800b7b8:	f7f4 fd90 	bl	80002dc <__adddf3>
 800b7bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7c0:	f7f4 ff42 	bl	8000648 <__aeabi_dmul>
 800b7c4:	4680      	mov	r8, r0
 800b7c6:	4689      	mov	r9, r1
 800b7c8:	b964      	cbnz	r4, 800b7e4 <__ieee754_log+0x274>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	4639      	mov	r1, r7
 800b7d2:	f7f4 fd81 	bl	80002d8 <__aeabi_dsub>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4650      	mov	r0, sl
 800b7dc:	4659      	mov	r1, fp
 800b7de:	f7f4 fd7b 	bl	80002d8 <__aeabi_dsub>
 800b7e2:	e6da      	b.n	800b59a <__ieee754_log+0x2a>
 800b7e4:	a322      	add	r3, pc, #136	; (adr r3, 800b870 <__ieee754_log+0x300>)
 800b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7ee:	f7f4 ff2b 	bl	8000648 <__aeabi_dmul>
 800b7f2:	a321      	add	r3, pc, #132	; (adr r3, 800b878 <__ieee754_log+0x308>)
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	460d      	mov	r5, r1
 800b7fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b800:	f7f4 ff22 	bl	8000648 <__aeabi_dmul>
 800b804:	4642      	mov	r2, r8
 800b806:	464b      	mov	r3, r9
 800b808:	f7f4 fd68 	bl	80002dc <__adddf3>
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	4630      	mov	r0, r6
 800b812:	4639      	mov	r1, r7
 800b814:	f7f4 fd60 	bl	80002d8 <__aeabi_dsub>
 800b818:	4652      	mov	r2, sl
 800b81a:	465b      	mov	r3, fp
 800b81c:	f7f4 fd5c 	bl	80002d8 <__aeabi_dsub>
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	4620      	mov	r0, r4
 800b826:	4629      	mov	r1, r5
 800b828:	e7d9      	b.n	800b7de <__ieee754_log+0x26e>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	4650      	mov	r0, sl
 800b830:	4659      	mov	r1, fp
 800b832:	f7f4 fd51 	bl	80002d8 <__aeabi_dsub>
 800b836:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b83a:	f7f4 ff05 	bl	8000648 <__aeabi_dmul>
 800b83e:	4606      	mov	r6, r0
 800b840:	460f      	mov	r7, r1
 800b842:	2c00      	cmp	r4, #0
 800b844:	f43f af25 	beq.w	800b692 <__ieee754_log+0x122>
 800b848:	a309      	add	r3, pc, #36	; (adr r3, 800b870 <__ieee754_log+0x300>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b852:	f7f4 fef9 	bl	8000648 <__aeabi_dmul>
 800b856:	a308      	add	r3, pc, #32	; (adr r3, 800b878 <__ieee754_log+0x308>)
 800b858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85c:	4604      	mov	r4, r0
 800b85e:	460d      	mov	r5, r1
 800b860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b864:	e729      	b.n	800b6ba <__ieee754_log+0x14a>
 800b866:	2000      	movs	r0, #0
 800b868:	2100      	movs	r1, #0
 800b86a:	e696      	b.n	800b59a <__ieee754_log+0x2a>
 800b86c:	f3af 8000 	nop.w
 800b870:	fee00000 	.word	0xfee00000
 800b874:	3fe62e42 	.word	0x3fe62e42
 800b878:	35793c76 	.word	0x35793c76
 800b87c:	3dea39ef 	.word	0x3dea39ef
 800b880:	55555555 	.word	0x55555555
 800b884:	3fd55555 	.word	0x3fd55555
 800b888:	df3e5244 	.word	0xdf3e5244
 800b88c:	3fc2f112 	.word	0x3fc2f112
 800b890:	96cb03de 	.word	0x96cb03de
 800b894:	3fc74664 	.word	0x3fc74664
 800b898:	94229359 	.word	0x94229359
 800b89c:	3fd24924 	.word	0x3fd24924
 800b8a0:	55555593 	.word	0x55555593
 800b8a4:	3fe55555 	.word	0x3fe55555
 800b8a8:	d078c69f 	.word	0xd078c69f
 800b8ac:	3fc39a09 	.word	0x3fc39a09
 800b8b0:	1d8e78af 	.word	0x1d8e78af
 800b8b4:	3fcc71c5 	.word	0x3fcc71c5
 800b8b8:	9997fa04 	.word	0x9997fa04
 800b8bc:	3fd99999 	.word	0x3fd99999
 800b8c0:	c3500000 	.word	0xc3500000
 800b8c4:	43500000 	.word	0x43500000
 800b8c8:	7fefffff 	.word	0x7fefffff
 800b8cc:	3ff00000 	.word	0x3ff00000
 800b8d0:	3fe00000 	.word	0x3fe00000

0800b8d4 <__ieee754_rem_pio2f>:
 800b8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8d6:	ee10 6a10 	vmov	r6, s0
 800b8da:	4b86      	ldr	r3, [pc, #536]	; (800baf4 <__ieee754_rem_pio2f+0x220>)
 800b8dc:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800b8e0:	429c      	cmp	r4, r3
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	4605      	mov	r5, r0
 800b8e6:	dc05      	bgt.n	800b8f4 <__ieee754_rem_pio2f+0x20>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	ed85 0a00 	vstr	s0, [r5]
 800b8ee:	6043      	str	r3, [r0, #4]
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	e020      	b.n	800b936 <__ieee754_rem_pio2f+0x62>
 800b8f4:	4b80      	ldr	r3, [pc, #512]	; (800baf8 <__ieee754_rem_pio2f+0x224>)
 800b8f6:	429c      	cmp	r4, r3
 800b8f8:	dc38      	bgt.n	800b96c <__ieee754_rem_pio2f+0x98>
 800b8fa:	2e00      	cmp	r6, #0
 800b8fc:	f024 040f 	bic.w	r4, r4, #15
 800b900:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800bafc <__ieee754_rem_pio2f+0x228>
 800b904:	4b7e      	ldr	r3, [pc, #504]	; (800bb00 <__ieee754_rem_pio2f+0x22c>)
 800b906:	dd18      	ble.n	800b93a <__ieee754_rem_pio2f+0x66>
 800b908:	429c      	cmp	r4, r3
 800b90a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b90e:	bf09      	itett	eq
 800b910:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800bb04 <__ieee754_rem_pio2f+0x230>
 800b914:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800bb08 <__ieee754_rem_pio2f+0x234>
 800b918:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b91c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800bb0c <__ieee754_rem_pio2f+0x238>
 800b920:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b924:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b928:	edc0 6a00 	vstr	s13, [r0]
 800b92c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b930:	edc0 7a01 	vstr	s15, [r0, #4]
 800b934:	2001      	movs	r0, #1
 800b936:	b007      	add	sp, #28
 800b938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b93a:	429c      	cmp	r4, r3
 800b93c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b940:	bf09      	itett	eq
 800b942:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800bb04 <__ieee754_rem_pio2f+0x230>
 800b946:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800bb08 <__ieee754_rem_pio2f+0x234>
 800b94a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b94e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800bb0c <__ieee754_rem_pio2f+0x238>
 800b952:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b956:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b95a:	edc0 6a00 	vstr	s13, [r0]
 800b95e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b962:	edc0 7a01 	vstr	s15, [r0, #4]
 800b966:	f04f 30ff 	mov.w	r0, #4294967295
 800b96a:	e7e4      	b.n	800b936 <__ieee754_rem_pio2f+0x62>
 800b96c:	4b68      	ldr	r3, [pc, #416]	; (800bb10 <__ieee754_rem_pio2f+0x23c>)
 800b96e:	429c      	cmp	r4, r3
 800b970:	dc71      	bgt.n	800ba56 <__ieee754_rem_pio2f+0x182>
 800b972:	f000 fc11 	bl	800c198 <fabsf>
 800b976:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800bb14 <__ieee754_rem_pio2f+0x240>
 800b97a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b97e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b986:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800b98a:	ee17 0a90 	vmov	r0, s15
 800b98e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800bafc <__ieee754_rem_pio2f+0x228>
 800b992:	eeb1 7a46 	vneg.f32	s14, s12
 800b996:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b99a:	281f      	cmp	r0, #31
 800b99c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800bb08 <__ieee754_rem_pio2f+0x234>
 800b9a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b9a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b9a8:	ee16 3a90 	vmov	r3, s13
 800b9ac:	dc1c      	bgt.n	800b9e8 <__ieee754_rem_pio2f+0x114>
 800b9ae:	1e47      	subs	r7, r0, #1
 800b9b0:	4959      	ldr	r1, [pc, #356]	; (800bb18 <__ieee754_rem_pio2f+0x244>)
 800b9b2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b9b6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800b9ba:	428a      	cmp	r2, r1
 800b9bc:	d014      	beq.n	800b9e8 <__ieee754_rem_pio2f+0x114>
 800b9be:	602b      	str	r3, [r5, #0]
 800b9c0:	ed95 7a00 	vldr	s14, [r5]
 800b9c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b9c8:	2e00      	cmp	r6, #0
 800b9ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b9ce:	ed85 0a01 	vstr	s0, [r5, #4]
 800b9d2:	dab0      	bge.n	800b936 <__ieee754_rem_pio2f+0x62>
 800b9d4:	eeb1 7a47 	vneg.f32	s14, s14
 800b9d8:	eeb1 0a40 	vneg.f32	s0, s0
 800b9dc:	ed85 7a00 	vstr	s14, [r5]
 800b9e0:	ed85 0a01 	vstr	s0, [r5, #4]
 800b9e4:	4240      	negs	r0, r0
 800b9e6:	e7a6      	b.n	800b936 <__ieee754_rem_pio2f+0x62>
 800b9e8:	15e4      	asrs	r4, r4, #23
 800b9ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b9ee:	1aa2      	subs	r2, r4, r2
 800b9f0:	2a08      	cmp	r2, #8
 800b9f2:	dde4      	ble.n	800b9be <__ieee754_rem_pio2f+0xea>
 800b9f4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800bb04 <__ieee754_rem_pio2f+0x230>
 800b9f8:	eef0 6a40 	vmov.f32	s13, s0
 800b9fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ba00:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ba04:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ba08:	eddf 7a40 	vldr	s15, [pc, #256]	; 800bb0c <__ieee754_rem_pio2f+0x238>
 800ba0c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800ba10:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800ba14:	eef0 7a40 	vmov.f32	s15, s0
 800ba18:	ee15 3a90 	vmov	r3, s11
 800ba1c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ba20:	1aa4      	subs	r4, r4, r2
 800ba22:	2c19      	cmp	r4, #25
 800ba24:	dc04      	bgt.n	800ba30 <__ieee754_rem_pio2f+0x15c>
 800ba26:	edc5 5a00 	vstr	s11, [r5]
 800ba2a:	eeb0 0a66 	vmov.f32	s0, s13
 800ba2e:	e7c7      	b.n	800b9c0 <__ieee754_rem_pio2f+0xec>
 800ba30:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800bb1c <__ieee754_rem_pio2f+0x248>
 800ba34:	eeb0 0a66 	vmov.f32	s0, s13
 800ba38:	eea7 0a25 	vfma.f32	s0, s14, s11
 800ba3c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ba40:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ba44:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800bb20 <__ieee754_rem_pio2f+0x24c>
 800ba48:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800ba4c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ba50:	ed85 7a00 	vstr	s14, [r5]
 800ba54:	e7b4      	b.n	800b9c0 <__ieee754_rem_pio2f+0xec>
 800ba56:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ba5a:	db06      	blt.n	800ba6a <__ieee754_rem_pio2f+0x196>
 800ba5c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ba60:	edc0 7a01 	vstr	s15, [r0, #4]
 800ba64:	edc0 7a00 	vstr	s15, [r0]
 800ba68:	e742      	b.n	800b8f0 <__ieee754_rem_pio2f+0x1c>
 800ba6a:	15e2      	asrs	r2, r4, #23
 800ba6c:	3a86      	subs	r2, #134	; 0x86
 800ba6e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800ba72:	ee07 3a90 	vmov	s15, r3
 800ba76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ba7a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800bb24 <__ieee754_rem_pio2f+0x250>
 800ba7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ba82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba86:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ba8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ba8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ba92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ba96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba9a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ba9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800baa2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800baa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baaa:	edcd 7a05 	vstr	s15, [sp, #20]
 800baae:	d11e      	bne.n	800baee <__ieee754_rem_pio2f+0x21a>
 800bab0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab8:	bf0c      	ite	eq
 800baba:	2301      	moveq	r3, #1
 800babc:	2302      	movne	r3, #2
 800babe:	491a      	ldr	r1, [pc, #104]	; (800bb28 <__ieee754_rem_pio2f+0x254>)
 800bac0:	9101      	str	r1, [sp, #4]
 800bac2:	2102      	movs	r1, #2
 800bac4:	9100      	str	r1, [sp, #0]
 800bac6:	a803      	add	r0, sp, #12
 800bac8:	4629      	mov	r1, r5
 800baca:	f000 f891 	bl	800bbf0 <__kernel_rem_pio2f>
 800bace:	2e00      	cmp	r6, #0
 800bad0:	f6bf af31 	bge.w	800b936 <__ieee754_rem_pio2f+0x62>
 800bad4:	edd5 7a00 	vldr	s15, [r5]
 800bad8:	eef1 7a67 	vneg.f32	s15, s15
 800badc:	edc5 7a00 	vstr	s15, [r5]
 800bae0:	edd5 7a01 	vldr	s15, [r5, #4]
 800bae4:	eef1 7a67 	vneg.f32	s15, s15
 800bae8:	edc5 7a01 	vstr	s15, [r5, #4]
 800baec:	e77a      	b.n	800b9e4 <__ieee754_rem_pio2f+0x110>
 800baee:	2303      	movs	r3, #3
 800baf0:	e7e5      	b.n	800babe <__ieee754_rem_pio2f+0x1ea>
 800baf2:	bf00      	nop
 800baf4:	3f490fd8 	.word	0x3f490fd8
 800baf8:	4016cbe3 	.word	0x4016cbe3
 800bafc:	3fc90f80 	.word	0x3fc90f80
 800bb00:	3fc90fd0 	.word	0x3fc90fd0
 800bb04:	37354400 	.word	0x37354400
 800bb08:	37354443 	.word	0x37354443
 800bb0c:	2e85a308 	.word	0x2e85a308
 800bb10:	43490f80 	.word	0x43490f80
 800bb14:	3f22f984 	.word	0x3f22f984
 800bb18:	0801f86c 	.word	0x0801f86c
 800bb1c:	2e85a300 	.word	0x2e85a300
 800bb20:	248d3132 	.word	0x248d3132
 800bb24:	43800000 	.word	0x43800000
 800bb28:	0801f8ec 	.word	0x0801f8ec

0800bb2c <__ieee754_sqrtf>:
 800bb2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bb30:	4770      	bx	lr
	...

0800bb34 <__kernel_cosf>:
 800bb34:	ee10 3a10 	vmov	r3, s0
 800bb38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb3c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bb40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb44:	da05      	bge.n	800bb52 <__kernel_cosf+0x1e>
 800bb46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bb4a:	ee17 2a90 	vmov	r2, s15
 800bb4e:	2a00      	cmp	r2, #0
 800bb50:	d03b      	beq.n	800bbca <__kernel_cosf+0x96>
 800bb52:	ee20 6a00 	vmul.f32	s12, s0, s0
 800bb56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bb5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800bbd0 <__kernel_cosf+0x9c>
 800bb5e:	4a1d      	ldr	r2, [pc, #116]	; (800bbd4 <__kernel_cosf+0xa0>)
 800bb60:	ee66 7a07 	vmul.f32	s15, s12, s14
 800bb64:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800bbd8 <__kernel_cosf+0xa4>
 800bb68:	eea6 7a25 	vfma.f32	s14, s12, s11
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800bbdc <__kernel_cosf+0xa8>
 800bb72:	eee7 5a06 	vfma.f32	s11, s14, s12
 800bb76:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800bbe0 <__kernel_cosf+0xac>
 800bb7a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bb7e:	eddf 5a19 	vldr	s11, [pc, #100]	; 800bbe4 <__kernel_cosf+0xb0>
 800bb82:	eee7 5a06 	vfma.f32	s11, s14, s12
 800bb86:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800bbe8 <__kernel_cosf+0xb4>
 800bb8a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bb8e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800bb92:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bb96:	eee6 0a07 	vfma.f32	s1, s12, s14
 800bb9a:	dc04      	bgt.n	800bba6 <__kernel_cosf+0x72>
 800bb9c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800bba0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800bba4:	4770      	bx	lr
 800bba6:	4a11      	ldr	r2, [pc, #68]	; (800bbec <__kernel_cosf+0xb8>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	bfda      	itte	le
 800bbac:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800bbb0:	ee07 3a10 	vmovle	s14, r3
 800bbb4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800bbb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbbc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800bbc0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bbc4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bbc8:	4770      	bx	lr
 800bbca:	eeb0 0a66 	vmov.f32	s0, s13
 800bbce:	4770      	bx	lr
 800bbd0:	ad47d74e 	.word	0xad47d74e
 800bbd4:	3e999999 	.word	0x3e999999
 800bbd8:	310f74f6 	.word	0x310f74f6
 800bbdc:	b493f27c 	.word	0xb493f27c
 800bbe0:	37d00d01 	.word	0x37d00d01
 800bbe4:	bab60b61 	.word	0xbab60b61
 800bbe8:	3d2aaaab 	.word	0x3d2aaaab
 800bbec:	3f480000 	.word	0x3f480000

0800bbf0 <__kernel_rem_pio2f>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	ed2d 8b04 	vpush	{d8-d9}
 800bbf8:	b0d7      	sub	sp, #348	; 0x15c
 800bbfa:	469b      	mov	fp, r3
 800bbfc:	460e      	mov	r6, r1
 800bbfe:	4bbe      	ldr	r3, [pc, #760]	; (800bef8 <__kernel_rem_pio2f+0x308>)
 800bc00:	9964      	ldr	r1, [sp, #400]	; 0x190
 800bc02:	9002      	str	r0, [sp, #8]
 800bc04:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800bc08:	9865      	ldr	r0, [sp, #404]	; 0x194
 800bc0a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800bf08 <__kernel_rem_pio2f+0x318>
 800bc0e:	1ed1      	subs	r1, r2, #3
 800bc10:	2308      	movs	r3, #8
 800bc12:	fb91 f1f3 	sdiv	r1, r1, r3
 800bc16:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800bc1a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800bc1e:	1c4c      	adds	r4, r1, #1
 800bc20:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800bc24:	eba1 050a 	sub.w	r5, r1, sl
 800bc28:	aa1a      	add	r2, sp, #104	; 0x68
 800bc2a:	eb09 070a 	add.w	r7, r9, sl
 800bc2e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800bc32:	4696      	mov	lr, r2
 800bc34:	2300      	movs	r3, #0
 800bc36:	42bb      	cmp	r3, r7
 800bc38:	dd0f      	ble.n	800bc5a <__kernel_rem_pio2f+0x6a>
 800bc3a:	af42      	add	r7, sp, #264	; 0x108
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	454a      	cmp	r2, r9
 800bc40:	dc27      	bgt.n	800bc92 <__kernel_rem_pio2f+0xa2>
 800bc42:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800bc46:	eb0b 0302 	add.w	r3, fp, r2
 800bc4a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800bc4e:	9d02      	ldr	r5, [sp, #8]
 800bc50:	eddf 7aad 	vldr	s15, [pc, #692]	; 800bf08 <__kernel_rem_pio2f+0x318>
 800bc54:	f04f 0c00 	mov.w	ip, #0
 800bc58:	e015      	b.n	800bc86 <__kernel_rem_pio2f+0x96>
 800bc5a:	42dd      	cmn	r5, r3
 800bc5c:	bf5d      	ittte	pl
 800bc5e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800bc62:	ee07 2a90 	vmovpl	s15, r2
 800bc66:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bc6a:	eef0 7a47 	vmovmi.f32	s15, s14
 800bc6e:	ecee 7a01 	vstmia	lr!, {s15}
 800bc72:	3301      	adds	r3, #1
 800bc74:	e7df      	b.n	800bc36 <__kernel_rem_pio2f+0x46>
 800bc76:	ecf5 6a01 	vldmia	r5!, {s13}
 800bc7a:	ed33 7a01 	vldmdb	r3!, {s14}
 800bc7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bc82:	f10c 0c01 	add.w	ip, ip, #1
 800bc86:	45d4      	cmp	ip, sl
 800bc88:	ddf5      	ble.n	800bc76 <__kernel_rem_pio2f+0x86>
 800bc8a:	ece7 7a01 	vstmia	r7!, {s15}
 800bc8e:	3201      	adds	r2, #1
 800bc90:	e7d5      	b.n	800bc3e <__kernel_rem_pio2f+0x4e>
 800bc92:	ab06      	add	r3, sp, #24
 800bc94:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800bc98:	9304      	str	r3, [sp, #16]
 800bc9a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800bf04 <__kernel_rem_pio2f+0x314>
 800bc9e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800bf00 <__kernel_rem_pio2f+0x310>
 800bca2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800bca6:	9303      	str	r3, [sp, #12]
 800bca8:	464d      	mov	r5, r9
 800bcaa:	ab56      	add	r3, sp, #344	; 0x158
 800bcac:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800bcb0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800bcb4:	3f01      	subs	r7, #1
 800bcb6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800bcba:	00bf      	lsls	r7, r7, #2
 800bcbc:	ab56      	add	r3, sp, #344	; 0x158
 800bcbe:	19da      	adds	r2, r3, r7
 800bcc0:	3a4c      	subs	r2, #76	; 0x4c
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	1ae9      	subs	r1, r5, r3
 800bcc6:	2900      	cmp	r1, #0
 800bcc8:	dc4c      	bgt.n	800bd64 <__kernel_rem_pio2f+0x174>
 800bcca:	4620      	mov	r0, r4
 800bccc:	f000 faae 	bl	800c22c <scalbnf>
 800bcd0:	eeb0 8a40 	vmov.f32	s16, s0
 800bcd4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800bcd8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bcdc:	f000 fa64 	bl	800c1a8 <floorf>
 800bce0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bce4:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bce8:	2c00      	cmp	r4, #0
 800bcea:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bcee:	edcd 7a01 	vstr	s15, [sp, #4]
 800bcf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcf6:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bcfa:	dd48      	ble.n	800bd8e <__kernel_rem_pio2f+0x19e>
 800bcfc:	1e69      	subs	r1, r5, #1
 800bcfe:	ab06      	add	r3, sp, #24
 800bd00:	f1c4 0008 	rsb	r0, r4, #8
 800bd04:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800bd08:	9a01      	ldr	r2, [sp, #4]
 800bd0a:	fa4c f300 	asr.w	r3, ip, r0
 800bd0e:	441a      	add	r2, r3
 800bd10:	4083      	lsls	r3, r0
 800bd12:	9201      	str	r2, [sp, #4]
 800bd14:	ebac 0203 	sub.w	r2, ip, r3
 800bd18:	ab06      	add	r3, sp, #24
 800bd1a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800bd1e:	f1c4 0307 	rsb	r3, r4, #7
 800bd22:	fa42 f803 	asr.w	r8, r2, r3
 800bd26:	f1b8 0f00 	cmp.w	r8, #0
 800bd2a:	dd41      	ble.n	800bdb0 <__kernel_rem_pio2f+0x1c0>
 800bd2c:	9b01      	ldr	r3, [sp, #4]
 800bd2e:	2000      	movs	r0, #0
 800bd30:	3301      	adds	r3, #1
 800bd32:	9301      	str	r3, [sp, #4]
 800bd34:	4601      	mov	r1, r0
 800bd36:	4285      	cmp	r5, r0
 800bd38:	dc6d      	bgt.n	800be16 <__kernel_rem_pio2f+0x226>
 800bd3a:	2c00      	cmp	r4, #0
 800bd3c:	dd04      	ble.n	800bd48 <__kernel_rem_pio2f+0x158>
 800bd3e:	2c01      	cmp	r4, #1
 800bd40:	d07e      	beq.n	800be40 <__kernel_rem_pio2f+0x250>
 800bd42:	2c02      	cmp	r4, #2
 800bd44:	f000 8086 	beq.w	800be54 <__kernel_rem_pio2f+0x264>
 800bd48:	f1b8 0f02 	cmp.w	r8, #2
 800bd4c:	d130      	bne.n	800bdb0 <__kernel_rem_pio2f+0x1c0>
 800bd4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bd52:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bd56:	b359      	cbz	r1, 800bdb0 <__kernel_rem_pio2f+0x1c0>
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 fa67 	bl	800c22c <scalbnf>
 800bd5e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bd62:	e025      	b.n	800bdb0 <__kernel_rem_pio2f+0x1c0>
 800bd64:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bd68:	a806      	add	r0, sp, #24
 800bd6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd72:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bd76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bd7a:	ee10 1a10 	vmov	r1, s0
 800bd7e:	ed32 0a01 	vldmdb	r2!, {s0}
 800bd82:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800bd86:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	e79a      	b.n	800bcc4 <__kernel_rem_pio2f+0xd4>
 800bd8e:	d106      	bne.n	800bd9e <__kernel_rem_pio2f+0x1ae>
 800bd90:	1e6b      	subs	r3, r5, #1
 800bd92:	aa06      	add	r2, sp, #24
 800bd94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bd98:	ea4f 2822 	mov.w	r8, r2, asr #8
 800bd9c:	e7c3      	b.n	800bd26 <__kernel_rem_pio2f+0x136>
 800bd9e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bda2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdaa:	da31      	bge.n	800be10 <__kernel_rem_pio2f+0x220>
 800bdac:	f04f 0800 	mov.w	r8, #0
 800bdb0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bdb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb8:	f040 80a8 	bne.w	800bf0c <__kernel_rem_pio2f+0x31c>
 800bdbc:	1e6b      	subs	r3, r5, #1
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	4548      	cmp	r0, r9
 800bdc4:	da4d      	bge.n	800be62 <__kernel_rem_pio2f+0x272>
 800bdc6:	2a00      	cmp	r2, #0
 800bdc8:	f000 8087 	beq.w	800beda <__kernel_rem_pio2f+0x2ea>
 800bdcc:	aa06      	add	r2, sp, #24
 800bdce:	3c08      	subs	r4, #8
 800bdd0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bdd4:	2900      	cmp	r1, #0
 800bdd6:	f000 808d 	beq.w	800bef4 <__kernel_rem_pio2f+0x304>
 800bdda:	4620      	mov	r0, r4
 800bddc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bde0:	9302      	str	r3, [sp, #8]
 800bde2:	f000 fa23 	bl	800c22c <scalbnf>
 800bde6:	9b02      	ldr	r3, [sp, #8]
 800bde8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800bf04 <__kernel_rem_pio2f+0x314>
 800bdec:	0099      	lsls	r1, r3, #2
 800bdee:	aa42      	add	r2, sp, #264	; 0x108
 800bdf0:	1850      	adds	r0, r2, r1
 800bdf2:	1d05      	adds	r5, r0, #4
 800bdf4:	461c      	mov	r4, r3
 800bdf6:	2c00      	cmp	r4, #0
 800bdf8:	f280 80b8 	bge.w	800bf6c <__kernel_rem_pio2f+0x37c>
 800bdfc:	2500      	movs	r5, #0
 800bdfe:	1b5c      	subs	r4, r3, r5
 800be00:	2c00      	cmp	r4, #0
 800be02:	f2c0 80d8 	blt.w	800bfb6 <__kernel_rem_pio2f+0x3c6>
 800be06:	4f3d      	ldr	r7, [pc, #244]	; (800befc <__kernel_rem_pio2f+0x30c>)
 800be08:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800bf08 <__kernel_rem_pio2f+0x318>
 800be0c:	2400      	movs	r4, #0
 800be0e:	e0c6      	b.n	800bf9e <__kernel_rem_pio2f+0x3ae>
 800be10:	f04f 0802 	mov.w	r8, #2
 800be14:	e78a      	b.n	800bd2c <__kernel_rem_pio2f+0x13c>
 800be16:	ab06      	add	r3, sp, #24
 800be18:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800be1c:	b949      	cbnz	r1, 800be32 <__kernel_rem_pio2f+0x242>
 800be1e:	b12b      	cbz	r3, 800be2c <__kernel_rem_pio2f+0x23c>
 800be20:	aa06      	add	r2, sp, #24
 800be22:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800be26:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800be2a:	2301      	movs	r3, #1
 800be2c:	3001      	adds	r0, #1
 800be2e:	4619      	mov	r1, r3
 800be30:	e781      	b.n	800bd36 <__kernel_rem_pio2f+0x146>
 800be32:	aa06      	add	r2, sp, #24
 800be34:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800be38:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800be3c:	460b      	mov	r3, r1
 800be3e:	e7f5      	b.n	800be2c <__kernel_rem_pio2f+0x23c>
 800be40:	1e68      	subs	r0, r5, #1
 800be42:	ab06      	add	r3, sp, #24
 800be44:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800be48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be4c:	aa06      	add	r2, sp, #24
 800be4e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800be52:	e779      	b.n	800bd48 <__kernel_rem_pio2f+0x158>
 800be54:	1e68      	subs	r0, r5, #1
 800be56:	ab06      	add	r3, sp, #24
 800be58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800be5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be60:	e7f4      	b.n	800be4c <__kernel_rem_pio2f+0x25c>
 800be62:	a906      	add	r1, sp, #24
 800be64:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800be68:	3801      	subs	r0, #1
 800be6a:	430a      	orrs	r2, r1
 800be6c:	e7a9      	b.n	800bdc2 <__kernel_rem_pio2f+0x1d2>
 800be6e:	f10c 0c01 	add.w	ip, ip, #1
 800be72:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800be76:	2a00      	cmp	r2, #0
 800be78:	d0f9      	beq.n	800be6e <__kernel_rem_pio2f+0x27e>
 800be7a:	eb0b 0305 	add.w	r3, fp, r5
 800be7e:	aa1a      	add	r2, sp, #104	; 0x68
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	1898      	adds	r0, r3, r2
 800be84:	3004      	adds	r0, #4
 800be86:	1c69      	adds	r1, r5, #1
 800be88:	3704      	adds	r7, #4
 800be8a:	2200      	movs	r2, #0
 800be8c:	4465      	add	r5, ip
 800be8e:	9005      	str	r0, [sp, #20]
 800be90:	428d      	cmp	r5, r1
 800be92:	f6ff af0a 	blt.w	800bcaa <__kernel_rem_pio2f+0xba>
 800be96:	a81a      	add	r0, sp, #104	; 0x68
 800be98:	eb02 0c03 	add.w	ip, r2, r3
 800be9c:	4484      	add	ip, r0
 800be9e:	9803      	ldr	r0, [sp, #12]
 800bea0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bea4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800bea8:	9001      	str	r0, [sp, #4]
 800beaa:	ee07 0a90 	vmov	s15, r0
 800beae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800beb2:	9805      	ldr	r0, [sp, #20]
 800beb4:	edcc 7a00 	vstr	s15, [ip]
 800beb8:	eddf 7a13 	vldr	s15, [pc, #76]	; 800bf08 <__kernel_rem_pio2f+0x318>
 800bebc:	eb00 0802 	add.w	r8, r0, r2
 800bec0:	f04f 0c00 	mov.w	ip, #0
 800bec4:	45d4      	cmp	ip, sl
 800bec6:	dd0c      	ble.n	800bee2 <__kernel_rem_pio2f+0x2f2>
 800bec8:	eb02 0c07 	add.w	ip, r2, r7
 800becc:	a842      	add	r0, sp, #264	; 0x108
 800bece:	4484      	add	ip, r0
 800bed0:	edcc 7a01 	vstr	s15, [ip, #4]
 800bed4:	3101      	adds	r1, #1
 800bed6:	3204      	adds	r2, #4
 800bed8:	e7da      	b.n	800be90 <__kernel_rem_pio2f+0x2a0>
 800beda:	9b04      	ldr	r3, [sp, #16]
 800bedc:	f04f 0c01 	mov.w	ip, #1
 800bee0:	e7c7      	b.n	800be72 <__kernel_rem_pio2f+0x282>
 800bee2:	ecfe 6a01 	vldmia	lr!, {s13}
 800bee6:	ed38 7a01 	vldmdb	r8!, {s14}
 800beea:	f10c 0c01 	add.w	ip, ip, #1
 800beee:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bef2:	e7e7      	b.n	800bec4 <__kernel_rem_pio2f+0x2d4>
 800bef4:	3b01      	subs	r3, #1
 800bef6:	e769      	b.n	800bdcc <__kernel_rem_pio2f+0x1dc>
 800bef8:	0801fc30 	.word	0x0801fc30
 800befc:	0801fc04 	.word	0x0801fc04
 800bf00:	43800000 	.word	0x43800000
 800bf04:	3b800000 	.word	0x3b800000
 800bf08:	00000000 	.word	0x00000000
 800bf0c:	4260      	negs	r0, r4
 800bf0e:	eeb0 0a48 	vmov.f32	s0, s16
 800bf12:	f000 f98b 	bl	800c22c <scalbnf>
 800bf16:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800bf00 <__kernel_rem_pio2f+0x310>
 800bf1a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bf1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf22:	db1a      	blt.n	800bf5a <__kernel_rem_pio2f+0x36a>
 800bf24:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800bf04 <__kernel_rem_pio2f+0x314>
 800bf28:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bf2c:	aa06      	add	r2, sp, #24
 800bf2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf32:	a906      	add	r1, sp, #24
 800bf34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf38:	3408      	adds	r4, #8
 800bf3a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bf3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf42:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bf46:	ee10 3a10 	vmov	r3, s0
 800bf4a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800bf4e:	1c6b      	adds	r3, r5, #1
 800bf50:	ee17 2a90 	vmov	r2, s15
 800bf54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bf58:	e73f      	b.n	800bdda <__kernel_rem_pio2f+0x1ea>
 800bf5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bf5e:	aa06      	add	r2, sp, #24
 800bf60:	ee10 3a10 	vmov	r3, s0
 800bf64:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800bf68:	462b      	mov	r3, r5
 800bf6a:	e736      	b.n	800bdda <__kernel_rem_pio2f+0x1ea>
 800bf6c:	aa06      	add	r2, sp, #24
 800bf6e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800bf72:	9202      	str	r2, [sp, #8]
 800bf74:	ee07 2a90 	vmov	s15, r2
 800bf78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf7c:	3c01      	subs	r4, #1
 800bf7e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bf82:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bf86:	ed65 7a01 	vstmdb	r5!, {s15}
 800bf8a:	e734      	b.n	800bdf6 <__kernel_rem_pio2f+0x206>
 800bf8c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800bf90:	ecf7 6a01 	vldmia	r7!, {s13}
 800bf94:	ed9c 7a00 	vldr	s14, [ip]
 800bf98:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bf9c:	3401      	adds	r4, #1
 800bf9e:	454c      	cmp	r4, r9
 800bfa0:	dc01      	bgt.n	800bfa6 <__kernel_rem_pio2f+0x3b6>
 800bfa2:	42a5      	cmp	r5, r4
 800bfa4:	daf2      	bge.n	800bf8c <__kernel_rem_pio2f+0x39c>
 800bfa6:	aa56      	add	r2, sp, #344	; 0x158
 800bfa8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800bfac:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800bfb0:	3501      	adds	r5, #1
 800bfb2:	3804      	subs	r0, #4
 800bfb4:	e723      	b.n	800bdfe <__kernel_rem_pio2f+0x20e>
 800bfb6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800bfb8:	2a03      	cmp	r2, #3
 800bfba:	d84d      	bhi.n	800c058 <__kernel_rem_pio2f+0x468>
 800bfbc:	e8df f002 	tbb	[pc, r2]
 800bfc0:	021f1f3e 	.word	0x021f1f3e
 800bfc4:	aa56      	add	r2, sp, #344	; 0x158
 800bfc6:	4411      	add	r1, r2
 800bfc8:	399c      	subs	r1, #156	; 0x9c
 800bfca:	4608      	mov	r0, r1
 800bfcc:	461c      	mov	r4, r3
 800bfce:	2c00      	cmp	r4, #0
 800bfd0:	dc5f      	bgt.n	800c092 <__kernel_rem_pio2f+0x4a2>
 800bfd2:	4608      	mov	r0, r1
 800bfd4:	461c      	mov	r4, r3
 800bfd6:	2c01      	cmp	r4, #1
 800bfd8:	dc6b      	bgt.n	800c0b2 <__kernel_rem_pio2f+0x4c2>
 800bfda:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800bf08 <__kernel_rem_pio2f+0x318>
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	dc77      	bgt.n	800c0d2 <__kernel_rem_pio2f+0x4e2>
 800bfe2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800bfe6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800bfea:	f1b8 0f00 	cmp.w	r8, #0
 800bfee:	d176      	bne.n	800c0de <__kernel_rem_pio2f+0x4ee>
 800bff0:	edc6 6a00 	vstr	s13, [r6]
 800bff4:	ed86 7a01 	vstr	s14, [r6, #4]
 800bff8:	edc6 7a02 	vstr	s15, [r6, #8]
 800bffc:	e02c      	b.n	800c058 <__kernel_rem_pio2f+0x468>
 800bffe:	aa56      	add	r2, sp, #344	; 0x158
 800c000:	4411      	add	r1, r2
 800c002:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800bf08 <__kernel_rem_pio2f+0x318>
 800c006:	399c      	subs	r1, #156	; 0x9c
 800c008:	4618      	mov	r0, r3
 800c00a:	2800      	cmp	r0, #0
 800c00c:	da32      	bge.n	800c074 <__kernel_rem_pio2f+0x484>
 800c00e:	f1b8 0f00 	cmp.w	r8, #0
 800c012:	d035      	beq.n	800c080 <__kernel_rem_pio2f+0x490>
 800c014:	eef1 7a47 	vneg.f32	s15, s14
 800c018:	edc6 7a00 	vstr	s15, [r6]
 800c01c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800c020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c024:	a82f      	add	r0, sp, #188	; 0xbc
 800c026:	2101      	movs	r1, #1
 800c028:	428b      	cmp	r3, r1
 800c02a:	da2c      	bge.n	800c086 <__kernel_rem_pio2f+0x496>
 800c02c:	f1b8 0f00 	cmp.w	r8, #0
 800c030:	d001      	beq.n	800c036 <__kernel_rem_pio2f+0x446>
 800c032:	eef1 7a67 	vneg.f32	s15, s15
 800c036:	edc6 7a01 	vstr	s15, [r6, #4]
 800c03a:	e00d      	b.n	800c058 <__kernel_rem_pio2f+0x468>
 800c03c:	aa56      	add	r2, sp, #344	; 0x158
 800c03e:	4411      	add	r1, r2
 800c040:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800bf08 <__kernel_rem_pio2f+0x318>
 800c044:	399c      	subs	r1, #156	; 0x9c
 800c046:	2b00      	cmp	r3, #0
 800c048:	da0e      	bge.n	800c068 <__kernel_rem_pio2f+0x478>
 800c04a:	f1b8 0f00 	cmp.w	r8, #0
 800c04e:	d001      	beq.n	800c054 <__kernel_rem_pio2f+0x464>
 800c050:	eef1 7a67 	vneg.f32	s15, s15
 800c054:	edc6 7a00 	vstr	s15, [r6]
 800c058:	9b01      	ldr	r3, [sp, #4]
 800c05a:	f003 0007 	and.w	r0, r3, #7
 800c05e:	b057      	add	sp, #348	; 0x15c
 800c060:	ecbd 8b04 	vpop	{d8-d9}
 800c064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c068:	ed31 7a01 	vldmdb	r1!, {s14}
 800c06c:	3b01      	subs	r3, #1
 800c06e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c072:	e7e8      	b.n	800c046 <__kernel_rem_pio2f+0x456>
 800c074:	ed71 7a01 	vldmdb	r1!, {s15}
 800c078:	3801      	subs	r0, #1
 800c07a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c07e:	e7c4      	b.n	800c00a <__kernel_rem_pio2f+0x41a>
 800c080:	eef0 7a47 	vmov.f32	s15, s14
 800c084:	e7c8      	b.n	800c018 <__kernel_rem_pio2f+0x428>
 800c086:	ecb0 7a01 	vldmia	r0!, {s14}
 800c08a:	3101      	adds	r1, #1
 800c08c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c090:	e7ca      	b.n	800c028 <__kernel_rem_pio2f+0x438>
 800c092:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c096:	ed70 6a01 	vldmdb	r0!, {s13}
 800c09a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c09e:	3c01      	subs	r4, #1
 800c0a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0a4:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c0a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0ac:	edc0 7a00 	vstr	s15, [r0]
 800c0b0:	e78d      	b.n	800bfce <__kernel_rem_pio2f+0x3de>
 800c0b2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c0b6:	ed70 6a01 	vldmdb	r0!, {s13}
 800c0ba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c0be:	3c01      	subs	r4, #1
 800c0c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0c4:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c0c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0cc:	edc0 7a00 	vstr	s15, [r0]
 800c0d0:	e781      	b.n	800bfd6 <__kernel_rem_pio2f+0x3e6>
 800c0d2:	ed31 7a01 	vldmdb	r1!, {s14}
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c0dc:	e77f      	b.n	800bfde <__kernel_rem_pio2f+0x3ee>
 800c0de:	eef1 6a66 	vneg.f32	s13, s13
 800c0e2:	eeb1 7a47 	vneg.f32	s14, s14
 800c0e6:	edc6 6a00 	vstr	s13, [r6]
 800c0ea:	ed86 7a01 	vstr	s14, [r6, #4]
 800c0ee:	eef1 7a67 	vneg.f32	s15, s15
 800c0f2:	e781      	b.n	800bff8 <__kernel_rem_pio2f+0x408>

0800c0f4 <__kernel_sinf>:
 800c0f4:	ee10 3a10 	vmov	r3, s0
 800c0f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c100:	da04      	bge.n	800c10c <__kernel_sinf+0x18>
 800c102:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c106:	ee17 3a90 	vmov	r3, s15
 800c10a:	b35b      	cbz	r3, 800c164 <__kernel_sinf+0x70>
 800c10c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c110:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c168 <__kernel_sinf+0x74>
 800c114:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c16c <__kernel_sinf+0x78>
 800c118:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c11c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c170 <__kernel_sinf+0x7c>
 800c120:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c124:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c174 <__kernel_sinf+0x80>
 800c128:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c12c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c178 <__kernel_sinf+0x84>
 800c130:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c134:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c138:	b930      	cbnz	r0, 800c148 <__kernel_sinf+0x54>
 800c13a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c17c <__kernel_sinf+0x88>
 800c13e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c142:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c146:	4770      	bx	lr
 800c148:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c14c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c150:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c154:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c158:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c180 <__kernel_sinf+0x8c>
 800c15c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c160:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop
 800c168:	2f2ec9d3 	.word	0x2f2ec9d3
 800c16c:	b2d72f34 	.word	0xb2d72f34
 800c170:	3638ef1b 	.word	0x3638ef1b
 800c174:	b9500d01 	.word	0xb9500d01
 800c178:	3c088889 	.word	0x3c088889
 800c17c:	be2aaaab 	.word	0xbe2aaaab
 800c180:	3e2aaaab 	.word	0x3e2aaaab

0800c184 <matherr>:
 800c184:	2000      	movs	r0, #0
 800c186:	4770      	bx	lr

0800c188 <nan>:
 800c188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c190 <nan+0x8>
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	00000000 	.word	0x00000000
 800c194:	7ff80000 	.word	0x7ff80000

0800c198 <fabsf>:
 800c198:	ee10 3a10 	vmov	r3, s0
 800c19c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1a0:	ee00 3a10 	vmov	s0, r3
 800c1a4:	4770      	bx	lr
	...

0800c1a8 <floorf>:
 800c1a8:	ee10 3a10 	vmov	r3, s0
 800c1ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c1b0:	0dca      	lsrs	r2, r1, #23
 800c1b2:	3a7f      	subs	r2, #127	; 0x7f
 800c1b4:	2a16      	cmp	r2, #22
 800c1b6:	dc2a      	bgt.n	800c20e <floorf+0x66>
 800c1b8:	2a00      	cmp	r2, #0
 800c1ba:	da11      	bge.n	800c1e0 <floorf+0x38>
 800c1bc:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c220 <floorf+0x78>
 800c1c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c1c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1cc:	dd05      	ble.n	800c1da <floorf+0x32>
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	da23      	bge.n	800c21a <floorf+0x72>
 800c1d2:	4a14      	ldr	r2, [pc, #80]	; (800c224 <floorf+0x7c>)
 800c1d4:	2900      	cmp	r1, #0
 800c1d6:	bf18      	it	ne
 800c1d8:	4613      	movne	r3, r2
 800c1da:	ee00 3a10 	vmov	s0, r3
 800c1de:	4770      	bx	lr
 800c1e0:	4911      	ldr	r1, [pc, #68]	; (800c228 <floorf+0x80>)
 800c1e2:	4111      	asrs	r1, r2
 800c1e4:	420b      	tst	r3, r1
 800c1e6:	d0fa      	beq.n	800c1de <floorf+0x36>
 800c1e8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c220 <floorf+0x78>
 800c1ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c1f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f8:	ddef      	ble.n	800c1da <floorf+0x32>
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	bfbe      	ittt	lt
 800c1fe:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c202:	fa40 f202 	asrlt.w	r2, r0, r2
 800c206:	189b      	addlt	r3, r3, r2
 800c208:	ea23 0301 	bic.w	r3, r3, r1
 800c20c:	e7e5      	b.n	800c1da <floorf+0x32>
 800c20e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c212:	d3e4      	bcc.n	800c1de <floorf+0x36>
 800c214:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c218:	4770      	bx	lr
 800c21a:	2300      	movs	r3, #0
 800c21c:	e7dd      	b.n	800c1da <floorf+0x32>
 800c21e:	bf00      	nop
 800c220:	7149f2ca 	.word	0x7149f2ca
 800c224:	bf800000 	.word	0xbf800000
 800c228:	007fffff 	.word	0x007fffff

0800c22c <scalbnf>:
 800c22c:	b508      	push	{r3, lr}
 800c22e:	ee10 2a10 	vmov	r2, s0
 800c232:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800c236:	ed2d 8b02 	vpush	{d8}
 800c23a:	eef0 0a40 	vmov.f32	s1, s0
 800c23e:	d004      	beq.n	800c24a <scalbnf+0x1e>
 800c240:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c244:	d306      	bcc.n	800c254 <scalbnf+0x28>
 800c246:	ee70 0a00 	vadd.f32	s1, s0, s0
 800c24a:	ecbd 8b02 	vpop	{d8}
 800c24e:	eeb0 0a60 	vmov.f32	s0, s1
 800c252:	bd08      	pop	{r3, pc}
 800c254:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c258:	d21c      	bcs.n	800c294 <scalbnf+0x68>
 800c25a:	4b1f      	ldr	r3, [pc, #124]	; (800c2d8 <scalbnf+0xac>)
 800c25c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c2dc <scalbnf+0xb0>
 800c260:	4298      	cmp	r0, r3
 800c262:	ee60 0a27 	vmul.f32	s1, s0, s15
 800c266:	db10      	blt.n	800c28a <scalbnf+0x5e>
 800c268:	ee10 2a90 	vmov	r2, s1
 800c26c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800c270:	3b19      	subs	r3, #25
 800c272:	4403      	add	r3, r0
 800c274:	2bfe      	cmp	r3, #254	; 0xfe
 800c276:	dd0f      	ble.n	800c298 <scalbnf+0x6c>
 800c278:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800c2e0 <scalbnf+0xb4>
 800c27c:	eeb0 0a48 	vmov.f32	s0, s16
 800c280:	f000 f834 	bl	800c2ec <copysignf>
 800c284:	ee60 0a08 	vmul.f32	s1, s0, s16
 800c288:	e7df      	b.n	800c24a <scalbnf+0x1e>
 800c28a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800c2e4 <scalbnf+0xb8>
 800c28e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c292:	e7da      	b.n	800c24a <scalbnf+0x1e>
 800c294:	0ddb      	lsrs	r3, r3, #23
 800c296:	e7ec      	b.n	800c272 <scalbnf+0x46>
 800c298:	2b00      	cmp	r3, #0
 800c29a:	dd06      	ble.n	800c2aa <scalbnf+0x7e>
 800c29c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c2a0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c2a4:	ee00 3a90 	vmov	s1, r3
 800c2a8:	e7cf      	b.n	800c24a <scalbnf+0x1e>
 800c2aa:	f113 0f16 	cmn.w	r3, #22
 800c2ae:	da06      	bge.n	800c2be <scalbnf+0x92>
 800c2b0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c2b4:	4298      	cmp	r0, r3
 800c2b6:	dcdf      	bgt.n	800c278 <scalbnf+0x4c>
 800c2b8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800c2e4 <scalbnf+0xb8>
 800c2bc:	e7de      	b.n	800c27c <scalbnf+0x50>
 800c2be:	3319      	adds	r3, #25
 800c2c0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c2c4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c2c8:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c2e8 <scalbnf+0xbc>
 800c2cc:	ee07 3a10 	vmov	s14, r3
 800c2d0:	ee67 0a27 	vmul.f32	s1, s14, s15
 800c2d4:	e7b9      	b.n	800c24a <scalbnf+0x1e>
 800c2d6:	bf00      	nop
 800c2d8:	ffff3cb0 	.word	0xffff3cb0
 800c2dc:	4c000000 	.word	0x4c000000
 800c2e0:	7149f2ca 	.word	0x7149f2ca
 800c2e4:	0da24260 	.word	0x0da24260
 800c2e8:	33000000 	.word	0x33000000

0800c2ec <copysignf>:
 800c2ec:	ee10 3a10 	vmov	r3, s0
 800c2f0:	ee10 2a90 	vmov	r2, s1
 800c2f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	ee00 3a10 	vmov	s0, r3
 800c302:	4770      	bx	lr

0800c304 <_init>:
 800c304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c306:	bf00      	nop
 800c308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c30a:	bc08      	pop	{r3}
 800c30c:	469e      	mov	lr, r3
 800c30e:	4770      	bx	lr

0800c310 <_fini>:
 800c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c312:	bf00      	nop
 800c314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c316:	bc08      	pop	{r3}
 800c318:	469e      	mov	lr, r3
 800c31a:	4770      	bx	lr
